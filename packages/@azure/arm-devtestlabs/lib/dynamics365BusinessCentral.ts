/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { Dynamics365BusinessCentralContext } from "./dynamics365BusinessCentralContext";


class Dynamics365BusinessCentral extends Dynamics365BusinessCentralContext {
  /**
   * Initializes a new instance of the Dynamics365BusinessCentral class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param ifMatch Required. When this request header is included and the eTag provided does not
   * match the current tag on the entity, this will not be updated.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, ifMatch: string, options?: Models.Dynamics365BusinessCentralOptions) {
    super(credentials, ifMatch, options);
  }

  /**
   * @summary Returns a list of companies
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCompaniesResponse>
   */
  getCompanies(options?: Models.Dynamics365BusinessCentralGetCompaniesOptionalParams): Promise<Models.GetCompaniesResponse>;
  /**
   * @param callback The callback
   */
  getCompanies(callback: msRest.ServiceCallback<Models.GetCompaniesOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCompanies(options: Models.Dynamics365BusinessCentralGetCompaniesOptionalParams, callback: msRest.ServiceCallback<Models.GetCompaniesOKResponse>): void;
  getCompanies(options?: Models.Dynamics365BusinessCentralGetCompaniesOptionalParams | msRest.ServiceCallback<Models.GetCompaniesOKResponse>, callback?: msRest.ServiceCallback<Models.GetCompaniesOKResponse>): Promise<Models.GetCompaniesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCompaniesOperationSpec,
      callback) as Promise<Models.GetCompaniesResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an company object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCompanyByIdResponse>
   */
  getCompanyById(companyId: string, options?: Models.Dynamics365BusinessCentralGetCompanyByIdOptionalParams): Promise<Models.GetCompanyByIdResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCompanyById(companyId: string, callback: msRest.ServiceCallback<Models.Company>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCompanyById(companyId: string, options: Models.Dynamics365BusinessCentralGetCompanyByIdOptionalParams, callback: msRest.ServiceCallback<Models.Company>): void;
  getCompanyById(companyId: string, options?: Models.Dynamics365BusinessCentralGetCompanyByIdOptionalParams | msRest.ServiceCallback<Models.Company>, callback?: msRest.ServiceCallback<Models.Company>): Promise<Models.GetCompanyByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCompanyByIdOperationSpec,
      callback) as Promise<Models.GetCompanyByIdResponse>;
  }

  /**
   * @summary Returns a list of items
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetItemsResponse>
   */
  getItems(companyId: string, options?: Models.Dynamics365BusinessCentralGetItemsOptionalParams): Promise<Models.GetItemsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getItems(companyId: string, callback: msRest.ServiceCallback<Models.GetItemsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getItems(companyId: string, options: Models.Dynamics365BusinessCentralGetItemsOptionalParams, callback: msRest.ServiceCallback<Models.GetItemsOKResponse>): void;
  getItems(companyId: string, options?: Models.Dynamics365BusinessCentralGetItemsOptionalParams | msRest.ServiceCallback<Models.GetItemsOKResponse>, callback?: msRest.ServiceCallback<Models.GetItemsOKResponse>): Promise<Models.GetItemsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getItemsOperationSpec,
      callback) as Promise<Models.GetItemsResponse>;
  }

  /**
   * @summary Creates a item in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostItemResponse>
   */
  postItem(body: Models.Body, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostItemResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postItem(body: Models.Body, companyId: string, callback: msRest.ServiceCallback<Models.Item>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postItem(body: Models.Body, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Item>): void;
  postItem(body: Models.Body, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Item>, callback?: msRest.ServiceCallback<Models.Item>): Promise<Models.PostItemResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postItemOperationSpec,
      callback) as Promise<Models.PostItemResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an item object for Dynamics 365 Business
   * Central.
   * @param companyId id for company
   * @param itemId id for item
   * @param [options] The optional parameters
   * @returns Promise<Models.GetItemByIdResponse>
   */
  getItemById(companyId: string, itemId: string, options?: Models.Dynamics365BusinessCentralGetItemByIdOptionalParams): Promise<Models.GetItemByIdResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param callback The callback
   */
  getItemById(companyId: string, itemId: string, callback: msRest.ServiceCallback<Models.Item>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param options The optional parameters
   * @param callback The callback
   */
  getItemById(companyId: string, itemId: string, options: Models.Dynamics365BusinessCentralGetItemByIdOptionalParams, callback: msRest.ServiceCallback<Models.Item>): void;
  getItemById(companyId: string, itemId: string, options?: Models.Dynamics365BusinessCentralGetItemByIdOptionalParams | msRest.ServiceCallback<Models.Item>, callback?: msRest.ServiceCallback<Models.Item>): Promise<Models.GetItemByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        options
      },
      getItemByIdOperationSpec,
      callback) as Promise<Models.GetItemByIdResponse>;
  }

  /**
   * @summary Delete an item in Dynamics 365 Business Central
   * @param companyId id for company
   * @param itemId id for item
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteItemById(companyId: string, itemId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param callback The callback
   */
  deleteItemById(companyId: string, itemId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteItemById(companyId: string, itemId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteItemById(companyId: string, itemId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        options
      },
      deleteItemByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified item
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchItemByIdResponse>
   */
  patchItemById(body: Models.Body, companyId: string, itemId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchItemByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param callback The callback
   */
  patchItemById(body: Models.Body, companyId: string, itemId: string, callback: msRest.ServiceCallback<Models.Item>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param options The optional parameters
   * @param callback The callback
   */
  patchItemById(body: Models.Body, companyId: string, itemId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Item>): void;
  patchItemById(body: Models.Body, companyId: string, itemId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Item>, callback?: msRest.ServiceCallback<Models.Item>): Promise<Models.PatchItemByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        itemId,
        options
      },
      patchItemByIdOperationSpec,
      callback) as Promise<Models.PatchItemByIdResponse>;
  }

  /**
   * @summary Returns a list of picture
   * @param companyId id for company
   * @param itemId id for item
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForItemResponse>
   */
  getPictureForItem(companyId: string, itemId: string, options?: Models.Dynamics365BusinessCentralGetPictureForItemOptionalParams): Promise<Models.GetPictureForItemResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param callback The callback
   */
  getPictureForItem(companyId: string, itemId: string, callback: msRest.ServiceCallback<Models.GetPictureForItemOKResponse>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForItem(companyId: string, itemId: string, options: Models.Dynamics365BusinessCentralGetPictureForItemOptionalParams, callback: msRest.ServiceCallback<Models.GetPictureForItemOKResponse>): void;
  getPictureForItem(companyId: string, itemId: string, options?: Models.Dynamics365BusinessCentralGetPictureForItemOptionalParams | msRest.ServiceCallback<Models.GetPictureForItemOKResponse>, callback?: msRest.ServiceCallback<Models.GetPictureForItemOKResponse>): Promise<Models.GetPictureForItemResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        options
      },
      getPictureForItemOperationSpec,
      callback) as Promise<Models.GetPictureForItemResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForItemByIdResponse>
   */
  getPictureForItemById(companyId: string, itemId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForItemByIdOptionalParams): Promise<Models.GetPictureForItemByIdResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param callback The callback
   */
  getPictureForItemById(companyId: string, itemId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForItemById(companyId: string, itemId: string, pictureId: string, options: Models.Dynamics365BusinessCentralGetPictureForItemByIdOptionalParams, callback: msRest.ServiceCallback<Models.Picture>): void;
  getPictureForItemById(companyId: string, itemId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForItemByIdOptionalParams | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.GetPictureForItemByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        pictureId,
        options
      },
      getPictureForItemByIdOperationSpec,
      callback) as Promise<Models.GetPictureForItemByIdResponse>;
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePictureForItemByIdById(companyId: string, itemId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param callback The callback
   */
  deletePictureForItemByIdById(companyId: string, itemId: string, pictureId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePictureForItemByIdById(companyId: string, itemId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePictureForItemByIdById(companyId: string, itemId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        pictureId,
        options
      },
      deletePictureForItemByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified picture
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPictureForItemByIdByIdResponse>
   */
  patchPictureForItemByIdById(body: Models.BodyModel, companyId: string, itemId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPictureForItemByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param callback The callback
   */
  patchPictureForItemByIdById(body: Models.BodyModel, companyId: string, itemId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPictureForItemByIdById(body: Models.BodyModel, companyId: string, itemId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Picture>): void;
  patchPictureForItemByIdById(body: Models.BodyModel, companyId: string, itemId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.PatchPictureForItemByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        itemId,
        pictureId,
        options
      },
      patchPictureForItemByIdByIdOperationSpec,
      callback) as Promise<Models.PatchPictureForItemByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of defaultDimensions
   * @param companyId id for company
   * @param itemId id for item
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForItemResponse>
   */
  getDefaultDimensionsForItem(companyId: string, itemId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForItemOptionalParams): Promise<Models.GetDefaultDimensionsForItemResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param callback The callback
   */
  getDefaultDimensionsForItem(companyId: string, itemId: string, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForItemOKResponse>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForItem(companyId: string, itemId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForItemOptionalParams, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForItemOKResponse>): void;
  getDefaultDimensionsForItem(companyId: string, itemId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForItemOptionalParams | msRest.ServiceCallback<Models.GetDefaultDimensionsForItemOKResponse>, callback?: msRest.ServiceCallback<Models.GetDefaultDimensionsForItemOKResponse>): Promise<Models.GetDefaultDimensionsForItemResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        options
      },
      getDefaultDimensionsForItemOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForItemResponse>;
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param [options] The optional parameters
   * @returns Promise<Models.PostDefaultDimensionsForItemResponse>
   */
  postDefaultDimensionsForItem(body: Models.BodyModelModel, companyId: string, itemId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostDefaultDimensionsForItemResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param callback The callback
   */
  postDefaultDimensionsForItem(body: Models.BodyModelModel, companyId: string, itemId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param options The optional parameters
   * @param callback The callback
   */
  postDefaultDimensionsForItem(body: Models.BodyModelModel, companyId: string, itemId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  postDefaultDimensionsForItem(body: Models.BodyModelModel, companyId: string, itemId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PostDefaultDimensionsForItemResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        itemId,
        options
      },
      postDefaultDimensionsForItemOperationSpec,
      callback) as Promise<Models.PostDefaultDimensionsForItemResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForItemByDimensionIdByParentIdResponse>
   */
  getDefaultDimensionsForItemByDimensionIdByParentId(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForItemByDimensionIdByParentIdOptionalParams): Promise<Models.GetDefaultDimensionsForItemByDimensionIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  getDefaultDimensionsForItemByDimensionIdByParentId(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForItemByDimensionIdByParentId(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForItemByDimensionIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  getDefaultDimensionsForItemByDimensionIdByParentId(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForItemByDimensionIdByParentIdOptionalParams | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.GetDefaultDimensionsForItemByDimensionIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      getDefaultDimensionsForItemByDimensionIdByParentIdOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForItemByDimensionIdByParentIdResponse>;
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDefaultDimensionsForItemByDimensionIdByParentIdById(companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      deleteDefaultDimensionsForItemByDimensionIdByParentIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchDefaultDimensionsForItemByDimensionIdByParentIdByIdResponse>
   */
  patchDefaultDimensionsForItemByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchDefaultDimensionsForItemByDimensionIdByParentIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  patchDefaultDimensionsForItemByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param itemId id for item
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  patchDefaultDimensionsForItemByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  patchDefaultDimensionsForItemByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, itemId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PatchDefaultDimensionsForItemByDimensionIdByParentIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        itemId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      patchDefaultDimensionsForItemByDimensionIdByParentIdByIdOperationSpec,
      callback) as Promise<Models.PatchDefaultDimensionsForItemByDimensionIdByParentIdByIdResponse>;
  }

  /**
   * @summary Returns a list of picture
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureResponse>
   */
  getPicture(companyId: string, options?: Models.Dynamics365BusinessCentralGetPictureOptionalParams): Promise<Models.GetPictureResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getPicture(companyId: string, callback: msRest.ServiceCallback<Models.GetPictureOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getPicture(companyId: string, options: Models.Dynamics365BusinessCentralGetPictureOptionalParams, callback: msRest.ServiceCallback<Models.GetPictureOKResponse>): void;
  getPicture(companyId: string, options?: Models.Dynamics365BusinessCentralGetPictureOptionalParams | msRest.ServiceCallback<Models.GetPictureOKResponse>, callback?: msRest.ServiceCallback<Models.GetPictureOKResponse>): Promise<Models.GetPictureResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getPictureOperationSpec,
      callback) as Promise<Models.GetPictureResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureByIdResponse>
   */
  getPictureById(companyId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureByIdOptionalParams): Promise<Models.GetPictureByIdResponse>;
  /**
   * @param companyId id for company
   * @param pictureId id for picture
   * @param callback The callback
   */
  getPictureById(companyId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param companyId id for company
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureById(companyId: string, pictureId: string, options: Models.Dynamics365BusinessCentralGetPictureByIdOptionalParams, callback: msRest.ServiceCallback<Models.Picture>): void;
  getPictureById(companyId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureByIdOptionalParams | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.GetPictureByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        pictureId,
        options
      },
      getPictureByIdOperationSpec,
      callback) as Promise<Models.GetPictureByIdResponse>;
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   * @param companyId id for company
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePictureById(companyId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param pictureId id for picture
   * @param callback The callback
   */
  deletePictureById(companyId: string, pictureId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePictureById(companyId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePictureById(companyId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        pictureId,
        options
      },
      deletePictureByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified picture
   * @param body
   * @param companyId id for company
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPictureByIdResponse>
   */
  patchPictureById(body: Models.BodyModel, companyId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPictureByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param pictureId id for picture
   * @param callback The callback
   */
  patchPictureById(body: Models.BodyModel, companyId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPictureById(body: Models.BodyModel, companyId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Picture>): void;
  patchPictureById(body: Models.BodyModel, companyId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.PatchPictureByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        pictureId,
        options
      },
      patchPictureByIdOperationSpec,
      callback) as Promise<Models.PatchPictureByIdResponse>;
  }

  /**
   * @summary Returns a list of defaultDimensions
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsResponse>
   */
  getDefaultDimensions(companyId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsOptionalParams): Promise<Models.GetDefaultDimensionsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getDefaultDimensions(companyId: string, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensions(companyId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsOptionalParams, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsOKResponse>): void;
  getDefaultDimensions(companyId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsOptionalParams | msRest.ServiceCallback<Models.GetDefaultDimensionsOKResponse>, callback?: msRest.ServiceCallback<Models.GetDefaultDimensionsOKResponse>): Promise<Models.GetDefaultDimensionsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getDefaultDimensionsOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsResponse>;
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostDefaultDimensionsResponse>
   */
  postDefaultDimensions(body: Models.BodyModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostDefaultDimensionsResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postDefaultDimensions(body: Models.BodyModelModel, companyId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postDefaultDimensions(body: Models.BodyModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  postDefaultDimensions(body: Models.BodyModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PostDefaultDimensionsResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postDefaultDimensionsOperationSpec,
      callback) as Promise<Models.PostDefaultDimensionsResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsByDimensionIdByParentIdResponse>
   */
  getDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsByDimensionIdByParentIdOptionalParams): Promise<Models.GetDefaultDimensionsByDimensionIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  getDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsByDimensionIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  getDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsByDimensionIdByParentIdOptionalParams | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.GetDefaultDimensionsByDimensionIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      getDefaultDimensionsByDimensionIdByParentIdOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsByDimensionIdByParentIdResponse>;
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  deleteDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDefaultDimensionsByDimensionIdByParentId(companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      deleteDefaultDimensionsByDimensionIdByParentIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   * @param body
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchDefaultDimensionsByDimensionIdByParentIdResponse>
   */
  patchDefaultDimensionsByDimensionIdByParentId(body: Models.BodyModelModel, companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchDefaultDimensionsByDimensionIdByParentIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  patchDefaultDimensionsByDimensionIdByParentId(body: Models.BodyModelModel, companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  patchDefaultDimensionsByDimensionIdByParentId(body: Models.BodyModelModel, companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  patchDefaultDimensionsByDimensionIdByParentId(body: Models.BodyModelModel, companyId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PatchDefaultDimensionsByDimensionIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      patchDefaultDimensionsByDimensionIdByParentIdOperationSpec,
      callback) as Promise<Models.PatchDefaultDimensionsByDimensionIdByParentIdResponse>;
  }

  /**
   * @summary Returns a list of customers
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomersResponse>
   */
  getCustomers(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomersOptionalParams): Promise<Models.GetCustomersResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCustomers(companyId: string, callback: msRest.ServiceCallback<Models.GetCustomersOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomers(companyId: string, options: Models.Dynamics365BusinessCentralGetCustomersOptionalParams, callback: msRest.ServiceCallback<Models.GetCustomersOKResponse>): void;
  getCustomers(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomersOptionalParams | msRest.ServiceCallback<Models.GetCustomersOKResponse>, callback?: msRest.ServiceCallback<Models.GetCustomersOKResponse>): Promise<Models.GetCustomersResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCustomersOperationSpec,
      callback) as Promise<Models.GetCustomersResponse>;
  }

  /**
   * @summary Creates a customer in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostCustomerResponse>
   */
  postCustomer(body: Models.BodyModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostCustomerResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postCustomer(body: Models.BodyModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.Customer>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postCustomer(body: Models.BodyModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Customer>): void;
  postCustomer(body: Models.BodyModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Customer>, callback?: msRest.ServiceCallback<Models.Customer>): Promise<Models.PostCustomerResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postCustomerOperationSpec,
      callback) as Promise<Models.PostCustomerResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an customer object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param customerId id for customer
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerByIdResponse>
   */
  getCustomerById(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetCustomerByIdOptionalParams): Promise<Models.GetCustomerByIdResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param callback The callback
   */
  getCustomerById(companyId: string, customerId: string, callback: msRest.ServiceCallback<Models.Customer>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerById(companyId: string, customerId: string, options: Models.Dynamics365BusinessCentralGetCustomerByIdOptionalParams, callback: msRest.ServiceCallback<Models.Customer>): void;
  getCustomerById(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetCustomerByIdOptionalParams | msRest.ServiceCallback<Models.Customer>, callback?: msRest.ServiceCallback<Models.Customer>): Promise<Models.GetCustomerByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        options
      },
      getCustomerByIdOperationSpec,
      callback) as Promise<Models.GetCustomerByIdResponse>;
  }

  /**
   * @summary Delete an customer in Dynamics 365 Business Central
   * @param companyId id for company
   * @param customerId id for customer
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCustomerById(companyId: string, customerId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param callback The callback
   */
  deleteCustomerById(companyId: string, customerId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomerById(companyId: string, customerId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCustomerById(companyId: string, customerId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        options
      },
      deleteCustomerByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified customer
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCustomerByIdResponse>
   */
  patchCustomerById(body: Models.BodyModelModelModel, companyId: string, customerId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchCustomerByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param callback The callback
   */
  patchCustomerById(body: Models.BodyModelModelModel, companyId: string, customerId: string, callback: msRest.ServiceCallback<Models.Customer>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCustomerById(body: Models.BodyModelModelModel, companyId: string, customerId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Customer>): void;
  patchCustomerById(body: Models.BodyModelModelModel, companyId: string, customerId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Customer>, callback?: msRest.ServiceCallback<Models.Customer>): Promise<Models.PatchCustomerByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerId,
        options
      },
      patchCustomerByIdOperationSpec,
      callback) as Promise<Models.PatchCustomerByIdResponse>;
  }

  /**
   * @summary Returns a list of customerFinancialDetails
   * @param companyId id for company
   * @param customerId id for customer
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerFinancialDetailsForCustomerResponse>
   */
  getCustomerFinancialDetailsForCustomer(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailsForCustomerOptionalParams): Promise<Models.GetCustomerFinancialDetailsForCustomerResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param callback The callback
   */
  getCustomerFinancialDetailsForCustomer(companyId: string, customerId: string, callback: msRest.ServiceCallback<Models.GetCustomerFinancialDetailsForCustomerOKResponse>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerFinancialDetailsForCustomer(companyId: string, customerId: string, options: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailsForCustomerOptionalParams, callback: msRest.ServiceCallback<Models.GetCustomerFinancialDetailsForCustomerOKResponse>): void;
  getCustomerFinancialDetailsForCustomer(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailsForCustomerOptionalParams | msRest.ServiceCallback<Models.GetCustomerFinancialDetailsForCustomerOKResponse>, callback?: msRest.ServiceCallback<Models.GetCustomerFinancialDetailsForCustomerOKResponse>): Promise<Models.GetCustomerFinancialDetailsForCustomerResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        options
      },
      getCustomerFinancialDetailsForCustomerOperationSpec,
      callback) as Promise<Models.GetCustomerFinancialDetailsForCustomerResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an customerFinancialDetail object for
   * Dynamics 365 Business Central.
   * @param companyId id for company
   * @param customerId id for customer
   * @param customerFinancialDetailId id for customerFinancialDetail
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerFinancialDetailForCustomerByIdResponse>
   */
  getCustomerFinancialDetailForCustomerById(companyId: string, customerId: string, customerFinancialDetailId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailForCustomerByIdOptionalParams): Promise<Models.GetCustomerFinancialDetailForCustomerByIdResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param customerFinancialDetailId id for customerFinancialDetail
   * @param callback The callback
   */
  getCustomerFinancialDetailForCustomerById(companyId: string, customerId: string, customerFinancialDetailId: string, callback: msRest.ServiceCallback<Models.CustomerFinancialDetail>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param customerFinancialDetailId id for customerFinancialDetail
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerFinancialDetailForCustomerById(companyId: string, customerId: string, customerFinancialDetailId: string, options: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailForCustomerByIdOptionalParams, callback: msRest.ServiceCallback<Models.CustomerFinancialDetail>): void;
  getCustomerFinancialDetailForCustomerById(companyId: string, customerId: string, customerFinancialDetailId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailForCustomerByIdOptionalParams | msRest.ServiceCallback<Models.CustomerFinancialDetail>, callback?: msRest.ServiceCallback<Models.CustomerFinancialDetail>): Promise<Models.GetCustomerFinancialDetailForCustomerByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        customerFinancialDetailId,
        options
      },
      getCustomerFinancialDetailForCustomerByIdOperationSpec,
      callback) as Promise<Models.GetCustomerFinancialDetailForCustomerByIdResponse>;
  }

  /**
   * @summary Returns a list of picture
   * @param companyId id for company
   * @param customerId id for customer
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForCustomerResponse>
   */
  getPictureForCustomer(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetPictureForCustomerOptionalParams): Promise<Models.GetPictureForCustomerResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param callback The callback
   */
  getPictureForCustomer(companyId: string, customerId: string, callback: msRest.ServiceCallback<Models.GetPictureForCustomerOKResponse>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForCustomer(companyId: string, customerId: string, options: Models.Dynamics365BusinessCentralGetPictureForCustomerOptionalParams, callback: msRest.ServiceCallback<Models.GetPictureForCustomerOKResponse>): void;
  getPictureForCustomer(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetPictureForCustomerOptionalParams | msRest.ServiceCallback<Models.GetPictureForCustomerOKResponse>, callback?: msRest.ServiceCallback<Models.GetPictureForCustomerOKResponse>): Promise<Models.GetPictureForCustomerResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        options
      },
      getPictureForCustomerOperationSpec,
      callback) as Promise<Models.GetPictureForCustomerResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForCustomerByIdResponse>
   */
  getPictureForCustomerById(companyId: string, customerId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForCustomerByIdOptionalParams): Promise<Models.GetPictureForCustomerByIdResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param callback The callback
   */
  getPictureForCustomerById(companyId: string, customerId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForCustomerById(companyId: string, customerId: string, pictureId: string, options: Models.Dynamics365BusinessCentralGetPictureForCustomerByIdOptionalParams, callback: msRest.ServiceCallback<Models.Picture>): void;
  getPictureForCustomerById(companyId: string, customerId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForCustomerByIdOptionalParams | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.GetPictureForCustomerByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        pictureId,
        options
      },
      getPictureForCustomerByIdOperationSpec,
      callback) as Promise<Models.GetPictureForCustomerByIdResponse>;
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePictureForCustomerByIdById(companyId: string, customerId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param callback The callback
   */
  deletePictureForCustomerByIdById(companyId: string, customerId: string, pictureId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePictureForCustomerByIdById(companyId: string, customerId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePictureForCustomerByIdById(companyId: string, customerId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        pictureId,
        options
      },
      deletePictureForCustomerByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified picture
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPictureForCustomerByIdByIdResponse>
   */
  patchPictureForCustomerByIdById(body: Models.BodyModel, companyId: string, customerId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPictureForCustomerByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param callback The callback
   */
  patchPictureForCustomerByIdById(body: Models.BodyModel, companyId: string, customerId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPictureForCustomerByIdById(body: Models.BodyModel, companyId: string, customerId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Picture>): void;
  patchPictureForCustomerByIdById(body: Models.BodyModel, companyId: string, customerId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.PatchPictureForCustomerByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerId,
        pictureId,
        options
      },
      patchPictureForCustomerByIdByIdOperationSpec,
      callback) as Promise<Models.PatchPictureForCustomerByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of defaultDimensions
   * @param companyId id for company
   * @param customerId id for customer
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForCustomerResponse>
   */
  getDefaultDimensionsForCustomer(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForCustomerOptionalParams): Promise<Models.GetDefaultDimensionsForCustomerResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param callback The callback
   */
  getDefaultDimensionsForCustomer(companyId: string, customerId: string, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForCustomerOKResponse>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForCustomer(companyId: string, customerId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForCustomerOptionalParams, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForCustomerOKResponse>): void;
  getDefaultDimensionsForCustomer(companyId: string, customerId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForCustomerOptionalParams | msRest.ServiceCallback<Models.GetDefaultDimensionsForCustomerOKResponse>, callback?: msRest.ServiceCallback<Models.GetDefaultDimensionsForCustomerOKResponse>): Promise<Models.GetDefaultDimensionsForCustomerResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        options
      },
      getDefaultDimensionsForCustomerOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForCustomerResponse>;
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param [options] The optional parameters
   * @returns Promise<Models.PostDefaultDimensionsForCustomerResponse>
   */
  postDefaultDimensionsForCustomer(body: Models.BodyModelModel, companyId: string, customerId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostDefaultDimensionsForCustomerResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param callback The callback
   */
  postDefaultDimensionsForCustomer(body: Models.BodyModelModel, companyId: string, customerId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param options The optional parameters
   * @param callback The callback
   */
  postDefaultDimensionsForCustomer(body: Models.BodyModelModel, companyId: string, customerId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  postDefaultDimensionsForCustomer(body: Models.BodyModelModel, companyId: string, customerId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PostDefaultDimensionsForCustomerResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerId,
        options
      },
      postDefaultDimensionsForCustomerOperationSpec,
      callback) as Promise<Models.PostDefaultDimensionsForCustomerResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForCustomerByDimensionIdByParentIdResponse>
   */
  getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForCustomerByDimensionIdByParentIdOptionalParams): Promise<Models.GetDefaultDimensionsForCustomerByDimensionIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForCustomerByDimensionIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  getDefaultDimensionsForCustomerByDimensionIdByParentId(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForCustomerByDimensionIdByParentIdOptionalParams | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.GetDefaultDimensionsForCustomerByDimensionIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      getDefaultDimensionsForCustomerByDimensionIdByParentIdOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForCustomerByDimensionIdByParentIdResponse>;
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDefaultDimensionsForCustomerByDimensionIdByParentIdById(companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      deleteDefaultDimensionsForCustomerByDimensionIdByParentIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchDefaultDimensionsForCustomerByDimensionIdByParentIdByIdResponse>
   */
  patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchDefaultDimensionsForCustomerByDimensionIdByParentIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerId id for customer
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  patchDefaultDimensionsForCustomerByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, customerId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PatchDefaultDimensionsForCustomerByDimensionIdByParentIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      patchDefaultDimensionsForCustomerByDimensionIdByParentIdByIdOperationSpec,
      callback) as Promise<Models.PatchDefaultDimensionsForCustomerByDimensionIdByParentIdByIdResponse>;
  }

  /**
   * @summary Returns a list of customerFinancialDetails
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerFinancialDetailsResponse>
   */
  getCustomerFinancialDetails(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailsOptionalParams): Promise<Models.GetCustomerFinancialDetailsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCustomerFinancialDetails(companyId: string, callback: msRest.ServiceCallback<Models.GetCustomerFinancialDetailsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerFinancialDetails(companyId: string, options: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailsOptionalParams, callback: msRest.ServiceCallback<Models.GetCustomerFinancialDetailsOKResponse>): void;
  getCustomerFinancialDetails(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailsOptionalParams | msRest.ServiceCallback<Models.GetCustomerFinancialDetailsOKResponse>, callback?: msRest.ServiceCallback<Models.GetCustomerFinancialDetailsOKResponse>): Promise<Models.GetCustomerFinancialDetailsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCustomerFinancialDetailsOperationSpec,
      callback) as Promise<Models.GetCustomerFinancialDetailsResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an customerFinancialDetail object for
   * Dynamics 365 Business Central.
   * @param companyId id for company
   * @param customerFinancialDetailId id for customerFinancialDetail
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerFinancialDetailByIdResponse>
   */
  getCustomerFinancialDetailById(companyId: string, customerFinancialDetailId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailByIdOptionalParams): Promise<Models.GetCustomerFinancialDetailByIdResponse>;
  /**
   * @param companyId id for company
   * @param customerFinancialDetailId id for customerFinancialDetail
   * @param callback The callback
   */
  getCustomerFinancialDetailById(companyId: string, customerFinancialDetailId: string, callback: msRest.ServiceCallback<Models.CustomerFinancialDetail>): void;
  /**
   * @param companyId id for company
   * @param customerFinancialDetailId id for customerFinancialDetail
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerFinancialDetailById(companyId: string, customerFinancialDetailId: string, options: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailByIdOptionalParams, callback: msRest.ServiceCallback<Models.CustomerFinancialDetail>): void;
  getCustomerFinancialDetailById(companyId: string, customerFinancialDetailId: string, options?: Models.Dynamics365BusinessCentralGetCustomerFinancialDetailByIdOptionalParams | msRest.ServiceCallback<Models.CustomerFinancialDetail>, callback?: msRest.ServiceCallback<Models.CustomerFinancialDetail>): Promise<Models.GetCustomerFinancialDetailByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerFinancialDetailId,
        options
      },
      getCustomerFinancialDetailByIdOperationSpec,
      callback) as Promise<Models.GetCustomerFinancialDetailByIdResponse>;
  }

  /**
   * @summary Returns a list of vendors
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVendorsResponse>
   */
  getVendors(companyId: string, options?: Models.Dynamics365BusinessCentralGetVendorsOptionalParams): Promise<Models.GetVendorsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getVendors(companyId: string, callback: msRest.ServiceCallback<Models.GetVendorsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getVendors(companyId: string, options: Models.Dynamics365BusinessCentralGetVendorsOptionalParams, callback: msRest.ServiceCallback<Models.GetVendorsOKResponse>): void;
  getVendors(companyId: string, options?: Models.Dynamics365BusinessCentralGetVendorsOptionalParams | msRest.ServiceCallback<Models.GetVendorsOKResponse>, callback?: msRest.ServiceCallback<Models.GetVendorsOKResponse>): Promise<Models.GetVendorsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getVendorsOperationSpec,
      callback) as Promise<Models.GetVendorsResponse>;
  }

  /**
   * @summary Creates a vendor in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostVendorResponse>
   */
  postVendor(body: Models.BodyModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostVendorResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postVendor(body: Models.BodyModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.Vendor>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postVendor(body: Models.BodyModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Vendor>): void;
  postVendor(body: Models.BodyModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Vendor>, callback?: msRest.ServiceCallback<Models.Vendor>): Promise<Models.PostVendorResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postVendorOperationSpec,
      callback) as Promise<Models.PostVendorResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an vendor object for Dynamics 365 Business
   * Central.
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVendorByIdResponse>
   */
  getVendorById(companyId: string, vendorId: string, options?: Models.Dynamics365BusinessCentralGetVendorByIdOptionalParams): Promise<Models.GetVendorByIdResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param callback The callback
   */
  getVendorById(companyId: string, vendorId: string, callback: msRest.ServiceCallback<Models.Vendor>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param options The optional parameters
   * @param callback The callback
   */
  getVendorById(companyId: string, vendorId: string, options: Models.Dynamics365BusinessCentralGetVendorByIdOptionalParams, callback: msRest.ServiceCallback<Models.Vendor>): void;
  getVendorById(companyId: string, vendorId: string, options?: Models.Dynamics365BusinessCentralGetVendorByIdOptionalParams | msRest.ServiceCallback<Models.Vendor>, callback?: msRest.ServiceCallback<Models.Vendor>): Promise<Models.GetVendorByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        options
      },
      getVendorByIdOperationSpec,
      callback) as Promise<Models.GetVendorByIdResponse>;
  }

  /**
   * @summary Delete an vendor in Dynamics 365 Business Central
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteVendorById(companyId: string, vendorId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param callback The callback
   */
  deleteVendorById(companyId: string, vendorId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteVendorById(companyId: string, vendorId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteVendorById(companyId: string, vendorId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        options
      },
      deleteVendorByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified vendor
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchVendorByIdResponse>
   */
  patchVendorById(body: Models.BodyModelModelModelModel, companyId: string, vendorId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchVendorByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param callback The callback
   */
  patchVendorById(body: Models.BodyModelModelModelModel, companyId: string, vendorId: string, callback: msRest.ServiceCallback<Models.Vendor>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param options The optional parameters
   * @param callback The callback
   */
  patchVendorById(body: Models.BodyModelModelModelModel, companyId: string, vendorId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Vendor>): void;
  patchVendorById(body: Models.BodyModelModelModelModel, companyId: string, vendorId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Vendor>, callback?: msRest.ServiceCallback<Models.Vendor>): Promise<Models.PatchVendorByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        vendorId,
        options
      },
      patchVendorByIdOperationSpec,
      callback) as Promise<Models.PatchVendorByIdResponse>;
  }

  /**
   * @summary Returns a list of picture
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForVendorResponse>
   */
  getPictureForVendor(companyId: string, vendorId: string, options?: Models.Dynamics365BusinessCentralGetPictureForVendorOptionalParams): Promise<Models.GetPictureForVendorResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param callback The callback
   */
  getPictureForVendor(companyId: string, vendorId: string, callback: msRest.ServiceCallback<Models.GetPictureForVendorOKResponse>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForVendor(companyId: string, vendorId: string, options: Models.Dynamics365BusinessCentralGetPictureForVendorOptionalParams, callback: msRest.ServiceCallback<Models.GetPictureForVendorOKResponse>): void;
  getPictureForVendor(companyId: string, vendorId: string, options?: Models.Dynamics365BusinessCentralGetPictureForVendorOptionalParams | msRest.ServiceCallback<Models.GetPictureForVendorOKResponse>, callback?: msRest.ServiceCallback<Models.GetPictureForVendorOKResponse>): Promise<Models.GetPictureForVendorResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        options
      },
      getPictureForVendorOperationSpec,
      callback) as Promise<Models.GetPictureForVendorResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForVendorByIdResponse>
   */
  getPictureForVendorById(companyId: string, vendorId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForVendorByIdOptionalParams): Promise<Models.GetPictureForVendorByIdResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param callback The callback
   */
  getPictureForVendorById(companyId: string, vendorId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForVendorById(companyId: string, vendorId: string, pictureId: string, options: Models.Dynamics365BusinessCentralGetPictureForVendorByIdOptionalParams, callback: msRest.ServiceCallback<Models.Picture>): void;
  getPictureForVendorById(companyId: string, vendorId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForVendorByIdOptionalParams | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.GetPictureForVendorByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        pictureId,
        options
      },
      getPictureForVendorByIdOperationSpec,
      callback) as Promise<Models.GetPictureForVendorByIdResponse>;
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePictureForVendorByIdById(companyId: string, vendorId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param callback The callback
   */
  deletePictureForVendorByIdById(companyId: string, vendorId: string, pictureId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePictureForVendorByIdById(companyId: string, vendorId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePictureForVendorByIdById(companyId: string, vendorId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        pictureId,
        options
      },
      deletePictureForVendorByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified picture
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPictureForVendorByIdByIdResponse>
   */
  patchPictureForVendorByIdById(body: Models.BodyModel, companyId: string, vendorId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPictureForVendorByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param callback The callback
   */
  patchPictureForVendorByIdById(body: Models.BodyModel, companyId: string, vendorId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPictureForVendorByIdById(body: Models.BodyModel, companyId: string, vendorId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Picture>): void;
  patchPictureForVendorByIdById(body: Models.BodyModel, companyId: string, vendorId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.PatchPictureForVendorByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        vendorId,
        pictureId,
        options
      },
      patchPictureForVendorByIdByIdOperationSpec,
      callback) as Promise<Models.PatchPictureForVendorByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of defaultDimensions
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForVendorResponse>
   */
  getDefaultDimensionsForVendor(companyId: string, vendorId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForVendorOptionalParams): Promise<Models.GetDefaultDimensionsForVendorResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param callback The callback
   */
  getDefaultDimensionsForVendor(companyId: string, vendorId: string, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForVendorOKResponse>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForVendor(companyId: string, vendorId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForVendorOptionalParams, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForVendorOKResponse>): void;
  getDefaultDimensionsForVendor(companyId: string, vendorId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForVendorOptionalParams | msRest.ServiceCallback<Models.GetDefaultDimensionsForVendorOKResponse>, callback?: msRest.ServiceCallback<Models.GetDefaultDimensionsForVendorOKResponse>): Promise<Models.GetDefaultDimensionsForVendorResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        options
      },
      getDefaultDimensionsForVendorOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForVendorResponse>;
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param [options] The optional parameters
   * @returns Promise<Models.PostDefaultDimensionsForVendorResponse>
   */
  postDefaultDimensionsForVendor(body: Models.BodyModelModel, companyId: string, vendorId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostDefaultDimensionsForVendorResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param callback The callback
   */
  postDefaultDimensionsForVendor(body: Models.BodyModelModel, companyId: string, vendorId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param options The optional parameters
   * @param callback The callback
   */
  postDefaultDimensionsForVendor(body: Models.BodyModelModel, companyId: string, vendorId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  postDefaultDimensionsForVendor(body: Models.BodyModelModel, companyId: string, vendorId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PostDefaultDimensionsForVendorResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        vendorId,
        options
      },
      postDefaultDimensionsForVendorOperationSpec,
      callback) as Promise<Models.PostDefaultDimensionsForVendorResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForVendorByDimensionIdByParentIdResponse>
   */
  getDefaultDimensionsForVendorByDimensionIdByParentId(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForVendorByDimensionIdByParentIdOptionalParams): Promise<Models.GetDefaultDimensionsForVendorByDimensionIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  getDefaultDimensionsForVendorByDimensionIdByParentId(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForVendorByDimensionIdByParentId(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForVendorByDimensionIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  getDefaultDimensionsForVendorByDimensionIdByParentId(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForVendorByDimensionIdByParentIdOptionalParams | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.GetDefaultDimensionsForVendorByDimensionIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      getDefaultDimensionsForVendorByDimensionIdByParentIdOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForVendorByDimensionIdByParentIdResponse>;
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDefaultDimensionsForVendorByDimensionIdByParentIdById(companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      deleteDefaultDimensionsForVendorByDimensionIdByParentIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchDefaultDimensionsForVendorByDimensionIdByParentIdByIdResponse>
   */
  patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchDefaultDimensionsForVendorByDimensionIdByParentIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param vendorId id for vendor
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  patchDefaultDimensionsForVendorByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, vendorId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PatchDefaultDimensionsForVendorByDimensionIdByParentIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        vendorId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      patchDefaultDimensionsForVendorByDimensionIdByParentIdByIdOperationSpec,
      callback) as Promise<Models.PatchDefaultDimensionsForVendorByDimensionIdByParentIdByIdResponse>;
  }

  /**
   * @summary Returns a list of companyInformation
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCompanyInformationResponse>
   */
  getCompanyInformation(companyId: string, options?: Models.Dynamics365BusinessCentralGetCompanyInformationOptionalParams): Promise<Models.GetCompanyInformationResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCompanyInformation(companyId: string, callback: msRest.ServiceCallback<Models.GetCompanyInformationOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCompanyInformation(companyId: string, options: Models.Dynamics365BusinessCentralGetCompanyInformationOptionalParams, callback: msRest.ServiceCallback<Models.GetCompanyInformationOKResponse>): void;
  getCompanyInformation(companyId: string, options?: Models.Dynamics365BusinessCentralGetCompanyInformationOptionalParams | msRest.ServiceCallback<Models.GetCompanyInformationOKResponse>, callback?: msRest.ServiceCallback<Models.GetCompanyInformationOKResponse>): Promise<Models.GetCompanyInformationResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCompanyInformationOperationSpec,
      callback) as Promise<Models.GetCompanyInformationResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an companyInformation object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param companyInformationId id for companyInformation
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCompanyInformationByIdResponse>
   */
  getCompanyInformationById(companyId: string, companyInformationId: string, options?: Models.Dynamics365BusinessCentralGetCompanyInformationByIdOptionalParams): Promise<Models.GetCompanyInformationByIdResponse>;
  /**
   * @param companyId id for company
   * @param companyInformationId id for companyInformation
   * @param callback The callback
   */
  getCompanyInformationById(companyId: string, companyInformationId: string, callback: msRest.ServiceCallback<Models.CompanyInformation>): void;
  /**
   * @param companyId id for company
   * @param companyInformationId id for companyInformation
   * @param options The optional parameters
   * @param callback The callback
   */
  getCompanyInformationById(companyId: string, companyInformationId: string, options: Models.Dynamics365BusinessCentralGetCompanyInformationByIdOptionalParams, callback: msRest.ServiceCallback<Models.CompanyInformation>): void;
  getCompanyInformationById(companyId: string, companyInformationId: string, options?: Models.Dynamics365BusinessCentralGetCompanyInformationByIdOptionalParams | msRest.ServiceCallback<Models.CompanyInformation>, callback?: msRest.ServiceCallback<Models.CompanyInformation>): Promise<Models.GetCompanyInformationByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        companyInformationId,
        options
      },
      getCompanyInformationByIdOperationSpec,
      callback) as Promise<Models.GetCompanyInformationByIdResponse>;
  }

  /**
   * @summary Lets the user patch the specified companyInformation
   * @param body
   * @param companyId id for company
   * @param companyInformationId id for companyInformation
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCompanyInformationByIdResponse>
   */
  patchCompanyInformationById(body: Models.BodyModelModelModelModelModel, companyId: string, companyInformationId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchCompanyInformationByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param companyInformationId id for companyInformation
   * @param callback The callback
   */
  patchCompanyInformationById(body: Models.BodyModelModelModelModelModel, companyId: string, companyInformationId: string, callback: msRest.ServiceCallback<Models.CompanyInformation>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param companyInformationId id for companyInformation
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCompanyInformationById(body: Models.BodyModelModelModelModelModel, companyId: string, companyInformationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CompanyInformation>): void;
  patchCompanyInformationById(body: Models.BodyModelModelModelModelModel, companyId: string, companyInformationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CompanyInformation>, callback?: msRest.ServiceCallback<Models.CompanyInformation>): Promise<Models.PatchCompanyInformationByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        companyInformationId,
        options
      },
      patchCompanyInformationByIdOperationSpec,
      callback) as Promise<Models.PatchCompanyInformationByIdResponse>;
  }

  /**
   * @summary Returns a list of salesInvoices
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesInvoicesResponse>
   */
  getSalesInvoices(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoicesOptionalParams): Promise<Models.GetSalesInvoicesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesInvoices(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesInvoicesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesInvoices(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesInvoicesOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesInvoicesOKResponse>): void;
  getSalesInvoices(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoicesOptionalParams | msRest.ServiceCallback<Models.GetSalesInvoicesOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesInvoicesOKResponse>): Promise<Models.GetSalesInvoicesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesInvoicesOperationSpec,
      callback) as Promise<Models.GetSalesInvoicesResponse>;
  }

  /**
   * @summary Creates a salesInvoice in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesInvoiceResponse>
   */
  postSalesInvoice(body: Models.BodyModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesInvoiceResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesInvoice(body: Models.BodyModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesInvoice>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesInvoice(body: Models.BodyModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesInvoice>): void;
  postSalesInvoice(body: Models.BodyModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesInvoice>, callback?: msRest.ServiceCallback<Models.SalesInvoice>): Promise<Models.PostSalesInvoiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesInvoiceOperationSpec,
      callback) as Promise<Models.PostSalesInvoiceResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoice object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesInvoiceByIdResponse>
   */
  getSalesInvoiceById(companyId: string, salesInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceByIdOptionalParams): Promise<Models.GetSalesInvoiceByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  getSalesInvoiceById(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<Models.SalesInvoice>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesInvoiceById(companyId: string, salesInvoiceId: string, options: Models.Dynamics365BusinessCentralGetSalesInvoiceByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesInvoice>): void;
  getSalesInvoiceById(companyId: string, salesInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceByIdOptionalParams | msRest.ServiceCallback<Models.SalesInvoice>, callback?: msRest.ServiceCallback<Models.SalesInvoice>): Promise<Models.GetSalesInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      getSalesInvoiceByIdOperationSpec,
      callback) as Promise<Models.GetSalesInvoiceByIdResponse>;
  }

  /**
   * @summary Delete an salesInvoice in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesInvoiceById(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  deleteSalesInvoiceById(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesInvoiceById(companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesInvoiceById(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      deleteSalesInvoiceByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesInvoice
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesInvoiceByIdResponse>
   */
  patchSalesInvoiceById(body: Models.BodyModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesInvoiceByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  patchSalesInvoiceById(body: Models.BodyModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<Models.SalesInvoice>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesInvoiceById(body: Models.BodyModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesInvoice>): void;
  patchSalesInvoiceById(body: Models.BodyModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesInvoice>, callback?: msRest.ServiceCallback<Models.SalesInvoice>): Promise<Models.PatchSalesInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesInvoiceId,
        options
      },
      patchSalesInvoiceByIdOperationSpec,
      callback) as Promise<Models.PatchSalesInvoiceByIdResponse>;
  }

  /**
   * @summary Performs the cancelAndSend action for salesInvoices entity
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  cancelAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancelAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      cancelAndSendActionSalesInvoicesOperationSpec,
      callback);
  }

  /**
   * @summary Performs the cancel action for salesInvoices entity
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  cancelActionSalesInvoices(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelActionSalesInvoices(companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancelActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      cancelActionSalesInvoicesOperationSpec,
      callback);
  }

  /**
   * @summary Performs the postAndSend action for salesInvoices entity
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  postAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  postAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postAndSendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      postAndSendActionSalesInvoicesOperationSpec,
      callback);
  }

  /**
   * @summary Performs the post action for salesInvoices entity
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  postActionSalesInvoices(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  postActionSalesInvoices(companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      postActionSalesInvoicesOperationSpec,
      callback);
  }

  /**
   * @summary Performs the send action for salesInvoices entity
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  sendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  sendActionSalesInvoices(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  sendActionSalesInvoices(companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  sendActionSalesInvoices(companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      sendActionSalesInvoicesOperationSpec,
      callback);
  }

  /**
   * @summary Returns a list of salesInvoiceLines
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesInvoiceLinesForSalesInvoiceResponse>
   */
  getSalesInvoiceLinesForSalesInvoice(companyId: string, salesInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLinesForSalesInvoiceOptionalParams): Promise<Models.GetSalesInvoiceLinesForSalesInvoiceResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  getSalesInvoiceLinesForSalesInvoice(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<Models.GetSalesInvoiceLinesForSalesInvoiceOKResponse>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesInvoiceLinesForSalesInvoice(companyId: string, salesInvoiceId: string, options: Models.Dynamics365BusinessCentralGetSalesInvoiceLinesForSalesInvoiceOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesInvoiceLinesForSalesInvoiceOKResponse>): void;
  getSalesInvoiceLinesForSalesInvoice(companyId: string, salesInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLinesForSalesInvoiceOptionalParams | msRest.ServiceCallback<Models.GetSalesInvoiceLinesForSalesInvoiceOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesInvoiceLinesForSalesInvoiceOKResponse>): Promise<Models.GetSalesInvoiceLinesForSalesInvoiceResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      getSalesInvoiceLinesForSalesInvoiceOperationSpec,
      callback) as Promise<Models.GetSalesInvoiceLinesForSalesInvoiceResponse>;
  }

  /**
   * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesInvoiceLineForSalesInvoiceResponse>
   */
  postSalesInvoiceLineForSalesInvoice(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesInvoiceLineForSalesInvoiceResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  postSalesInvoiceLineForSalesInvoice(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesInvoiceLineForSalesInvoice(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  postSalesInvoiceLineForSalesInvoice(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesInvoiceLine>, callback?: msRest.ServiceCallback<Models.SalesInvoiceLine>): Promise<Models.PostSalesInvoiceLineForSalesInvoiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesInvoiceId,
        options
      },
      postSalesInvoiceLineForSalesInvoiceOperationSpec,
      callback) as Promise<Models.PostSalesInvoiceLineForSalesInvoiceResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoiceLine object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesInvoiceLineForSalesInvoiceByIdResponse>
   */
  getSalesInvoiceLineForSalesInvoiceById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLineForSalesInvoiceByIdOptionalParams): Promise<Models.GetSalesInvoiceLineForSalesInvoiceByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param callback The callback
   */
  getSalesInvoiceLineForSalesInvoiceById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesInvoiceLineForSalesInvoiceById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options: Models.Dynamics365BusinessCentralGetSalesInvoiceLineForSalesInvoiceByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  getSalesInvoiceLineForSalesInvoiceById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLineForSalesInvoiceByIdOptionalParams | msRest.ServiceCallback<Models.SalesInvoiceLine>, callback?: msRest.ServiceCallback<Models.SalesInvoiceLine>): Promise<Models.GetSalesInvoiceLineForSalesInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        salesInvoiceLineId,
        options
      },
      getSalesInvoiceLineForSalesInvoiceByIdOperationSpec,
      callback) as Promise<Models.GetSalesInvoiceLineForSalesInvoiceByIdResponse>;
  }

  /**
   * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param callback The callback
   */
  deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesInvoiceLineForSalesInvoiceByIdById(companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        salesInvoiceLineId,
        options
      },
      deleteSalesInvoiceLineForSalesInvoiceByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesInvoiceLine
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesInvoiceLineForSalesInvoiceByIdByIdResponse>
   */
  patchSalesInvoiceLineForSalesInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesInvoiceLineForSalesInvoiceByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param callback The callback
   */
  patchSalesInvoiceLineForSalesInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesInvoiceLineForSalesInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  patchSalesInvoiceLineForSalesInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesInvoiceLine>, callback?: msRest.ServiceCallback<Models.SalesInvoiceLine>): Promise<Models.PatchSalesInvoiceLineForSalesInvoiceByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesInvoiceId,
        salesInvoiceLineId,
        options
      },
      patchSalesInvoiceLineForSalesInvoiceByIdByIdOperationSpec,
      callback) as Promise<Models.PatchSalesInvoiceLineForSalesInvoiceByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of pdfDocument
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForSalesInvoiceResponse>
   */
  getPdfDocumentForSalesInvoice(companyId: string, salesInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesInvoiceOptionalParams): Promise<Models.GetPdfDocumentForSalesInvoiceResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param callback The callback
   */
  getPdfDocumentForSalesInvoice(companyId: string, salesInvoiceId: string, callback: msRest.ServiceCallback<Models.GetPdfDocumentForSalesInvoiceOKResponse>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForSalesInvoice(companyId: string, salesInvoiceId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesInvoiceOptionalParams, callback: msRest.ServiceCallback<Models.GetPdfDocumentForSalesInvoiceOKResponse>): void;
  getPdfDocumentForSalesInvoice(companyId: string, salesInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesInvoiceOptionalParams | msRest.ServiceCallback<Models.GetPdfDocumentForSalesInvoiceOKResponse>, callback?: msRest.ServiceCallback<Models.GetPdfDocumentForSalesInvoiceOKResponse>): Promise<Models.GetPdfDocumentForSalesInvoiceResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        options
      },
      getPdfDocumentForSalesInvoiceOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForSalesInvoiceResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param pdfDocumentId id for pdfDocument
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForSalesInvoiceByIdResponse>
   */
  getPdfDocumentForSalesInvoiceById(companyId: string, salesInvoiceId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesInvoiceByIdOptionalParams): Promise<Models.GetPdfDocumentForSalesInvoiceByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param pdfDocumentId id for pdfDocument
   * @param callback The callback
   */
  getPdfDocumentForSalesInvoiceById(companyId: string, salesInvoiceId: string, pdfDocumentId: string, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceId id for salesInvoice
   * @param pdfDocumentId id for pdfDocument
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForSalesInvoiceById(companyId: string, salesInvoiceId: string, pdfDocumentId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesInvoiceByIdOptionalParams, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  getPdfDocumentForSalesInvoiceById(companyId: string, salesInvoiceId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesInvoiceByIdOptionalParams | msRest.ServiceCallback<Models.PdfDocument>, callback?: msRest.ServiceCallback<Models.PdfDocument>): Promise<Models.GetPdfDocumentForSalesInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceId,
        pdfDocumentId,
        options
      },
      getPdfDocumentForSalesInvoiceByIdOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForSalesInvoiceByIdResponse>;
  }

  /**
   * @summary Returns a list of salesInvoiceLines
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesInvoiceLinesResponse>
   */
  getSalesInvoiceLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLinesOptionalParams): Promise<Models.GetSalesInvoiceLinesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesInvoiceLines(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesInvoiceLinesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesInvoiceLines(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesInvoiceLinesOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesInvoiceLinesOKResponse>): void;
  getSalesInvoiceLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLinesOptionalParams | msRest.ServiceCallback<Models.GetSalesInvoiceLinesOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesInvoiceLinesOKResponse>): Promise<Models.GetSalesInvoiceLinesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesInvoiceLinesOperationSpec,
      callback) as Promise<Models.GetSalesInvoiceLinesResponse>;
  }

  /**
   * @summary Creates a salesInvoiceLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesInvoiceLineResponse>
   */
  postSalesInvoiceLine(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesInvoiceLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesInvoiceLine(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesInvoiceLine(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  postSalesInvoiceLine(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesInvoiceLine>, callback?: msRest.ServiceCallback<Models.SalesInvoiceLine>): Promise<Models.PostSalesInvoiceLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesInvoiceLineOperationSpec,
      callback) as Promise<Models.PostSalesInvoiceLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesInvoiceLine object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesInvoiceLineByIdResponse>
   */
  getSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLineByIdOptionalParams): Promise<Models.GetSalesInvoiceLineByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param callback The callback
   */
  getSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, options: Models.Dynamics365BusinessCentralGetSalesInvoiceLineByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  getSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesInvoiceLineByIdOptionalParams | msRest.ServiceCallback<Models.SalesInvoiceLine>, callback?: msRest.ServiceCallback<Models.SalesInvoiceLine>): Promise<Models.GetSalesInvoiceLineByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceLineId,
        options
      },
      getSalesInvoiceLineByIdOperationSpec,
      callback) as Promise<Models.GetSalesInvoiceLineByIdResponse>;
  }

  /**
   * @summary Delete an salesInvoiceLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param callback The callback
   */
  deleteSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesInvoiceLineById(companyId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesInvoiceLineId,
        options
      },
      deleteSalesInvoiceLineByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesInvoiceLine
   * @param body
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesInvoiceLineByIdResponse>
   */
  patchSalesInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesInvoiceLineByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param callback The callback
   */
  patchSalesInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceLineId: string, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesInvoiceLineId id for salesInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesInvoiceLine>): void;
  patchSalesInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModel, companyId: string, salesInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesInvoiceLine>, callback?: msRest.ServiceCallback<Models.SalesInvoiceLine>): Promise<Models.PatchSalesInvoiceLineByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesInvoiceLineId,
        options
      },
      patchSalesInvoiceLineByIdOperationSpec,
      callback) as Promise<Models.PatchSalesInvoiceLineByIdResponse>;
  }

  /**
   * @summary Returns a list of pdfDocument
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentResponse>
   */
  getPdfDocument(companyId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentOptionalParams): Promise<Models.GetPdfDocumentResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getPdfDocument(companyId: string, callback: msRest.ServiceCallback<Models.GetPdfDocumentOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocument(companyId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentOptionalParams, callback: msRest.ServiceCallback<Models.GetPdfDocumentOKResponse>): void;
  getPdfDocument(companyId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentOptionalParams | msRest.ServiceCallback<Models.GetPdfDocumentOKResponse>, callback?: msRest.ServiceCallback<Models.GetPdfDocumentOKResponse>): Promise<Models.GetPdfDocumentResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getPdfDocumentOperationSpec,
      callback) as Promise<Models.GetPdfDocumentResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param pdfDocumentId id for pdfDocument
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentByIdResponse>
   */
  getPdfDocumentById(companyId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentByIdOptionalParams): Promise<Models.GetPdfDocumentByIdResponse>;
  /**
   * @param companyId id for company
   * @param pdfDocumentId id for pdfDocument
   * @param callback The callback
   */
  getPdfDocumentById(companyId: string, pdfDocumentId: string, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  /**
   * @param companyId id for company
   * @param pdfDocumentId id for pdfDocument
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentById(companyId: string, pdfDocumentId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentByIdOptionalParams, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  getPdfDocumentById(companyId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentByIdOptionalParams | msRest.ServiceCallback<Models.PdfDocument>, callback?: msRest.ServiceCallback<Models.PdfDocument>): Promise<Models.GetPdfDocumentByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        pdfDocumentId,
        options
      },
      getPdfDocumentByIdOperationSpec,
      callback) as Promise<Models.GetPdfDocumentByIdResponse>;
  }

  /**
   * @summary Returns a list of customerPaymentJournals
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerPaymentJournalsResponse>
   */
  getCustomerPaymentJournals(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentJournalsOptionalParams): Promise<Models.GetCustomerPaymentJournalsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCustomerPaymentJournals(companyId: string, callback: msRest.ServiceCallback<Models.GetCustomerPaymentJournalsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerPaymentJournals(companyId: string, options: Models.Dynamics365BusinessCentralGetCustomerPaymentJournalsOptionalParams, callback: msRest.ServiceCallback<Models.GetCustomerPaymentJournalsOKResponse>): void;
  getCustomerPaymentJournals(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentJournalsOptionalParams | msRest.ServiceCallback<Models.GetCustomerPaymentJournalsOKResponse>, callback?: msRest.ServiceCallback<Models.GetCustomerPaymentJournalsOKResponse>): Promise<Models.GetCustomerPaymentJournalsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCustomerPaymentJournalsOperationSpec,
      callback) as Promise<Models.GetCustomerPaymentJournalsResponse>;
  }

  /**
   * @summary Creates a customerPaymentJournal in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostCustomerPaymentJournalResponse>
   */
  postCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostCustomerPaymentJournalResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.CustomerPaymentJournal>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomerPaymentJournal>): void;
  postCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomerPaymentJournal>, callback?: msRest.ServiceCallback<Models.CustomerPaymentJournal>): Promise<Models.PostCustomerPaymentJournalResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postCustomerPaymentJournalOperationSpec,
      callback) as Promise<Models.PostCustomerPaymentJournalResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an customerPaymentJournal object for
   * Dynamics 365 Business Central.
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerPaymentJournalByIdResponse>
   */
  getCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentJournalByIdOptionalParams): Promise<Models.GetCustomerPaymentJournalByIdResponse>;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param callback The callback
   */
  getCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, callback: msRest.ServiceCallback<Models.CustomerPaymentJournal>): void;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, options: Models.Dynamics365BusinessCentralGetCustomerPaymentJournalByIdOptionalParams, callback: msRest.ServiceCallback<Models.CustomerPaymentJournal>): void;
  getCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentJournalByIdOptionalParams | msRest.ServiceCallback<Models.CustomerPaymentJournal>, callback?: msRest.ServiceCallback<Models.CustomerPaymentJournal>): Promise<Models.GetCustomerPaymentJournalByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerPaymentJournalId,
        options
      },
      getCustomerPaymentJournalByIdOperationSpec,
      callback) as Promise<Models.GetCustomerPaymentJournalByIdResponse>;
  }

  /**
   * @summary Delete an customerPaymentJournal in Dynamics 365 Business Central
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param callback The callback
   */
  deleteCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerPaymentJournalId,
        options
      },
      deleteCustomerPaymentJournalByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified customerPaymentJournal
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCustomerPaymentJournalByIdResponse>
   */
  patchCustomerPaymentJournalById(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchCustomerPaymentJournalByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param callback The callback
   */
  patchCustomerPaymentJournalById(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, callback: msRest.ServiceCallback<Models.CustomerPaymentJournal>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCustomerPaymentJournalById(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomerPaymentJournal>): void;
  patchCustomerPaymentJournalById(body: Models.BodyModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomerPaymentJournal>, callback?: msRest.ServiceCallback<Models.CustomerPaymentJournal>): Promise<Models.PatchCustomerPaymentJournalByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerPaymentJournalId,
        options
      },
      patchCustomerPaymentJournalByIdOperationSpec,
      callback) as Promise<Models.PatchCustomerPaymentJournalByIdResponse>;
  }

  /**
   * @summary Returns a list of customerPayments
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerPaymentsForCustomerPaymentJournalResponse>
   */
  getCustomerPaymentsForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentsForCustomerPaymentJournalOptionalParams): Promise<Models.GetCustomerPaymentsForCustomerPaymentJournalResponse>;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param callback The callback
   */
  getCustomerPaymentsForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, callback: msRest.ServiceCallback<Models.GetCustomerPaymentsForCustomerPaymentJournalOKResponse>): void;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerPaymentsForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, options: Models.Dynamics365BusinessCentralGetCustomerPaymentsForCustomerPaymentJournalOptionalParams, callback: msRest.ServiceCallback<Models.GetCustomerPaymentsForCustomerPaymentJournalOKResponse>): void;
  getCustomerPaymentsForCustomerPaymentJournal(companyId: string, customerPaymentJournalId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentsForCustomerPaymentJournalOptionalParams | msRest.ServiceCallback<Models.GetCustomerPaymentsForCustomerPaymentJournalOKResponse>, callback?: msRest.ServiceCallback<Models.GetCustomerPaymentsForCustomerPaymentJournalOKResponse>): Promise<Models.GetCustomerPaymentsForCustomerPaymentJournalResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerPaymentJournalId,
        options
      },
      getCustomerPaymentsForCustomerPaymentJournalOperationSpec,
      callback) as Promise<Models.GetCustomerPaymentsForCustomerPaymentJournalResponse>;
  }

  /**
   * @summary Creates a customerPayment in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param [options] The optional parameters
   * @returns Promise<Models.PostCustomerPaymentForCustomerPaymentJournalResponse>
   */
  postCustomerPaymentForCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostCustomerPaymentForCustomerPaymentJournalResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param callback The callback
   */
  postCustomerPaymentForCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param options The optional parameters
   * @param callback The callback
   */
  postCustomerPaymentForCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  postCustomerPaymentForCustomerPaymentJournal(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomerPayment>, callback?: msRest.ServiceCallback<Models.CustomerPayment>): Promise<Models.PostCustomerPaymentForCustomerPaymentJournalResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerPaymentJournalId,
        options
      },
      postCustomerPaymentForCustomerPaymentJournalOperationSpec,
      callback) as Promise<Models.PostCustomerPaymentForCustomerPaymentJournalResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an customerPayment object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerPaymentForCustomerPaymentJournalByIdResponse>
   */
  getCustomerPaymentForCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentForCustomerPaymentJournalByIdOptionalParams): Promise<Models.GetCustomerPaymentForCustomerPaymentJournalByIdResponse>;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param callback The callback
   */
  getCustomerPaymentForCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerPaymentForCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options: Models.Dynamics365BusinessCentralGetCustomerPaymentForCustomerPaymentJournalByIdOptionalParams, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  getCustomerPaymentForCustomerPaymentJournalById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentForCustomerPaymentJournalByIdOptionalParams | msRest.ServiceCallback<Models.CustomerPayment>, callback?: msRest.ServiceCallback<Models.CustomerPayment>): Promise<Models.GetCustomerPaymentForCustomerPaymentJournalByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerPaymentJournalId,
        customerPaymentId,
        options
      },
      getCustomerPaymentForCustomerPaymentJournalByIdOperationSpec,
      callback) as Promise<Models.GetCustomerPaymentForCustomerPaymentJournalByIdResponse>;
  }

  /**
   * @summary Delete an customerPayment in Dynamics 365 Business Central
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param callback The callback
   */
  deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCustomerPaymentForCustomerPaymentJournalByIdById(companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerPaymentJournalId,
        customerPaymentId,
        options
      },
      deleteCustomerPaymentForCustomerPaymentJournalByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified customerPayment
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCustomerPaymentForCustomerPaymentJournalByIdByIdResponse>
   */
  patchCustomerPaymentForCustomerPaymentJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchCustomerPaymentForCustomerPaymentJournalByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param callback The callback
   */
  patchCustomerPaymentForCustomerPaymentJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, customerPaymentId: string, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentJournalId id for customerPaymentJournal
   * @param customerPaymentId id for customerPayment
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCustomerPaymentForCustomerPaymentJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  patchCustomerPaymentForCustomerPaymentJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentJournalId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomerPayment>, callback?: msRest.ServiceCallback<Models.CustomerPayment>): Promise<Models.PatchCustomerPaymentForCustomerPaymentJournalByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerPaymentJournalId,
        customerPaymentId,
        options
      },
      patchCustomerPaymentForCustomerPaymentJournalByIdByIdOperationSpec,
      callback) as Promise<Models.PatchCustomerPaymentForCustomerPaymentJournalByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of customerPayments
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerPaymentsResponse>
   */
  getCustomerPayments(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentsOptionalParams): Promise<Models.GetCustomerPaymentsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCustomerPayments(companyId: string, callback: msRest.ServiceCallback<Models.GetCustomerPaymentsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerPayments(companyId: string, options: Models.Dynamics365BusinessCentralGetCustomerPaymentsOptionalParams, callback: msRest.ServiceCallback<Models.GetCustomerPaymentsOKResponse>): void;
  getCustomerPayments(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentsOptionalParams | msRest.ServiceCallback<Models.GetCustomerPaymentsOKResponse>, callback?: msRest.ServiceCallback<Models.GetCustomerPaymentsOKResponse>): Promise<Models.GetCustomerPaymentsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCustomerPaymentsOperationSpec,
      callback) as Promise<Models.GetCustomerPaymentsResponse>;
  }

  /**
   * @summary Creates a customerPayment in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostCustomerPaymentResponse>
   */
  postCustomerPayment(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostCustomerPaymentResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postCustomerPayment(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postCustomerPayment(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  postCustomerPayment(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomerPayment>, callback?: msRest.ServiceCallback<Models.CustomerPayment>): Promise<Models.PostCustomerPaymentResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postCustomerPaymentOperationSpec,
      callback) as Promise<Models.PostCustomerPaymentResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an customerPayment object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerPaymentByIdResponse>
   */
  getCustomerPaymentById(companyId: string, customerPaymentId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentByIdOptionalParams): Promise<Models.GetCustomerPaymentByIdResponse>;
  /**
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param callback The callback
   */
  getCustomerPaymentById(companyId: string, customerPaymentId: string, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  /**
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerPaymentById(companyId: string, customerPaymentId: string, options: Models.Dynamics365BusinessCentralGetCustomerPaymentByIdOptionalParams, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  getCustomerPaymentById(companyId: string, customerPaymentId: string, options?: Models.Dynamics365BusinessCentralGetCustomerPaymentByIdOptionalParams | msRest.ServiceCallback<Models.CustomerPayment>, callback?: msRest.ServiceCallback<Models.CustomerPayment>): Promise<Models.GetCustomerPaymentByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerPaymentId,
        options
      },
      getCustomerPaymentByIdOperationSpec,
      callback) as Promise<Models.GetCustomerPaymentByIdResponse>;
  }

  /**
   * @summary Delete an customerPayment in Dynamics 365 Business Central
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCustomerPaymentById(companyId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param callback The callback
   */
  deleteCustomerPaymentById(companyId: string, customerPaymentId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomerPaymentById(companyId: string, customerPaymentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCustomerPaymentById(companyId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerPaymentId,
        options
      },
      deleteCustomerPaymentByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified customerPayment
   * @param body
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCustomerPaymentByIdResponse>
   */
  patchCustomerPaymentById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchCustomerPaymentByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param callback The callback
   */
  patchCustomerPaymentById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentId: string, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param customerPaymentId id for customerPayment
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCustomerPaymentById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomerPayment>): void;
  patchCustomerPaymentById(body: Models.BodyModelModelModelModelModelModelModelModelModel, companyId: string, customerPaymentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomerPayment>, callback?: msRest.ServiceCallback<Models.CustomerPayment>): Promise<Models.PatchCustomerPaymentByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        customerPaymentId,
        options
      },
      patchCustomerPaymentByIdOperationSpec,
      callback) as Promise<Models.PatchCustomerPaymentByIdResponse>;
  }

  /**
   * @summary Returns a list of accounts
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAccountsResponse>
   */
  getAccounts(companyId: string, options?: Models.Dynamics365BusinessCentralGetAccountsOptionalParams): Promise<Models.GetAccountsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getAccounts(companyId: string, callback: msRest.ServiceCallback<Models.GetAccountsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getAccounts(companyId: string, options: Models.Dynamics365BusinessCentralGetAccountsOptionalParams, callback: msRest.ServiceCallback<Models.GetAccountsOKResponse>): void;
  getAccounts(companyId: string, options?: Models.Dynamics365BusinessCentralGetAccountsOptionalParams | msRest.ServiceCallback<Models.GetAccountsOKResponse>, callback?: msRest.ServiceCallback<Models.GetAccountsOKResponse>): Promise<Models.GetAccountsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getAccountsOperationSpec,
      callback) as Promise<Models.GetAccountsResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an account object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param accountId id for account
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAccountByIdResponse>
   */
  getAccountById(companyId: string, accountId: string, options?: Models.Dynamics365BusinessCentralGetAccountByIdOptionalParams): Promise<Models.GetAccountByIdResponse>;
  /**
   * @param companyId id for company
   * @param accountId id for account
   * @param callback The callback
   */
  getAccountById(companyId: string, accountId: string, callback: msRest.ServiceCallback<Models.Account>): void;
  /**
   * @param companyId id for company
   * @param accountId id for account
   * @param options The optional parameters
   * @param callback The callback
   */
  getAccountById(companyId: string, accountId: string, options: Models.Dynamics365BusinessCentralGetAccountByIdOptionalParams, callback: msRest.ServiceCallback<Models.Account>): void;
  getAccountById(companyId: string, accountId: string, options?: Models.Dynamics365BusinessCentralGetAccountByIdOptionalParams | msRest.ServiceCallback<Models.Account>, callback?: msRest.ServiceCallback<Models.Account>): Promise<Models.GetAccountByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        accountId,
        options
      },
      getAccountByIdOperationSpec,
      callback) as Promise<Models.GetAccountByIdResponse>;
  }

  /**
   * @summary Returns a list of taxGroups
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTaxGroupsResponse>
   */
  getTaxGroups(companyId: string, options?: Models.Dynamics365BusinessCentralGetTaxGroupsOptionalParams): Promise<Models.GetTaxGroupsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getTaxGroups(companyId: string, callback: msRest.ServiceCallback<Models.GetTaxGroupsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getTaxGroups(companyId: string, options: Models.Dynamics365BusinessCentralGetTaxGroupsOptionalParams, callback: msRest.ServiceCallback<Models.GetTaxGroupsOKResponse>): void;
  getTaxGroups(companyId: string, options?: Models.Dynamics365BusinessCentralGetTaxGroupsOptionalParams | msRest.ServiceCallback<Models.GetTaxGroupsOKResponse>, callback?: msRest.ServiceCallback<Models.GetTaxGroupsOKResponse>): Promise<Models.GetTaxGroupsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getTaxGroupsOperationSpec,
      callback) as Promise<Models.GetTaxGroupsResponse>;
  }

  /**
   * @summary Creates a taxGroup in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostTaxGroupResponse>
   */
  postTaxGroup(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostTaxGroupResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postTaxGroup(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.TaxGroup>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postTaxGroup(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaxGroup>): void;
  postTaxGroup(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TaxGroup>, callback?: msRest.ServiceCallback<Models.TaxGroup>): Promise<Models.PostTaxGroupResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postTaxGroupOperationSpec,
      callback) as Promise<Models.PostTaxGroupResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an taxGroup object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTaxGroupByIdResponse>
   */
  getTaxGroupById(companyId: string, taxGroupId: string, options?: Models.Dynamics365BusinessCentralGetTaxGroupByIdOptionalParams): Promise<Models.GetTaxGroupByIdResponse>;
  /**
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param callback The callback
   */
  getTaxGroupById(companyId: string, taxGroupId: string, callback: msRest.ServiceCallback<Models.TaxGroup>): void;
  /**
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param options The optional parameters
   * @param callback The callback
   */
  getTaxGroupById(companyId: string, taxGroupId: string, options: Models.Dynamics365BusinessCentralGetTaxGroupByIdOptionalParams, callback: msRest.ServiceCallback<Models.TaxGroup>): void;
  getTaxGroupById(companyId: string, taxGroupId: string, options?: Models.Dynamics365BusinessCentralGetTaxGroupByIdOptionalParams | msRest.ServiceCallback<Models.TaxGroup>, callback?: msRest.ServiceCallback<Models.TaxGroup>): Promise<Models.GetTaxGroupByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        taxGroupId,
        options
      },
      getTaxGroupByIdOperationSpec,
      callback) as Promise<Models.GetTaxGroupByIdResponse>;
  }

  /**
   * @summary Delete an taxGroup in Dynamics 365 Business Central
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTaxGroupById(companyId: string, taxGroupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param callback The callback
   */
  deleteTaxGroupById(companyId: string, taxGroupId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTaxGroupById(companyId: string, taxGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTaxGroupById(companyId: string, taxGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        taxGroupId,
        options
      },
      deleteTaxGroupByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified taxGroup
   * @param body
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTaxGroupByIdResponse>
   */
  patchTaxGroupById(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, taxGroupId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchTaxGroupByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param callback The callback
   */
  patchTaxGroupById(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, taxGroupId: string, callback: msRest.ServiceCallback<Models.TaxGroup>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param taxGroupId id for taxGroup
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTaxGroupById(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, taxGroupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaxGroup>): void;
  patchTaxGroupById(body: Models.BodyModelModelModelModelModelModelModelModelModelModel, companyId: string, taxGroupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TaxGroup>, callback?: msRest.ServiceCallback<Models.TaxGroup>): Promise<Models.PatchTaxGroupByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        taxGroupId,
        options
      },
      patchTaxGroupByIdOperationSpec,
      callback) as Promise<Models.PatchTaxGroupByIdResponse>;
  }

  /**
   * @summary Returns a list of journals
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetJournalsResponse>
   */
  getJournals(companyId: string, options?: Models.Dynamics365BusinessCentralGetJournalsOptionalParams): Promise<Models.GetJournalsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getJournals(companyId: string, callback: msRest.ServiceCallback<Models.GetJournalsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getJournals(companyId: string, options: Models.Dynamics365BusinessCentralGetJournalsOptionalParams, callback: msRest.ServiceCallback<Models.GetJournalsOKResponse>): void;
  getJournals(companyId: string, options?: Models.Dynamics365BusinessCentralGetJournalsOptionalParams | msRest.ServiceCallback<Models.GetJournalsOKResponse>, callback?: msRest.ServiceCallback<Models.GetJournalsOKResponse>): Promise<Models.GetJournalsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getJournalsOperationSpec,
      callback) as Promise<Models.GetJournalsResponse>;
  }

  /**
   * @summary Creates a journal in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostJournalResponse>
   */
  postJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostJournalResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.Journal>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Journal>): void;
  postJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Journal>, callback?: msRest.ServiceCallback<Models.Journal>): Promise<Models.PostJournalResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postJournalOperationSpec,
      callback) as Promise<Models.PostJournalResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an journal object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param journalId id for journal
   * @param [options] The optional parameters
   * @returns Promise<Models.GetJournalByIdResponse>
   */
  getJournalById(companyId: string, journalId: string, options?: Models.Dynamics365BusinessCentralGetJournalByIdOptionalParams): Promise<Models.GetJournalByIdResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param callback The callback
   */
  getJournalById(companyId: string, journalId: string, callback: msRest.ServiceCallback<Models.Journal>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param options The optional parameters
   * @param callback The callback
   */
  getJournalById(companyId: string, journalId: string, options: Models.Dynamics365BusinessCentralGetJournalByIdOptionalParams, callback: msRest.ServiceCallback<Models.Journal>): void;
  getJournalById(companyId: string, journalId: string, options?: Models.Dynamics365BusinessCentralGetJournalByIdOptionalParams | msRest.ServiceCallback<Models.Journal>, callback?: msRest.ServiceCallback<Models.Journal>): Promise<Models.GetJournalByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        options
      },
      getJournalByIdOperationSpec,
      callback) as Promise<Models.GetJournalByIdResponse>;
  }

  /**
   * @summary Delete an journal in Dynamics 365 Business Central
   * @param companyId id for company
   * @param journalId id for journal
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteJournalById(companyId: string, journalId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param callback The callback
   */
  deleteJournalById(companyId: string, journalId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteJournalById(companyId: string, journalId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteJournalById(companyId: string, journalId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        options
      },
      deleteJournalByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified journal
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchJournalByIdResponse>
   */
  patchJournalById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchJournalByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param callback The callback
   */
  patchJournalById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, callback: msRest.ServiceCallback<Models.Journal>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param options The optional parameters
   * @param callback The callback
   */
  patchJournalById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Journal>): void;
  patchJournalById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Journal>, callback?: msRest.ServiceCallback<Models.Journal>): Promise<Models.PatchJournalByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalId,
        options
      },
      patchJournalByIdOperationSpec,
      callback) as Promise<Models.PatchJournalByIdResponse>;
  }

  /**
   * @summary Performs the post action for journals entity
   * @param companyId id for company
   * @param journalId id for journal
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postActionJournals(companyId: string, journalId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param callback The callback
   */
  postActionJournals(companyId: string, journalId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param options The optional parameters
   * @param callback The callback
   */
  postActionJournals(companyId: string, journalId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postActionJournals(companyId: string, journalId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        options
      },
      postActionJournalsOperationSpec,
      callback);
  }

  /**
   * @summary Returns a list of journalLines
   * @param companyId id for company
   * @param journalId id for journal
   * @param [options] The optional parameters
   * @returns Promise<Models.GetJournalLinesForJournalResponse>
   */
  getJournalLinesForJournal(companyId: string, journalId: string, options?: Models.Dynamics365BusinessCentralGetJournalLinesForJournalOptionalParams): Promise<Models.GetJournalLinesForJournalResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param callback The callback
   */
  getJournalLinesForJournal(companyId: string, journalId: string, callback: msRest.ServiceCallback<Models.GetJournalLinesForJournalOKResponse>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param options The optional parameters
   * @param callback The callback
   */
  getJournalLinesForJournal(companyId: string, journalId: string, options: Models.Dynamics365BusinessCentralGetJournalLinesForJournalOptionalParams, callback: msRest.ServiceCallback<Models.GetJournalLinesForJournalOKResponse>): void;
  getJournalLinesForJournal(companyId: string, journalId: string, options?: Models.Dynamics365BusinessCentralGetJournalLinesForJournalOptionalParams | msRest.ServiceCallback<Models.GetJournalLinesForJournalOKResponse>, callback?: msRest.ServiceCallback<Models.GetJournalLinesForJournalOKResponse>): Promise<Models.GetJournalLinesForJournalResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        options
      },
      getJournalLinesForJournalOperationSpec,
      callback) as Promise<Models.GetJournalLinesForJournalResponse>;
  }

  /**
   * @summary Creates a journalLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param [options] The optional parameters
   * @returns Promise<Models.PostJournalLineForJournalResponse>
   */
  postJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostJournalLineForJournalResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param callback The callback
   */
  postJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param options The optional parameters
   * @param callback The callback
   */
  postJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  postJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JournalLine>, callback?: msRest.ServiceCallback<Models.JournalLine>): Promise<Models.PostJournalLineForJournalResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalId,
        options
      },
      postJournalLineForJournalOperationSpec,
      callback) as Promise<Models.PostJournalLineForJournalResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an journalLine object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetJournalLineForJournalByIdResponse>
   */
  getJournalLineForJournalById(companyId: string, journalId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetJournalLineForJournalByIdOptionalParams): Promise<Models.GetJournalLineForJournalByIdResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  getJournalLineForJournalById(companyId: string, journalId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getJournalLineForJournalById(companyId: string, journalId: string, journalLineId: string, options: Models.Dynamics365BusinessCentralGetJournalLineForJournalByIdOptionalParams, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  getJournalLineForJournalById(companyId: string, journalId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetJournalLineForJournalByIdOptionalParams | msRest.ServiceCallback<Models.JournalLine>, callback?: msRest.ServiceCallback<Models.JournalLine>): Promise<Models.GetJournalLineForJournalByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        journalLineId,
        options
      },
      getJournalLineForJournalByIdOperationSpec,
      callback) as Promise<Models.GetJournalLineForJournalByIdResponse>;
  }

  /**
   * @summary Delete an journalLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteJournalLineForJournalByIdById(companyId: string, journalId: string, journalLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  deleteJournalLineForJournalByIdById(companyId: string, journalId: string, journalLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteJournalLineForJournalByIdById(companyId: string, journalId: string, journalLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteJournalLineForJournalByIdById(companyId: string, journalId: string, journalLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        journalLineId,
        options
      },
      deleteJournalLineForJournalByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified journalLine
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchJournalLineForJournalByIdByIdResponse>
   */
  patchJournalLineForJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchJournalLineForJournalByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  patchJournalLineForJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchJournalLineForJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  patchJournalLineForJournalByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JournalLine>, callback?: msRest.ServiceCallback<Models.JournalLine>): Promise<Models.PatchJournalLineForJournalByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalId,
        journalLineId,
        options
      },
      patchJournalLineForJournalByIdByIdOperationSpec,
      callback) as Promise<Models.PatchJournalLineForJournalByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of attachments
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAttachmentsForJournalLineForJournalResponse>
   */
  getAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineForJournalOptionalParams): Promise<Models.GetAttachmentsForJournalLineForJournalResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  getAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.GetAttachmentsForJournalLineForJournalOKResponse>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, options: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineForJournalOptionalParams, callback: msRest.ServiceCallback<Models.GetAttachmentsForJournalLineForJournalOKResponse>): void;
  getAttachmentsForJournalLineForJournal(companyId: string, journalId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineForJournalOptionalParams | msRest.ServiceCallback<Models.GetAttachmentsForJournalLineForJournalOKResponse>, callback?: msRest.ServiceCallback<Models.GetAttachmentsForJournalLineForJournalOKResponse>): Promise<Models.GetAttachmentsForJournalLineForJournalResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        journalLineId,
        options
      },
      getAttachmentsForJournalLineForJournalOperationSpec,
      callback) as Promise<Models.GetAttachmentsForJournalLineForJournalResponse>;
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PostAttachmentsForJournalLineForJournalResponse>
   */
  postAttachmentsForJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostAttachmentsForJournalLineForJournalResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  postAttachmentsForJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  postAttachmentsForJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attachments>): void;
  postAttachmentsForJournalLineForJournal(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.PostAttachmentsForJournalLineForJournalResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalId,
        journalLineId,
        options
      },
      postAttachmentsForJournalLineForJournalOperationSpec,
      callback) as Promise<Models.PostAttachmentsForJournalLineForJournalResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAttachmentsForJournalLineForJournalByIdByParentIdResponse>
   */
  getAttachmentsForJournalLineForJournalByIdByParentId(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineForJournalByIdByParentIdOptionalParams): Promise<Models.GetAttachmentsForJournalLineForJournalByIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  getAttachmentsForJournalLineForJournalByIdByParentId(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  getAttachmentsForJournalLineForJournalByIdByParentId(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineForJournalByIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.Attachments>): void;
  getAttachmentsForJournalLineForJournalByIdByParentId(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineForJournalByIdByParentIdOptionalParams | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.GetAttachmentsForJournalLineForJournalByIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        journalLineId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      getAttachmentsForJournalLineForJournalByIdByParentIdOperationSpec,
      callback) as Promise<Models.GetAttachmentsForJournalLineForJournalByIdByParentIdResponse>;
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdById(companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalId,
        journalLineId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified attachments
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdResponse>
   */
  patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalId id for journal
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attachments>): void;
  patchAttachmentsForJournalLineForJournalByIdByParentIdByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.PatchAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalId,
        journalLineId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      patchAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdOperationSpec,
      callback) as Promise<Models.PatchAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of journalLines
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetJournalLinesResponse>
   */
  getJournalLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetJournalLinesOptionalParams): Promise<Models.GetJournalLinesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getJournalLines(companyId: string, callback: msRest.ServiceCallback<Models.GetJournalLinesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getJournalLines(companyId: string, options: Models.Dynamics365BusinessCentralGetJournalLinesOptionalParams, callback: msRest.ServiceCallback<Models.GetJournalLinesOKResponse>): void;
  getJournalLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetJournalLinesOptionalParams | msRest.ServiceCallback<Models.GetJournalLinesOKResponse>, callback?: msRest.ServiceCallback<Models.GetJournalLinesOKResponse>): Promise<Models.GetJournalLinesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getJournalLinesOperationSpec,
      callback) as Promise<Models.GetJournalLinesResponse>;
  }

  /**
   * @summary Creates a journalLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostJournalLineResponse>
   */
  postJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostJournalLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  postJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JournalLine>, callback?: msRest.ServiceCallback<Models.JournalLine>): Promise<Models.PostJournalLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postJournalLineOperationSpec,
      callback) as Promise<Models.PostJournalLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an journalLine object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetJournalLineByIdResponse>
   */
  getJournalLineById(companyId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetJournalLineByIdOptionalParams): Promise<Models.GetJournalLineByIdResponse>;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  getJournalLineById(companyId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getJournalLineById(companyId: string, journalLineId: string, options: Models.Dynamics365BusinessCentralGetJournalLineByIdOptionalParams, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  getJournalLineById(companyId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetJournalLineByIdOptionalParams | msRest.ServiceCallback<Models.JournalLine>, callback?: msRest.ServiceCallback<Models.JournalLine>): Promise<Models.GetJournalLineByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalLineId,
        options
      },
      getJournalLineByIdOperationSpec,
      callback) as Promise<Models.GetJournalLineByIdResponse>;
  }

  /**
   * @summary Delete an journalLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteJournalLineById(companyId: string, journalLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  deleteJournalLineById(companyId: string, journalLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteJournalLineById(companyId: string, journalLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteJournalLineById(companyId: string, journalLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalLineId,
        options
      },
      deleteJournalLineByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified journalLine
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchJournalLineByIdResponse>
   */
  patchJournalLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchJournalLineByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  patchJournalLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchJournalLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JournalLine>): void;
  patchJournalLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JournalLine>, callback?: msRest.ServiceCallback<Models.JournalLine>): Promise<Models.PatchJournalLineByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalLineId,
        options
      },
      patchJournalLineByIdOperationSpec,
      callback) as Promise<Models.PatchJournalLineByIdResponse>;
  }

  /**
   * @summary Returns a list of attachments
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAttachmentsForJournalLineResponse>
   */
  getAttachmentsForJournalLine(companyId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineOptionalParams): Promise<Models.GetAttachmentsForJournalLineResponse>;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  getAttachmentsForJournalLine(companyId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.GetAttachmentsForJournalLineOKResponse>): void;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getAttachmentsForJournalLine(companyId: string, journalLineId: string, options: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineOptionalParams, callback: msRest.ServiceCallback<Models.GetAttachmentsForJournalLineOKResponse>): void;
  getAttachmentsForJournalLine(companyId: string, journalLineId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineOptionalParams | msRest.ServiceCallback<Models.GetAttachmentsForJournalLineOKResponse>, callback?: msRest.ServiceCallback<Models.GetAttachmentsForJournalLineOKResponse>): Promise<Models.GetAttachmentsForJournalLineResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalLineId,
        options
      },
      getAttachmentsForJournalLineOperationSpec,
      callback) as Promise<Models.GetAttachmentsForJournalLineResponse>;
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PostAttachmentsForJournalLineResponse>
   */
  postAttachmentsForJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostAttachmentsForJournalLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param callback The callback
   */
  postAttachmentsForJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param options The optional parameters
   * @param callback The callback
   */
  postAttachmentsForJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attachments>): void;
  postAttachmentsForJournalLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.PostAttachmentsForJournalLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalLineId,
        options
      },
      postAttachmentsForJournalLineOperationSpec,
      callback) as Promise<Models.PostAttachmentsForJournalLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAttachmentsForJournalLineByIdByParentIdResponse>
   */
  getAttachmentsForJournalLineByIdByParentId(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineByIdByParentIdOptionalParams): Promise<Models.GetAttachmentsForJournalLineByIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  getAttachmentsForJournalLineByIdByParentId(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  getAttachmentsForJournalLineByIdByParentId(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineByIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.Attachments>): void;
  getAttachmentsForJournalLineByIdByParentId(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsForJournalLineByIdByParentIdOptionalParams | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.GetAttachmentsForJournalLineByIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalLineId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      getAttachmentsForJournalLineByIdByParentIdOperationSpec,
      callback) as Promise<Models.GetAttachmentsForJournalLineByIdByParentIdResponse>;
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAttachmentsForJournalLineByIdByParentIdById(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  deleteAttachmentsForJournalLineByIdByParentIdById(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAttachmentsForJournalLineByIdByParentIdById(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAttachmentsForJournalLineByIdByParentIdById(companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        journalLineId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      deleteAttachmentsForJournalLineByIdByParentIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified attachments
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAttachmentsForJournalLineByIdByParentIdByIdResponse>
   */
  patchAttachmentsForJournalLineByIdByParentIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchAttachmentsForJournalLineByIdByParentIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  patchAttachmentsForJournalLineByIdByParentIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param journalLineId id for journalLine
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAttachmentsForJournalLineByIdByParentIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attachments>): void;
  patchAttachmentsForJournalLineByIdByParentIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, journalLineId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.PatchAttachmentsForJournalLineByIdByParentIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        journalLineId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      patchAttachmentsForJournalLineByIdByParentIdByIdOperationSpec,
      callback) as Promise<Models.PatchAttachmentsForJournalLineByIdByParentIdByIdResponse>;
  }

  /**
   * @summary Returns a list of attachments
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAttachmentsResponse>
   */
  getAttachments(companyId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsOptionalParams): Promise<Models.GetAttachmentsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getAttachments(companyId: string, callback: msRest.ServiceCallback<Models.GetAttachmentsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getAttachments(companyId: string, options: Models.Dynamics365BusinessCentralGetAttachmentsOptionalParams, callback: msRest.ServiceCallback<Models.GetAttachmentsOKResponse>): void;
  getAttachments(companyId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsOptionalParams | msRest.ServiceCallback<Models.GetAttachmentsOKResponse>, callback?: msRest.ServiceCallback<Models.GetAttachmentsOKResponse>): Promise<Models.GetAttachmentsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getAttachmentsOperationSpec,
      callback) as Promise<Models.GetAttachmentsResponse>;
  }

  /**
   * @summary Creates a attachments in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostAttachmentsResponse>
   */
  postAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostAttachmentsResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attachments>): void;
  postAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.PostAttachmentsResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postAttachmentsOperationSpec,
      callback) as Promise<Models.PostAttachmentsResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an attachments object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAttachmentsByIdByParentIdResponse>
   */
  getAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsByIdByParentIdOptionalParams): Promise<Models.GetAttachmentsByIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  getAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  getAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, options: Models.Dynamics365BusinessCentralGetAttachmentsByIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.Attachments>): void;
  getAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, options?: Models.Dynamics365BusinessCentralGetAttachmentsByIdByParentIdOptionalParams | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.GetAttachmentsByIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      getAttachmentsByIdByParentIdOperationSpec,
      callback) as Promise<Models.GetAttachmentsByIdByParentIdResponse>;
  }

  /**
   * @summary Delete an attachments in Dynamics 365 Business Central
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  deleteAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAttachmentsByIdByParentId(companyId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      deleteAttachmentsByIdByParentIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified attachments
   * @param body
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchAttachmentsByIdByParentIdResponse>
   */
  patchAttachmentsByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchAttachmentsByIdByParentIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param callback The callback
   */
  patchAttachmentsByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, attachmentsParentId: string, attachmentsId: string, callback: msRest.ServiceCallback<Models.Attachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param attachmentsParentId parentId for attachments
   * @param attachmentsId id for attachments
   * @param options The optional parameters
   * @param callback The callback
   */
  patchAttachmentsByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, attachmentsParentId: string, attachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attachments>): void;
  patchAttachmentsByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, attachmentsParentId: string, attachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attachments>, callback?: msRest.ServiceCallback<Models.Attachments>): Promise<Models.PatchAttachmentsByIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        attachmentsParentId,
        attachmentsId,
        options
      },
      patchAttachmentsByIdByParentIdOperationSpec,
      callback) as Promise<Models.PatchAttachmentsByIdByParentIdResponse>;
  }

  /**
   * @summary Returns a list of employees
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEmployeesResponse>
   */
  getEmployees(companyId: string, options?: Models.Dynamics365BusinessCentralGetEmployeesOptionalParams): Promise<Models.GetEmployeesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getEmployees(companyId: string, callback: msRest.ServiceCallback<Models.GetEmployeesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmployees(companyId: string, options: Models.Dynamics365BusinessCentralGetEmployeesOptionalParams, callback: msRest.ServiceCallback<Models.GetEmployeesOKResponse>): void;
  getEmployees(companyId: string, options?: Models.Dynamics365BusinessCentralGetEmployeesOptionalParams | msRest.ServiceCallback<Models.GetEmployeesOKResponse>, callback?: msRest.ServiceCallback<Models.GetEmployeesOKResponse>): Promise<Models.GetEmployeesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getEmployeesOperationSpec,
      callback) as Promise<Models.GetEmployeesResponse>;
  }

  /**
   * @summary Creates a employee in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostEmployeeResponse>
   */
  postEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostEmployeeResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.Employee>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Employee>): void;
  postEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Employee>, callback?: msRest.ServiceCallback<Models.Employee>): Promise<Models.PostEmployeeResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postEmployeeOperationSpec,
      callback) as Promise<Models.PostEmployeeResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an employee object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEmployeeByIdResponse>
   */
  getEmployeeById(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetEmployeeByIdOptionalParams): Promise<Models.GetEmployeeByIdResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  getEmployeeById(companyId: string, employeeId: string, callback: msRest.ServiceCallback<Models.Employee>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  getEmployeeById(companyId: string, employeeId: string, options: Models.Dynamics365BusinessCentralGetEmployeeByIdOptionalParams, callback: msRest.ServiceCallback<Models.Employee>): void;
  getEmployeeById(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetEmployeeByIdOptionalParams | msRest.ServiceCallback<Models.Employee>, callback?: msRest.ServiceCallback<Models.Employee>): Promise<Models.GetEmployeeByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        options
      },
      getEmployeeByIdOperationSpec,
      callback) as Promise<Models.GetEmployeeByIdResponse>;
  }

  /**
   * @summary Delete an employee in Dynamics 365 Business Central
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteEmployeeById(companyId: string, employeeId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  deleteEmployeeById(companyId: string, employeeId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteEmployeeById(companyId: string, employeeId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteEmployeeById(companyId: string, employeeId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        options
      },
      deleteEmployeeByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified employee
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchEmployeeByIdResponse>
   */
  patchEmployeeById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchEmployeeByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  patchEmployeeById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, callback: msRest.ServiceCallback<Models.Employee>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  patchEmployeeById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Employee>): void;
  patchEmployeeById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Employee>, callback?: msRest.ServiceCallback<Models.Employee>): Promise<Models.PatchEmployeeByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        employeeId,
        options
      },
      patchEmployeeByIdOperationSpec,
      callback) as Promise<Models.PatchEmployeeByIdResponse>;
  }

  /**
   * @summary Returns a list of picture
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForEmployeeResponse>
   */
  getPictureForEmployee(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetPictureForEmployeeOptionalParams): Promise<Models.GetPictureForEmployeeResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  getPictureForEmployee(companyId: string, employeeId: string, callback: msRest.ServiceCallback<Models.GetPictureForEmployeeOKResponse>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForEmployee(companyId: string, employeeId: string, options: Models.Dynamics365BusinessCentralGetPictureForEmployeeOptionalParams, callback: msRest.ServiceCallback<Models.GetPictureForEmployeeOKResponse>): void;
  getPictureForEmployee(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetPictureForEmployeeOptionalParams | msRest.ServiceCallback<Models.GetPictureForEmployeeOKResponse>, callback?: msRest.ServiceCallback<Models.GetPictureForEmployeeOKResponse>): Promise<Models.GetPictureForEmployeeResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        options
      },
      getPictureForEmployeeOperationSpec,
      callback) as Promise<Models.GetPictureForEmployeeResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an picture object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPictureForEmployeeByIdResponse>
   */
  getPictureForEmployeeById(companyId: string, employeeId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForEmployeeByIdOptionalParams): Promise<Models.GetPictureForEmployeeByIdResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param callback The callback
   */
  getPictureForEmployeeById(companyId: string, employeeId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  getPictureForEmployeeById(companyId: string, employeeId: string, pictureId: string, options: Models.Dynamics365BusinessCentralGetPictureForEmployeeByIdOptionalParams, callback: msRest.ServiceCallback<Models.Picture>): void;
  getPictureForEmployeeById(companyId: string, employeeId: string, pictureId: string, options?: Models.Dynamics365BusinessCentralGetPictureForEmployeeByIdOptionalParams | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.GetPictureForEmployeeByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        pictureId,
        options
      },
      getPictureForEmployeeByIdOperationSpec,
      callback) as Promise<Models.GetPictureForEmployeeByIdResponse>;
  }

  /**
   * @summary Delete an picture in Dynamics 365 Business Central
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePictureForEmployeeByIdById(companyId: string, employeeId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param callback The callback
   */
  deletePictureForEmployeeByIdById(companyId: string, employeeId: string, pictureId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePictureForEmployeeByIdById(companyId: string, employeeId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePictureForEmployeeByIdById(companyId: string, employeeId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        pictureId,
        options
      },
      deletePictureForEmployeeByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified picture
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPictureForEmployeeByIdByIdResponse>
   */
  patchPictureForEmployeeByIdById(body: Models.BodyModel, companyId: string, employeeId: string, pictureId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPictureForEmployeeByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param callback The callback
   */
  patchPictureForEmployeeByIdById(body: Models.BodyModel, companyId: string, employeeId: string, pictureId: string, callback: msRest.ServiceCallback<Models.Picture>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param pictureId id for picture
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPictureForEmployeeByIdById(body: Models.BodyModel, companyId: string, employeeId: string, pictureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Picture>): void;
  patchPictureForEmployeeByIdById(body: Models.BodyModel, companyId: string, employeeId: string, pictureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Picture>, callback?: msRest.ServiceCallback<Models.Picture>): Promise<Models.PatchPictureForEmployeeByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        employeeId,
        pictureId,
        options
      },
      patchPictureForEmployeeByIdByIdOperationSpec,
      callback) as Promise<Models.PatchPictureForEmployeeByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of defaultDimensions
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForEmployeeResponse>
   */
  getDefaultDimensionsForEmployee(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForEmployeeOptionalParams): Promise<Models.GetDefaultDimensionsForEmployeeResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  getDefaultDimensionsForEmployee(companyId: string, employeeId: string, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForEmployeeOKResponse>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForEmployee(companyId: string, employeeId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForEmployeeOptionalParams, callback: msRest.ServiceCallback<Models.GetDefaultDimensionsForEmployeeOKResponse>): void;
  getDefaultDimensionsForEmployee(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForEmployeeOptionalParams | msRest.ServiceCallback<Models.GetDefaultDimensionsForEmployeeOKResponse>, callback?: msRest.ServiceCallback<Models.GetDefaultDimensionsForEmployeeOKResponse>): Promise<Models.GetDefaultDimensionsForEmployeeResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        options
      },
      getDefaultDimensionsForEmployeeOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForEmployeeResponse>;
  }

  /**
   * @summary Creates a defaultDimensions in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<Models.PostDefaultDimensionsForEmployeeResponse>
   */
  postDefaultDimensionsForEmployee(body: Models.BodyModelModel, companyId: string, employeeId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostDefaultDimensionsForEmployeeResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  postDefaultDimensionsForEmployee(body: Models.BodyModelModel, companyId: string, employeeId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  postDefaultDimensionsForEmployee(body: Models.BodyModelModel, companyId: string, employeeId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  postDefaultDimensionsForEmployee(body: Models.BodyModelModel, companyId: string, employeeId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PostDefaultDimensionsForEmployeeResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        employeeId,
        options
      },
      postDefaultDimensionsForEmployeeOperationSpec,
      callback) as Promise<Models.PostDefaultDimensionsForEmployeeResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an defaultDimensions object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDefaultDimensionsForEmployeeByDimensionIdByParentIdResponse>
   */
  getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForEmployeeByDimensionIdByParentIdOptionalParams): Promise<Models.GetDefaultDimensionsForEmployeeByDimensionIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: Models.Dynamics365BusinessCentralGetDefaultDimensionsForEmployeeByDimensionIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  getDefaultDimensionsForEmployeeByDimensionIdByParentId(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: Models.Dynamics365BusinessCentralGetDefaultDimensionsForEmployeeByDimensionIdByParentIdOptionalParams | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.GetDefaultDimensionsForEmployeeByDimensionIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      getDefaultDimensionsForEmployeeByDimensionIdByParentIdOperationSpec,
      callback) as Promise<Models.GetDefaultDimensionsForEmployeeByDimensionIdByParentIdResponse>;
  }

  /**
   * @summary Delete an defaultDimensions in Dynamics 365 Business Central
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdById(companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified defaultDimensions
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdResponse>
   */
  patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param callback The callback
   */
  patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param defaultDimensionsParentId parentId for defaultDimensions
   * @param defaultDimensionsDimensionId dimensionId for defaultDimensions
   * @param options The optional parameters
   * @param callback The callback
   */
  patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DefaultDimensions>): void;
  patchDefaultDimensionsForEmployeeByDimensionIdByParentIdById(body: Models.BodyModelModel, companyId: string, employeeId: string, defaultDimensionsParentId: string, defaultDimensionsDimensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DefaultDimensions>, callback?: msRest.ServiceCallback<Models.DefaultDimensions>): Promise<Models.PatchDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        employeeId,
        defaultDimensionsParentId,
        defaultDimensionsDimensionId,
        options
      },
      patchDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdOperationSpec,
      callback) as Promise<Models.PatchDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdResponse>;
  }

  /**
   * @summary Returns a list of timeRegistrationEntries
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTimeRegistrationEntriesForEmployeeResponse>
   */
  getTimeRegistrationEntriesForEmployee(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntriesForEmployeeOptionalParams): Promise<Models.GetTimeRegistrationEntriesForEmployeeResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  getTimeRegistrationEntriesForEmployee(companyId: string, employeeId: string, callback: msRest.ServiceCallback<Models.GetTimeRegistrationEntriesForEmployeeOKResponse>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  getTimeRegistrationEntriesForEmployee(companyId: string, employeeId: string, options: Models.Dynamics365BusinessCentralGetTimeRegistrationEntriesForEmployeeOptionalParams, callback: msRest.ServiceCallback<Models.GetTimeRegistrationEntriesForEmployeeOKResponse>): void;
  getTimeRegistrationEntriesForEmployee(companyId: string, employeeId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntriesForEmployeeOptionalParams | msRest.ServiceCallback<Models.GetTimeRegistrationEntriesForEmployeeOKResponse>, callback?: msRest.ServiceCallback<Models.GetTimeRegistrationEntriesForEmployeeOKResponse>): Promise<Models.GetTimeRegistrationEntriesForEmployeeResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        options
      },
      getTimeRegistrationEntriesForEmployeeOperationSpec,
      callback) as Promise<Models.GetTimeRegistrationEntriesForEmployeeResponse>;
  }

  /**
   * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param [options] The optional parameters
   * @returns Promise<Models.PostTimeRegistrationEntryForEmployeeResponse>
   */
  postTimeRegistrationEntryForEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostTimeRegistrationEntryForEmployeeResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param callback The callback
   */
  postTimeRegistrationEntryForEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param options The optional parameters
   * @param callback The callback
   */
  postTimeRegistrationEntryForEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  postTimeRegistrationEntryForEmployee(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TimeRegistrationEntry>, callback?: msRest.ServiceCallback<Models.TimeRegistrationEntry>): Promise<Models.PostTimeRegistrationEntryForEmployeeResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        employeeId,
        options
      },
      postTimeRegistrationEntryForEmployeeOperationSpec,
      callback) as Promise<Models.PostTimeRegistrationEntryForEmployeeResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an timeRegistrationEntry object for
   * Dynamics 365 Business Central.
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTimeRegistrationEntryForEmployeeByIdResponse>
   */
  getTimeRegistrationEntryForEmployeeById(companyId: string, employeeId: string, timeRegistrationEntryId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntryForEmployeeByIdOptionalParams): Promise<Models.GetTimeRegistrationEntryForEmployeeByIdResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param callback The callback
   */
  getTimeRegistrationEntryForEmployeeById(companyId: string, employeeId: string, timeRegistrationEntryId: string, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param options The optional parameters
   * @param callback The callback
   */
  getTimeRegistrationEntryForEmployeeById(companyId: string, employeeId: string, timeRegistrationEntryId: string, options: Models.Dynamics365BusinessCentralGetTimeRegistrationEntryForEmployeeByIdOptionalParams, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  getTimeRegistrationEntryForEmployeeById(companyId: string, employeeId: string, timeRegistrationEntryId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntryForEmployeeByIdOptionalParams | msRest.ServiceCallback<Models.TimeRegistrationEntry>, callback?: msRest.ServiceCallback<Models.TimeRegistrationEntry>): Promise<Models.GetTimeRegistrationEntryForEmployeeByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        timeRegistrationEntryId,
        options
      },
      getTimeRegistrationEntryForEmployeeByIdOperationSpec,
      callback) as Promise<Models.GetTimeRegistrationEntryForEmployeeByIdResponse>;
  }

  /**
   * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTimeRegistrationEntryForEmployeeByIdById(companyId: string, employeeId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param callback The callback
   */
  deleteTimeRegistrationEntryForEmployeeByIdById(companyId: string, employeeId: string, timeRegistrationEntryId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTimeRegistrationEntryForEmployeeByIdById(companyId: string, employeeId: string, timeRegistrationEntryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTimeRegistrationEntryForEmployeeByIdById(companyId: string, employeeId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        employeeId,
        timeRegistrationEntryId,
        options
      },
      deleteTimeRegistrationEntryForEmployeeByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified timeRegistrationEntry
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTimeRegistrationEntryForEmployeeByIdByIdResponse>
   */
  patchTimeRegistrationEntryForEmployeeByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchTimeRegistrationEntryForEmployeeByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param callback The callback
   */
  patchTimeRegistrationEntryForEmployeeByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, timeRegistrationEntryId: string, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param employeeId id for employee
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTimeRegistrationEntryForEmployeeByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, timeRegistrationEntryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  patchTimeRegistrationEntryForEmployeeByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, employeeId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TimeRegistrationEntry>, callback?: msRest.ServiceCallback<Models.TimeRegistrationEntry>): Promise<Models.PatchTimeRegistrationEntryForEmployeeByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        employeeId,
        timeRegistrationEntryId,
        options
      },
      patchTimeRegistrationEntryForEmployeeByIdByIdOperationSpec,
      callback) as Promise<Models.PatchTimeRegistrationEntryForEmployeeByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of timeRegistrationEntries
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTimeRegistrationEntriesResponse>
   */
  getTimeRegistrationEntries(companyId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntriesOptionalParams): Promise<Models.GetTimeRegistrationEntriesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getTimeRegistrationEntries(companyId: string, callback: msRest.ServiceCallback<Models.GetTimeRegistrationEntriesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getTimeRegistrationEntries(companyId: string, options: Models.Dynamics365BusinessCentralGetTimeRegistrationEntriesOptionalParams, callback: msRest.ServiceCallback<Models.GetTimeRegistrationEntriesOKResponse>): void;
  getTimeRegistrationEntries(companyId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntriesOptionalParams | msRest.ServiceCallback<Models.GetTimeRegistrationEntriesOKResponse>, callback?: msRest.ServiceCallback<Models.GetTimeRegistrationEntriesOKResponse>): Promise<Models.GetTimeRegistrationEntriesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getTimeRegistrationEntriesOperationSpec,
      callback) as Promise<Models.GetTimeRegistrationEntriesResponse>;
  }

  /**
   * @summary Creates a timeRegistrationEntry in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostTimeRegistrationEntryResponse>
   */
  postTimeRegistrationEntry(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostTimeRegistrationEntryResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postTimeRegistrationEntry(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postTimeRegistrationEntry(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  postTimeRegistrationEntry(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TimeRegistrationEntry>, callback?: msRest.ServiceCallback<Models.TimeRegistrationEntry>): Promise<Models.PostTimeRegistrationEntryResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postTimeRegistrationEntryOperationSpec,
      callback) as Promise<Models.PostTimeRegistrationEntryResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an timeRegistrationEntry object for
   * Dynamics 365 Business Central.
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTimeRegistrationEntryByIdResponse>
   */
  getTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntryByIdOptionalParams): Promise<Models.GetTimeRegistrationEntryByIdResponse>;
  /**
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param callback The callback
   */
  getTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  /**
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param options The optional parameters
   * @param callback The callback
   */
  getTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, options: Models.Dynamics365BusinessCentralGetTimeRegistrationEntryByIdOptionalParams, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  getTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, options?: Models.Dynamics365BusinessCentralGetTimeRegistrationEntryByIdOptionalParams | msRest.ServiceCallback<Models.TimeRegistrationEntry>, callback?: msRest.ServiceCallback<Models.TimeRegistrationEntry>): Promise<Models.GetTimeRegistrationEntryByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        timeRegistrationEntryId,
        options
      },
      getTimeRegistrationEntryByIdOperationSpec,
      callback) as Promise<Models.GetTimeRegistrationEntryByIdResponse>;
  }

  /**
   * @summary Delete an timeRegistrationEntry in Dynamics 365 Business Central
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param callback The callback
   */
  deleteTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTimeRegistrationEntryById(companyId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        timeRegistrationEntryId,
        options
      },
      deleteTimeRegistrationEntryByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified timeRegistrationEntry
   * @param body
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTimeRegistrationEntryByIdResponse>
   */
  patchTimeRegistrationEntryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchTimeRegistrationEntryByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param callback The callback
   */
  patchTimeRegistrationEntryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, timeRegistrationEntryId: string, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param timeRegistrationEntryId id for timeRegistrationEntry
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTimeRegistrationEntryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, timeRegistrationEntryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TimeRegistrationEntry>): void;
  patchTimeRegistrationEntryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, timeRegistrationEntryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TimeRegistrationEntry>, callback?: msRest.ServiceCallback<Models.TimeRegistrationEntry>): Promise<Models.PatchTimeRegistrationEntryByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        timeRegistrationEntryId,
        options
      },
      patchTimeRegistrationEntryByIdOperationSpec,
      callback) as Promise<Models.PatchTimeRegistrationEntryByIdResponse>;
  }

  /**
   * @summary Returns a list of generalLedgerEntries
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGeneralLedgerEntriesResponse>
   */
  getGeneralLedgerEntries(companyId: string, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntriesOptionalParams): Promise<Models.GetGeneralLedgerEntriesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getGeneralLedgerEntries(companyId: string, callback: msRest.ServiceCallback<Models.GetGeneralLedgerEntriesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getGeneralLedgerEntries(companyId: string, options: Models.Dynamics365BusinessCentralGetGeneralLedgerEntriesOptionalParams, callback: msRest.ServiceCallback<Models.GetGeneralLedgerEntriesOKResponse>): void;
  getGeneralLedgerEntries(companyId: string, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntriesOptionalParams | msRest.ServiceCallback<Models.GetGeneralLedgerEntriesOKResponse>, callback?: msRest.ServiceCallback<Models.GetGeneralLedgerEntriesOKResponse>): Promise<Models.GetGeneralLedgerEntriesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getGeneralLedgerEntriesOperationSpec,
      callback) as Promise<Models.GetGeneralLedgerEntriesResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an generalLedgerEntry object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param generalLedgerEntryId id for generalLedgerEntry
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGeneralLedgerEntryByIdResponse>
   */
  getGeneralLedgerEntryById(companyId: string, generalLedgerEntryId: number, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryByIdOptionalParams): Promise<Models.GetGeneralLedgerEntryByIdResponse>;
  /**
   * @param companyId id for company
   * @param generalLedgerEntryId id for generalLedgerEntry
   * @param callback The callback
   */
  getGeneralLedgerEntryById(companyId: string, generalLedgerEntryId: number, callback: msRest.ServiceCallback<Models.GeneralLedgerEntry>): void;
  /**
   * @param companyId id for company
   * @param generalLedgerEntryId id for generalLedgerEntry
   * @param options The optional parameters
   * @param callback The callback
   */
  getGeneralLedgerEntryById(companyId: string, generalLedgerEntryId: number, options: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryByIdOptionalParams, callback: msRest.ServiceCallback<Models.GeneralLedgerEntry>): void;
  getGeneralLedgerEntryById(companyId: string, generalLedgerEntryId: number, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryByIdOptionalParams | msRest.ServiceCallback<Models.GeneralLedgerEntry>, callback?: msRest.ServiceCallback<Models.GeneralLedgerEntry>): Promise<Models.GetGeneralLedgerEntryByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        generalLedgerEntryId,
        options
      },
      getGeneralLedgerEntryByIdOperationSpec,
      callback) as Promise<Models.GetGeneralLedgerEntryByIdResponse>;
  }

  /**
   * @summary Returns a list of currencies
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCurrenciesResponse>
   */
  getCurrencies(companyId: string, options?: Models.Dynamics365BusinessCentralGetCurrenciesOptionalParams): Promise<Models.GetCurrenciesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCurrencies(companyId: string, callback: msRest.ServiceCallback<Models.GetCurrenciesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCurrencies(companyId: string, options: Models.Dynamics365BusinessCentralGetCurrenciesOptionalParams, callback: msRest.ServiceCallback<Models.GetCurrenciesOKResponse>): void;
  getCurrencies(companyId: string, options?: Models.Dynamics365BusinessCentralGetCurrenciesOptionalParams | msRest.ServiceCallback<Models.GetCurrenciesOKResponse>, callback?: msRest.ServiceCallback<Models.GetCurrenciesOKResponse>): Promise<Models.GetCurrenciesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCurrenciesOperationSpec,
      callback) as Promise<Models.GetCurrenciesResponse>;
  }

  /**
   * @summary Creates a currency in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostCurrencyResponse>
   */
  postCurrency(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostCurrencyResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postCurrency(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.Currency>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postCurrency(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Currency>): void;
  postCurrency(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Currency>, callback?: msRest.ServiceCallback<Models.Currency>): Promise<Models.PostCurrencyResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postCurrencyOperationSpec,
      callback) as Promise<Models.PostCurrencyResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an currency object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param currencyId id for currency
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCurrencyByIdResponse>
   */
  getCurrencyById(companyId: string, currencyId: string, options?: Models.Dynamics365BusinessCentralGetCurrencyByIdOptionalParams): Promise<Models.GetCurrencyByIdResponse>;
  /**
   * @param companyId id for company
   * @param currencyId id for currency
   * @param callback The callback
   */
  getCurrencyById(companyId: string, currencyId: string, callback: msRest.ServiceCallback<Models.Currency>): void;
  /**
   * @param companyId id for company
   * @param currencyId id for currency
   * @param options The optional parameters
   * @param callback The callback
   */
  getCurrencyById(companyId: string, currencyId: string, options: Models.Dynamics365BusinessCentralGetCurrencyByIdOptionalParams, callback: msRest.ServiceCallback<Models.Currency>): void;
  getCurrencyById(companyId: string, currencyId: string, options?: Models.Dynamics365BusinessCentralGetCurrencyByIdOptionalParams | msRest.ServiceCallback<Models.Currency>, callback?: msRest.ServiceCallback<Models.Currency>): Promise<Models.GetCurrencyByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        currencyId,
        options
      },
      getCurrencyByIdOperationSpec,
      callback) as Promise<Models.GetCurrencyByIdResponse>;
  }

  /**
   * @summary Delete an currency in Dynamics 365 Business Central
   * @param companyId id for company
   * @param currencyId id for currency
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCurrencyById(companyId: string, currencyId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param currencyId id for currency
   * @param callback The callback
   */
  deleteCurrencyById(companyId: string, currencyId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param currencyId id for currency
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCurrencyById(companyId: string, currencyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCurrencyById(companyId: string, currencyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        currencyId,
        options
      },
      deleteCurrencyByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified currency
   * @param body
   * @param companyId id for company
   * @param currencyId id for currency
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCurrencyByIdResponse>
   */
  patchCurrencyById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, currencyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchCurrencyByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param currencyId id for currency
   * @param callback The callback
   */
  patchCurrencyById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, currencyId: string, callback: msRest.ServiceCallback<Models.Currency>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param currencyId id for currency
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCurrencyById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, currencyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Currency>): void;
  patchCurrencyById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, currencyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Currency>, callback?: msRest.ServiceCallback<Models.Currency>): Promise<Models.PatchCurrencyByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        currencyId,
        options
      },
      patchCurrencyByIdOperationSpec,
      callback) as Promise<Models.PatchCurrencyByIdResponse>;
  }

  /**
   * @summary Returns a list of paymentMethods
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPaymentMethodsResponse>
   */
  getPaymentMethods(companyId: string, options?: Models.Dynamics365BusinessCentralGetPaymentMethodsOptionalParams): Promise<Models.GetPaymentMethodsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getPaymentMethods(companyId: string, callback: msRest.ServiceCallback<Models.GetPaymentMethodsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getPaymentMethods(companyId: string, options: Models.Dynamics365BusinessCentralGetPaymentMethodsOptionalParams, callback: msRest.ServiceCallback<Models.GetPaymentMethodsOKResponse>): void;
  getPaymentMethods(companyId: string, options?: Models.Dynamics365BusinessCentralGetPaymentMethodsOptionalParams | msRest.ServiceCallback<Models.GetPaymentMethodsOKResponse>, callback?: msRest.ServiceCallback<Models.GetPaymentMethodsOKResponse>): Promise<Models.GetPaymentMethodsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getPaymentMethodsOperationSpec,
      callback) as Promise<Models.GetPaymentMethodsResponse>;
  }

  /**
   * @summary Creates a paymentMethod in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostPaymentMethodResponse>
   */
  postPaymentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostPaymentMethodResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postPaymentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.PaymentMethod>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postPaymentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PaymentMethod>): void;
  postPaymentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PaymentMethod>, callback?: msRest.ServiceCallback<Models.PaymentMethod>): Promise<Models.PostPaymentMethodResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postPaymentMethodOperationSpec,
      callback) as Promise<Models.PostPaymentMethodResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an paymentMethod object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPaymentMethodByIdResponse>
   */
  getPaymentMethodById(companyId: string, paymentMethodId: string, options?: Models.Dynamics365BusinessCentralGetPaymentMethodByIdOptionalParams): Promise<Models.GetPaymentMethodByIdResponse>;
  /**
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param callback The callback
   */
  getPaymentMethodById(companyId: string, paymentMethodId: string, callback: msRest.ServiceCallback<Models.PaymentMethod>): void;
  /**
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param options The optional parameters
   * @param callback The callback
   */
  getPaymentMethodById(companyId: string, paymentMethodId: string, options: Models.Dynamics365BusinessCentralGetPaymentMethodByIdOptionalParams, callback: msRest.ServiceCallback<Models.PaymentMethod>): void;
  getPaymentMethodById(companyId: string, paymentMethodId: string, options?: Models.Dynamics365BusinessCentralGetPaymentMethodByIdOptionalParams | msRest.ServiceCallback<Models.PaymentMethod>, callback?: msRest.ServiceCallback<Models.PaymentMethod>): Promise<Models.GetPaymentMethodByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        paymentMethodId,
        options
      },
      getPaymentMethodByIdOperationSpec,
      callback) as Promise<Models.GetPaymentMethodByIdResponse>;
  }

  /**
   * @summary Delete an paymentMethod in Dynamics 365 Business Central
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePaymentMethodById(companyId: string, paymentMethodId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param callback The callback
   */
  deletePaymentMethodById(companyId: string, paymentMethodId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePaymentMethodById(companyId: string, paymentMethodId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePaymentMethodById(companyId: string, paymentMethodId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        paymentMethodId,
        options
      },
      deletePaymentMethodByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified paymentMethod
   * @param body
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPaymentMethodByIdResponse>
   */
  patchPaymentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentMethodId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPaymentMethodByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param callback The callback
   */
  patchPaymentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentMethodId: string, callback: msRest.ServiceCallback<Models.PaymentMethod>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param paymentMethodId id for paymentMethod
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPaymentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentMethodId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PaymentMethod>): void;
  patchPaymentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentMethodId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PaymentMethod>, callback?: msRest.ServiceCallback<Models.PaymentMethod>): Promise<Models.PatchPaymentMethodByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        paymentMethodId,
        options
      },
      patchPaymentMethodByIdOperationSpec,
      callback) as Promise<Models.PatchPaymentMethodByIdResponse>;
  }

  /**
   * @summary Returns a list of dimensions
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionsResponse>
   */
  getDimensions(companyId: string, options?: Models.Dynamics365BusinessCentralGetDimensionsOptionalParams): Promise<Models.GetDimensionsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getDimensions(companyId: string, callback: msRest.ServiceCallback<Models.GetDimensionsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensions(companyId: string, options: Models.Dynamics365BusinessCentralGetDimensionsOptionalParams, callback: msRest.ServiceCallback<Models.GetDimensionsOKResponse>): void;
  getDimensions(companyId: string, options?: Models.Dynamics365BusinessCentralGetDimensionsOptionalParams | msRest.ServiceCallback<Models.GetDimensionsOKResponse>, callback?: msRest.ServiceCallback<Models.GetDimensionsOKResponse>): Promise<Models.GetDimensionsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getDimensionsOperationSpec,
      callback) as Promise<Models.GetDimensionsResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an dimension object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionByIdResponse>
   */
  getDimensionById(companyId: string, dimensionId: string, options?: Models.Dynamics365BusinessCentralGetDimensionByIdOptionalParams): Promise<Models.GetDimensionByIdResponse>;
  /**
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param callback The callback
   */
  getDimensionById(companyId: string, dimensionId: string, callback: msRest.ServiceCallback<Models.Dimension>): void;
  /**
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensionById(companyId: string, dimensionId: string, options: Models.Dynamics365BusinessCentralGetDimensionByIdOptionalParams, callback: msRest.ServiceCallback<Models.Dimension>): void;
  getDimensionById(companyId: string, dimensionId: string, options?: Models.Dynamics365BusinessCentralGetDimensionByIdOptionalParams | msRest.ServiceCallback<Models.Dimension>, callback?: msRest.ServiceCallback<Models.Dimension>): Promise<Models.GetDimensionByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        dimensionId,
        options
      },
      getDimensionByIdOperationSpec,
      callback) as Promise<Models.GetDimensionByIdResponse>;
  }

  /**
   * @summary Returns a list of dimensionValues
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionValuesForDimensionResponse>
   */
  getDimensionValuesForDimension(companyId: string, dimensionId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValuesForDimensionOptionalParams): Promise<Models.GetDimensionValuesForDimensionResponse>;
  /**
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param callback The callback
   */
  getDimensionValuesForDimension(companyId: string, dimensionId: string, callback: msRest.ServiceCallback<Models.GetDimensionValuesForDimensionOKResponse>): void;
  /**
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensionValuesForDimension(companyId: string, dimensionId: string, options: Models.Dynamics365BusinessCentralGetDimensionValuesForDimensionOptionalParams, callback: msRest.ServiceCallback<Models.GetDimensionValuesForDimensionOKResponse>): void;
  getDimensionValuesForDimension(companyId: string, dimensionId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValuesForDimensionOptionalParams | msRest.ServiceCallback<Models.GetDimensionValuesForDimensionOKResponse>, callback?: msRest.ServiceCallback<Models.GetDimensionValuesForDimensionOKResponse>): Promise<Models.GetDimensionValuesForDimensionResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        dimensionId,
        options
      },
      getDimensionValuesForDimensionOperationSpec,
      callback) as Promise<Models.GetDimensionValuesForDimensionResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionValue object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param dimensionValueId id for dimensionValue
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionValueForDimensionByIdResponse>
   */
  getDimensionValueForDimensionById(companyId: string, dimensionId: string, dimensionValueId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValueForDimensionByIdOptionalParams): Promise<Models.GetDimensionValueForDimensionByIdResponse>;
  /**
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param dimensionValueId id for dimensionValue
   * @param callback The callback
   */
  getDimensionValueForDimensionById(companyId: string, dimensionId: string, dimensionValueId: string, callback: msRest.ServiceCallback<Models.DimensionValue>): void;
  /**
   * @param companyId id for company
   * @param dimensionId id for dimension
   * @param dimensionValueId id for dimensionValue
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensionValueForDimensionById(companyId: string, dimensionId: string, dimensionValueId: string, options: Models.Dynamics365BusinessCentralGetDimensionValueForDimensionByIdOptionalParams, callback: msRest.ServiceCallback<Models.DimensionValue>): void;
  getDimensionValueForDimensionById(companyId: string, dimensionId: string, dimensionValueId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValueForDimensionByIdOptionalParams | msRest.ServiceCallback<Models.DimensionValue>, callback?: msRest.ServiceCallback<Models.DimensionValue>): Promise<Models.GetDimensionValueForDimensionByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        dimensionId,
        dimensionValueId,
        options
      },
      getDimensionValueForDimensionByIdOperationSpec,
      callback) as Promise<Models.GetDimensionValueForDimensionByIdResponse>;
  }

  /**
   * @summary Returns a list of dimensionValues
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionValuesResponse>
   */
  getDimensionValues(companyId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValuesOptionalParams): Promise<Models.GetDimensionValuesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getDimensionValues(companyId: string, callback: msRest.ServiceCallback<Models.GetDimensionValuesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensionValues(companyId: string, options: Models.Dynamics365BusinessCentralGetDimensionValuesOptionalParams, callback: msRest.ServiceCallback<Models.GetDimensionValuesOKResponse>): void;
  getDimensionValues(companyId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValuesOptionalParams | msRest.ServiceCallback<Models.GetDimensionValuesOKResponse>, callback?: msRest.ServiceCallback<Models.GetDimensionValuesOKResponse>): Promise<Models.GetDimensionValuesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getDimensionValuesOperationSpec,
      callback) as Promise<Models.GetDimensionValuesResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionValue object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param dimensionValueId id for dimensionValue
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionValueByIdResponse>
   */
  getDimensionValueById(companyId: string, dimensionValueId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValueByIdOptionalParams): Promise<Models.GetDimensionValueByIdResponse>;
  /**
   * @param companyId id for company
   * @param dimensionValueId id for dimensionValue
   * @param callback The callback
   */
  getDimensionValueById(companyId: string, dimensionValueId: string, callback: msRest.ServiceCallback<Models.DimensionValue>): void;
  /**
   * @param companyId id for company
   * @param dimensionValueId id for dimensionValue
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensionValueById(companyId: string, dimensionValueId: string, options: Models.Dynamics365BusinessCentralGetDimensionValueByIdOptionalParams, callback: msRest.ServiceCallback<Models.DimensionValue>): void;
  getDimensionValueById(companyId: string, dimensionValueId: string, options?: Models.Dynamics365BusinessCentralGetDimensionValueByIdOptionalParams | msRest.ServiceCallback<Models.DimensionValue>, callback?: msRest.ServiceCallback<Models.DimensionValue>): Promise<Models.GetDimensionValueByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        dimensionValueId,
        options
      },
      getDimensionValueByIdOperationSpec,
      callback) as Promise<Models.GetDimensionValueByIdResponse>;
  }

  /**
   * @summary Returns a list of dimensionLines
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionLinesResponse>
   */
  getDimensionLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetDimensionLinesOptionalParams): Promise<Models.GetDimensionLinesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getDimensionLines(companyId: string, callback: msRest.ServiceCallback<Models.GetDimensionLinesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensionLines(companyId: string, options: Models.Dynamics365BusinessCentralGetDimensionLinesOptionalParams, callback: msRest.ServiceCallback<Models.GetDimensionLinesOKResponse>): void;
  getDimensionLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetDimensionLinesOptionalParams | msRest.ServiceCallback<Models.GetDimensionLinesOKResponse>, callback?: msRest.ServiceCallback<Models.GetDimensionLinesOKResponse>): Promise<Models.GetDimensionLinesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getDimensionLinesOperationSpec,
      callback) as Promise<Models.GetDimensionLinesResponse>;
  }

  /**
   * @summary Creates a dimensionLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostDimensionLineResponse>
   */
  postDimensionLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostDimensionLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postDimensionLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.DimensionLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postDimensionLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DimensionLine>): void;
  postDimensionLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DimensionLine>, callback?: msRest.ServiceCallback<Models.DimensionLine>): Promise<Models.PostDimensionLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postDimensionLineOperationSpec,
      callback) as Promise<Models.PostDimensionLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an dimensionLine object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDimensionLineByIdByParentIdResponse>
   */
  getDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, options?: Models.Dynamics365BusinessCentralGetDimensionLineByIdByParentIdOptionalParams): Promise<Models.GetDimensionLineByIdByParentIdResponse>;
  /**
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param callback The callback
   */
  getDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, callback: msRest.ServiceCallback<Models.DimensionLine>): void;
  /**
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, options: Models.Dynamics365BusinessCentralGetDimensionLineByIdByParentIdOptionalParams, callback: msRest.ServiceCallback<Models.DimensionLine>): void;
  getDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, options?: Models.Dynamics365BusinessCentralGetDimensionLineByIdByParentIdOptionalParams | msRest.ServiceCallback<Models.DimensionLine>, callback?: msRest.ServiceCallback<Models.DimensionLine>): Promise<Models.GetDimensionLineByIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        dimensionLineParentId,
        dimensionLineId,
        options
      },
      getDimensionLineByIdByParentIdOperationSpec,
      callback) as Promise<Models.GetDimensionLineByIdByParentIdResponse>;
  }

  /**
   * @summary Delete an dimensionLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param callback The callback
   */
  deleteDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDimensionLineByIdByParentId(companyId: string, dimensionLineParentId: string, dimensionLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        dimensionLineParentId,
        dimensionLineId,
        options
      },
      deleteDimensionLineByIdByParentIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified dimensionLine
   * @param body
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchDimensionLineByIdByParentIdResponse>
   */
  patchDimensionLineByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, dimensionLineParentId: string, dimensionLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchDimensionLineByIdByParentIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param callback The callback
   */
  patchDimensionLineByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, dimensionLineParentId: string, dimensionLineId: string, callback: msRest.ServiceCallback<Models.DimensionLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param dimensionLineParentId parentId for dimensionLine
   * @param dimensionLineId id for dimensionLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchDimensionLineByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, dimensionLineParentId: string, dimensionLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DimensionLine>): void;
  patchDimensionLineByIdByParentId(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, dimensionLineParentId: string, dimensionLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DimensionLine>, callback?: msRest.ServiceCallback<Models.DimensionLine>): Promise<Models.PatchDimensionLineByIdByParentIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        dimensionLineParentId,
        dimensionLineId,
        options
      },
      patchDimensionLineByIdByParentIdOperationSpec,
      callback) as Promise<Models.PatchDimensionLineByIdByParentIdResponse>;
  }

  /**
   * @summary Returns a list of paymentTerms
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPaymentTermsResponse>
   */
  getPaymentTerms(companyId: string, options?: Models.Dynamics365BusinessCentralGetPaymentTermsOptionalParams): Promise<Models.GetPaymentTermsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getPaymentTerms(companyId: string, callback: msRest.ServiceCallback<Models.GetPaymentTermsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getPaymentTerms(companyId: string, options: Models.Dynamics365BusinessCentralGetPaymentTermsOptionalParams, callback: msRest.ServiceCallback<Models.GetPaymentTermsOKResponse>): void;
  getPaymentTerms(companyId: string, options?: Models.Dynamics365BusinessCentralGetPaymentTermsOptionalParams | msRest.ServiceCallback<Models.GetPaymentTermsOKResponse>, callback?: msRest.ServiceCallback<Models.GetPaymentTermsOKResponse>): Promise<Models.GetPaymentTermsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getPaymentTermsOperationSpec,
      callback) as Promise<Models.GetPaymentTermsResponse>;
  }

  /**
   * @summary Creates a paymentTerm in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostPaymentTermResponse>
   */
  postPaymentTerm(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostPaymentTermResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postPaymentTerm(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.PaymentTerm>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postPaymentTerm(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PaymentTerm>): void;
  postPaymentTerm(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PaymentTerm>, callback?: msRest.ServiceCallback<Models.PaymentTerm>): Promise<Models.PostPaymentTermResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postPaymentTermOperationSpec,
      callback) as Promise<Models.PostPaymentTermResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an paymentTerm object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPaymentTermByIdResponse>
   */
  getPaymentTermById(companyId: string, paymentTermId: string, options?: Models.Dynamics365BusinessCentralGetPaymentTermByIdOptionalParams): Promise<Models.GetPaymentTermByIdResponse>;
  /**
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param callback The callback
   */
  getPaymentTermById(companyId: string, paymentTermId: string, callback: msRest.ServiceCallback<Models.PaymentTerm>): void;
  /**
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param options The optional parameters
   * @param callback The callback
   */
  getPaymentTermById(companyId: string, paymentTermId: string, options: Models.Dynamics365BusinessCentralGetPaymentTermByIdOptionalParams, callback: msRest.ServiceCallback<Models.PaymentTerm>): void;
  getPaymentTermById(companyId: string, paymentTermId: string, options?: Models.Dynamics365BusinessCentralGetPaymentTermByIdOptionalParams | msRest.ServiceCallback<Models.PaymentTerm>, callback?: msRest.ServiceCallback<Models.PaymentTerm>): Promise<Models.GetPaymentTermByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        paymentTermId,
        options
      },
      getPaymentTermByIdOperationSpec,
      callback) as Promise<Models.GetPaymentTermByIdResponse>;
  }

  /**
   * @summary Delete an paymentTerm in Dynamics 365 Business Central
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePaymentTermById(companyId: string, paymentTermId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param callback The callback
   */
  deletePaymentTermById(companyId: string, paymentTermId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePaymentTermById(companyId: string, paymentTermId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePaymentTermById(companyId: string, paymentTermId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        paymentTermId,
        options
      },
      deletePaymentTermByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified paymentTerm
   * @param body
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPaymentTermByIdResponse>
   */
  patchPaymentTermById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentTermId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPaymentTermByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param callback The callback
   */
  patchPaymentTermById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentTermId: string, callback: msRest.ServiceCallback<Models.PaymentTerm>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param paymentTermId id for paymentTerm
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPaymentTermById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentTermId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PaymentTerm>): void;
  patchPaymentTermById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, paymentTermId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PaymentTerm>, callback?: msRest.ServiceCallback<Models.PaymentTerm>): Promise<Models.PatchPaymentTermByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        paymentTermId,
        options
      },
      patchPaymentTermByIdOperationSpec,
      callback) as Promise<Models.PatchPaymentTermByIdResponse>;
  }

  /**
   * @summary Returns a list of shipmentMethods
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetShipmentMethodsResponse>
   */
  getShipmentMethods(companyId: string, options?: Models.Dynamics365BusinessCentralGetShipmentMethodsOptionalParams): Promise<Models.GetShipmentMethodsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getShipmentMethods(companyId: string, callback: msRest.ServiceCallback<Models.GetShipmentMethodsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getShipmentMethods(companyId: string, options: Models.Dynamics365BusinessCentralGetShipmentMethodsOptionalParams, callback: msRest.ServiceCallback<Models.GetShipmentMethodsOKResponse>): void;
  getShipmentMethods(companyId: string, options?: Models.Dynamics365BusinessCentralGetShipmentMethodsOptionalParams | msRest.ServiceCallback<Models.GetShipmentMethodsOKResponse>, callback?: msRest.ServiceCallback<Models.GetShipmentMethodsOKResponse>): Promise<Models.GetShipmentMethodsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getShipmentMethodsOperationSpec,
      callback) as Promise<Models.GetShipmentMethodsResponse>;
  }

  /**
   * @summary Creates a shipmentMethod in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostShipmentMethodResponse>
   */
  postShipmentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostShipmentMethodResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postShipmentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.ShipmentMethod>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postShipmentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShipmentMethod>): void;
  postShipmentMethod(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShipmentMethod>, callback?: msRest.ServiceCallback<Models.ShipmentMethod>): Promise<Models.PostShipmentMethodResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postShipmentMethodOperationSpec,
      callback) as Promise<Models.PostShipmentMethodResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an shipmentMethod object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param [options] The optional parameters
   * @returns Promise<Models.GetShipmentMethodByIdResponse>
   */
  getShipmentMethodById(companyId: string, shipmentMethodId: string, options?: Models.Dynamics365BusinessCentralGetShipmentMethodByIdOptionalParams): Promise<Models.GetShipmentMethodByIdResponse>;
  /**
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param callback The callback
   */
  getShipmentMethodById(companyId: string, shipmentMethodId: string, callback: msRest.ServiceCallback<Models.ShipmentMethod>): void;
  /**
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param options The optional parameters
   * @param callback The callback
   */
  getShipmentMethodById(companyId: string, shipmentMethodId: string, options: Models.Dynamics365BusinessCentralGetShipmentMethodByIdOptionalParams, callback: msRest.ServiceCallback<Models.ShipmentMethod>): void;
  getShipmentMethodById(companyId: string, shipmentMethodId: string, options?: Models.Dynamics365BusinessCentralGetShipmentMethodByIdOptionalParams | msRest.ServiceCallback<Models.ShipmentMethod>, callback?: msRest.ServiceCallback<Models.ShipmentMethod>): Promise<Models.GetShipmentMethodByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        shipmentMethodId,
        options
      },
      getShipmentMethodByIdOperationSpec,
      callback) as Promise<Models.GetShipmentMethodByIdResponse>;
  }

  /**
   * @summary Delete an shipmentMethod in Dynamics 365 Business Central
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteShipmentMethodById(companyId: string, shipmentMethodId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param callback The callback
   */
  deleteShipmentMethodById(companyId: string, shipmentMethodId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteShipmentMethodById(companyId: string, shipmentMethodId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteShipmentMethodById(companyId: string, shipmentMethodId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        shipmentMethodId,
        options
      },
      deleteShipmentMethodByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified shipmentMethod
   * @param body
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchShipmentMethodByIdResponse>
   */
  patchShipmentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, shipmentMethodId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchShipmentMethodByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param callback The callback
   */
  patchShipmentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, shipmentMethodId: string, callback: msRest.ServiceCallback<Models.ShipmentMethod>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param shipmentMethodId id for shipmentMethod
   * @param options The optional parameters
   * @param callback The callback
   */
  patchShipmentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, shipmentMethodId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShipmentMethod>): void;
  patchShipmentMethodById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, shipmentMethodId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShipmentMethod>, callback?: msRest.ServiceCallback<Models.ShipmentMethod>): Promise<Models.PatchShipmentMethodByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        shipmentMethodId,
        options
      },
      patchShipmentMethodByIdOperationSpec,
      callback) as Promise<Models.PatchShipmentMethodByIdResponse>;
  }

  /**
   * @summary Returns a list of itemCategories
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetItemCategoriesResponse>
   */
  getItemCategories(companyId: string, options?: Models.Dynamics365BusinessCentralGetItemCategoriesOptionalParams): Promise<Models.GetItemCategoriesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getItemCategories(companyId: string, callback: msRest.ServiceCallback<Models.GetItemCategoriesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getItemCategories(companyId: string, options: Models.Dynamics365BusinessCentralGetItemCategoriesOptionalParams, callback: msRest.ServiceCallback<Models.GetItemCategoriesOKResponse>): void;
  getItemCategories(companyId: string, options?: Models.Dynamics365BusinessCentralGetItemCategoriesOptionalParams | msRest.ServiceCallback<Models.GetItemCategoriesOKResponse>, callback?: msRest.ServiceCallback<Models.GetItemCategoriesOKResponse>): Promise<Models.GetItemCategoriesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getItemCategoriesOperationSpec,
      callback) as Promise<Models.GetItemCategoriesResponse>;
  }

  /**
   * @summary Creates a itemCategory in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostItemCategoryResponse>
   */
  postItemCategory(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostItemCategoryResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postItemCategory(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.ItemCategory>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postItemCategory(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ItemCategory>): void;
  postItemCategory(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ItemCategory>, callback?: msRest.ServiceCallback<Models.ItemCategory>): Promise<Models.PostItemCategoryResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postItemCategoryOperationSpec,
      callback) as Promise<Models.PostItemCategoryResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an itemCategory object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param [options] The optional parameters
   * @returns Promise<Models.GetItemCategoryByIdResponse>
   */
  getItemCategoryById(companyId: string, itemCategoryId: string, options?: Models.Dynamics365BusinessCentralGetItemCategoryByIdOptionalParams): Promise<Models.GetItemCategoryByIdResponse>;
  /**
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param callback The callback
   */
  getItemCategoryById(companyId: string, itemCategoryId: string, callback: msRest.ServiceCallback<Models.ItemCategory>): void;
  /**
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param options The optional parameters
   * @param callback The callback
   */
  getItemCategoryById(companyId: string, itemCategoryId: string, options: Models.Dynamics365BusinessCentralGetItemCategoryByIdOptionalParams, callback: msRest.ServiceCallback<Models.ItemCategory>): void;
  getItemCategoryById(companyId: string, itemCategoryId: string, options?: Models.Dynamics365BusinessCentralGetItemCategoryByIdOptionalParams | msRest.ServiceCallback<Models.ItemCategory>, callback?: msRest.ServiceCallback<Models.ItemCategory>): Promise<Models.GetItemCategoryByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemCategoryId,
        options
      },
      getItemCategoryByIdOperationSpec,
      callback) as Promise<Models.GetItemCategoryByIdResponse>;
  }

  /**
   * @summary Delete an itemCategory in Dynamics 365 Business Central
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteItemCategoryById(companyId: string, itemCategoryId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param callback The callback
   */
  deleteItemCategoryById(companyId: string, itemCategoryId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteItemCategoryById(companyId: string, itemCategoryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteItemCategoryById(companyId: string, itemCategoryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        itemCategoryId,
        options
      },
      deleteItemCategoryByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified itemCategory
   * @param body
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchItemCategoryByIdResponse>
   */
  patchItemCategoryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, itemCategoryId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchItemCategoryByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param callback The callback
   */
  patchItemCategoryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, itemCategoryId: string, callback: msRest.ServiceCallback<Models.ItemCategory>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param itemCategoryId id for itemCategory
   * @param options The optional parameters
   * @param callback The callback
   */
  patchItemCategoryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, itemCategoryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ItemCategory>): void;
  patchItemCategoryById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, itemCategoryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ItemCategory>, callback?: msRest.ServiceCallback<Models.ItemCategory>): Promise<Models.PatchItemCategoryByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        itemCategoryId,
        options
      },
      patchItemCategoryByIdOperationSpec,
      callback) as Promise<Models.PatchItemCategoryByIdResponse>;
  }

  /**
   * @summary Returns a list of cashFlowStatement
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCashFlowStatementResponse>
   */
  getCashFlowStatement(companyId: string, options?: Models.Dynamics365BusinessCentralGetCashFlowStatementOptionalParams): Promise<Models.GetCashFlowStatementResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCashFlowStatement(companyId: string, callback: msRest.ServiceCallback<Models.GetCashFlowStatementOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCashFlowStatement(companyId: string, options: Models.Dynamics365BusinessCentralGetCashFlowStatementOptionalParams, callback: msRest.ServiceCallback<Models.GetCashFlowStatementOKResponse>): void;
  getCashFlowStatement(companyId: string, options?: Models.Dynamics365BusinessCentralGetCashFlowStatementOptionalParams | msRest.ServiceCallback<Models.GetCashFlowStatementOKResponse>, callback?: msRest.ServiceCallback<Models.GetCashFlowStatementOKResponse>): Promise<Models.GetCashFlowStatementResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCashFlowStatementOperationSpec,
      callback) as Promise<Models.GetCashFlowStatementResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an cashFlowStatement object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param cashFlowStatementLineNumber lineNumber for cashFlowStatement
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCashFlowStatementByLineNumberResponse>
   */
  getCashFlowStatementByLineNumber(companyId: string, cashFlowStatementLineNumber: number, options?: Models.Dynamics365BusinessCentralGetCashFlowStatementByLineNumberOptionalParams): Promise<Models.GetCashFlowStatementByLineNumberResponse>;
  /**
   * @param companyId id for company
   * @param cashFlowStatementLineNumber lineNumber for cashFlowStatement
   * @param callback The callback
   */
  getCashFlowStatementByLineNumber(companyId: string, cashFlowStatementLineNumber: number, callback: msRest.ServiceCallback<Models.CashFlowStatement>): void;
  /**
   * @param companyId id for company
   * @param cashFlowStatementLineNumber lineNumber for cashFlowStatement
   * @param options The optional parameters
   * @param callback The callback
   */
  getCashFlowStatementByLineNumber(companyId: string, cashFlowStatementLineNumber: number, options: Models.Dynamics365BusinessCentralGetCashFlowStatementByLineNumberOptionalParams, callback: msRest.ServiceCallback<Models.CashFlowStatement>): void;
  getCashFlowStatementByLineNumber(companyId: string, cashFlowStatementLineNumber: number, options?: Models.Dynamics365BusinessCentralGetCashFlowStatementByLineNumberOptionalParams | msRest.ServiceCallback<Models.CashFlowStatement>, callback?: msRest.ServiceCallback<Models.CashFlowStatement>): Promise<Models.GetCashFlowStatementByLineNumberResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        cashFlowStatementLineNumber,
        options
      },
      getCashFlowStatementByLineNumberOperationSpec,
      callback) as Promise<Models.GetCashFlowStatementByLineNumberResponse>;
  }

  /**
   * @summary Returns a list of countriesRegions
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCountriesRegionsResponse>
   */
  getCountriesRegions(companyId: string, options?: Models.Dynamics365BusinessCentralGetCountriesRegionsOptionalParams): Promise<Models.GetCountriesRegionsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCountriesRegions(companyId: string, callback: msRest.ServiceCallback<Models.GetCountriesRegionsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCountriesRegions(companyId: string, options: Models.Dynamics365BusinessCentralGetCountriesRegionsOptionalParams, callback: msRest.ServiceCallback<Models.GetCountriesRegionsOKResponse>): void;
  getCountriesRegions(companyId: string, options?: Models.Dynamics365BusinessCentralGetCountriesRegionsOptionalParams | msRest.ServiceCallback<Models.GetCountriesRegionsOKResponse>, callback?: msRest.ServiceCallback<Models.GetCountriesRegionsOKResponse>): Promise<Models.GetCountriesRegionsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCountriesRegionsOperationSpec,
      callback) as Promise<Models.GetCountriesRegionsResponse>;
  }

  /**
   * @summary Creates a countryRegion in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostCountryRegionResponse>
   */
  postCountryRegion(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostCountryRegionResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postCountryRegion(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.CountryRegion>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postCountryRegion(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CountryRegion>): void;
  postCountryRegion(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CountryRegion>, callback?: msRest.ServiceCallback<Models.CountryRegion>): Promise<Models.PostCountryRegionResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postCountryRegionOperationSpec,
      callback) as Promise<Models.PostCountryRegionResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an countryRegion object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCountryRegionByIdResponse>
   */
  getCountryRegionById(companyId: string, countryRegionId: string, options?: Models.Dynamics365BusinessCentralGetCountryRegionByIdOptionalParams): Promise<Models.GetCountryRegionByIdResponse>;
  /**
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param callback The callback
   */
  getCountryRegionById(companyId: string, countryRegionId: string, callback: msRest.ServiceCallback<Models.CountryRegion>): void;
  /**
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param options The optional parameters
   * @param callback The callback
   */
  getCountryRegionById(companyId: string, countryRegionId: string, options: Models.Dynamics365BusinessCentralGetCountryRegionByIdOptionalParams, callback: msRest.ServiceCallback<Models.CountryRegion>): void;
  getCountryRegionById(companyId: string, countryRegionId: string, options?: Models.Dynamics365BusinessCentralGetCountryRegionByIdOptionalParams | msRest.ServiceCallback<Models.CountryRegion>, callback?: msRest.ServiceCallback<Models.CountryRegion>): Promise<Models.GetCountryRegionByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        countryRegionId,
        options
      },
      getCountryRegionByIdOperationSpec,
      callback) as Promise<Models.GetCountryRegionByIdResponse>;
  }

  /**
   * @summary Delete an countryRegion in Dynamics 365 Business Central
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteCountryRegionById(companyId: string, countryRegionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param callback The callback
   */
  deleteCountryRegionById(companyId: string, countryRegionId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCountryRegionById(companyId: string, countryRegionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteCountryRegionById(companyId: string, countryRegionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        countryRegionId,
        options
      },
      deleteCountryRegionByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified countryRegion
   * @param body
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchCountryRegionByIdResponse>
   */
  patchCountryRegionById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, countryRegionId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchCountryRegionByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param callback The callback
   */
  patchCountryRegionById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, countryRegionId: string, callback: msRest.ServiceCallback<Models.CountryRegion>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param countryRegionId id for countryRegion
   * @param options The optional parameters
   * @param callback The callback
   */
  patchCountryRegionById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, countryRegionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CountryRegion>): void;
  patchCountryRegionById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, countryRegionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CountryRegion>, callback?: msRest.ServiceCallback<Models.CountryRegion>): Promise<Models.PatchCountryRegionByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        countryRegionId,
        options
      },
      patchCountryRegionByIdOperationSpec,
      callback) as Promise<Models.PatchCountryRegionByIdResponse>;
  }

  /**
   * @summary Returns a list of salesOrders
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesOrdersResponse>
   */
  getSalesOrders(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrdersOptionalParams): Promise<Models.GetSalesOrdersResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesOrders(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesOrdersOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesOrders(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesOrdersOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesOrdersOKResponse>): void;
  getSalesOrders(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrdersOptionalParams | msRest.ServiceCallback<Models.GetSalesOrdersOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesOrdersOKResponse>): Promise<Models.GetSalesOrdersResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesOrdersOperationSpec,
      callback) as Promise<Models.GetSalesOrdersResponse>;
  }

  /**
   * @summary Creates a salesOrder in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesOrderResponse>
   */
  postSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesOrderResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesOrder>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesOrder>): void;
  postSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesOrder>, callback?: msRest.ServiceCallback<Models.SalesOrder>): Promise<Models.PostSalesOrderResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesOrderOperationSpec,
      callback) as Promise<Models.PostSalesOrderResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrder object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesOrderByIdResponse>
   */
  getSalesOrderById(companyId: string, salesOrderId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderByIdOptionalParams): Promise<Models.GetSalesOrderByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param callback The callback
   */
  getSalesOrderById(companyId: string, salesOrderId: string, callback: msRest.ServiceCallback<Models.SalesOrder>): void;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesOrderById(companyId: string, salesOrderId: string, options: Models.Dynamics365BusinessCentralGetSalesOrderByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesOrder>): void;
  getSalesOrderById(companyId: string, salesOrderId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderByIdOptionalParams | msRest.ServiceCallback<Models.SalesOrder>, callback?: msRest.ServiceCallback<Models.SalesOrder>): Promise<Models.GetSalesOrderByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesOrderId,
        options
      },
      getSalesOrderByIdOperationSpec,
      callback) as Promise<Models.GetSalesOrderByIdResponse>;
  }

  /**
   * @summary Delete an salesOrder in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesOrderById(companyId: string, salesOrderId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param callback The callback
   */
  deleteSalesOrderById(companyId: string, salesOrderId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesOrderById(companyId: string, salesOrderId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesOrderById(companyId: string, salesOrderId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesOrderId,
        options
      },
      deleteSalesOrderByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesOrder
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesOrderByIdResponse>
   */
  patchSalesOrderById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesOrderByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param callback The callback
   */
  patchSalesOrderById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, callback: msRest.ServiceCallback<Models.SalesOrder>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesOrderById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesOrder>): void;
  patchSalesOrderById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesOrder>, callback?: msRest.ServiceCallback<Models.SalesOrder>): Promise<Models.PatchSalesOrderByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesOrderId,
        options
      },
      patchSalesOrderByIdOperationSpec,
      callback) as Promise<Models.PatchSalesOrderByIdResponse>;
  }

  /**
   * @summary Returns a list of salesOrderLines
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesOrderLinesForSalesOrderResponse>
   */
  getSalesOrderLinesForSalesOrder(companyId: string, salesOrderId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLinesForSalesOrderOptionalParams): Promise<Models.GetSalesOrderLinesForSalesOrderResponse>;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param callback The callback
   */
  getSalesOrderLinesForSalesOrder(companyId: string, salesOrderId: string, callback: msRest.ServiceCallback<Models.GetSalesOrderLinesForSalesOrderOKResponse>): void;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesOrderLinesForSalesOrder(companyId: string, salesOrderId: string, options: Models.Dynamics365BusinessCentralGetSalesOrderLinesForSalesOrderOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesOrderLinesForSalesOrderOKResponse>): void;
  getSalesOrderLinesForSalesOrder(companyId: string, salesOrderId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLinesForSalesOrderOptionalParams | msRest.ServiceCallback<Models.GetSalesOrderLinesForSalesOrderOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesOrderLinesForSalesOrderOKResponse>): Promise<Models.GetSalesOrderLinesForSalesOrderResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesOrderId,
        options
      },
      getSalesOrderLinesForSalesOrderOperationSpec,
      callback) as Promise<Models.GetSalesOrderLinesForSalesOrderResponse>;
  }

  /**
   * @summary Creates a salesOrderLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesOrderLineForSalesOrderResponse>
   */
  postSalesOrderLineForSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesOrderLineForSalesOrderResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param callback The callback
   */
  postSalesOrderLineForSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesOrderLineForSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  postSalesOrderLineForSalesOrder(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesOrderLine>, callback?: msRest.ServiceCallback<Models.SalesOrderLine>): Promise<Models.PostSalesOrderLineForSalesOrderResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesOrderId,
        options
      },
      postSalesOrderLineForSalesOrderOperationSpec,
      callback) as Promise<Models.PostSalesOrderLineForSalesOrderResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrderLine object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesOrderLineForSalesOrderByIdResponse>
   */
  getSalesOrderLineForSalesOrderById(companyId: string, salesOrderId: string, salesOrderLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLineForSalesOrderByIdOptionalParams): Promise<Models.GetSalesOrderLineForSalesOrderByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param callback The callback
   */
  getSalesOrderLineForSalesOrderById(companyId: string, salesOrderId: string, salesOrderLineId: string, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesOrderLineForSalesOrderById(companyId: string, salesOrderId: string, salesOrderLineId: string, options: Models.Dynamics365BusinessCentralGetSalesOrderLineForSalesOrderByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  getSalesOrderLineForSalesOrderById(companyId: string, salesOrderId: string, salesOrderLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLineForSalesOrderByIdOptionalParams | msRest.ServiceCallback<Models.SalesOrderLine>, callback?: msRest.ServiceCallback<Models.SalesOrderLine>): Promise<Models.GetSalesOrderLineForSalesOrderByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesOrderId,
        salesOrderLineId,
        options
      },
      getSalesOrderLineForSalesOrderByIdOperationSpec,
      callback) as Promise<Models.GetSalesOrderLineForSalesOrderByIdResponse>;
  }

  /**
   * @summary Delete an salesOrderLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesOrderLineForSalesOrderByIdById(companyId: string, salesOrderId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param callback The callback
   */
  deleteSalesOrderLineForSalesOrderByIdById(companyId: string, salesOrderId: string, salesOrderLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesOrderLineForSalesOrderByIdById(companyId: string, salesOrderId: string, salesOrderLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesOrderLineForSalesOrderByIdById(companyId: string, salesOrderId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesOrderId,
        salesOrderLineId,
        options
      },
      deleteSalesOrderLineForSalesOrderByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesOrderLine
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesOrderLineForSalesOrderByIdByIdResponse>
   */
  patchSalesOrderLineForSalesOrderByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesOrderLineForSalesOrderByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param callback The callback
   */
  patchSalesOrderLineForSalesOrderByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, salesOrderLineId: string, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderId id for salesOrder
   * @param salesOrderLineId id for salesOrderLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesOrderLineForSalesOrderByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, salesOrderLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  patchSalesOrderLineForSalesOrderByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesOrderLine>, callback?: msRest.ServiceCallback<Models.SalesOrderLine>): Promise<Models.PatchSalesOrderLineForSalesOrderByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesOrderId,
        salesOrderLineId,
        options
      },
      patchSalesOrderLineForSalesOrderByIdByIdOperationSpec,
      callback) as Promise<Models.PatchSalesOrderLineForSalesOrderByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of salesOrderLines
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesOrderLinesResponse>
   */
  getSalesOrderLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLinesOptionalParams): Promise<Models.GetSalesOrderLinesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesOrderLines(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesOrderLinesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesOrderLines(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesOrderLinesOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesOrderLinesOKResponse>): void;
  getSalesOrderLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLinesOptionalParams | msRest.ServiceCallback<Models.GetSalesOrderLinesOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesOrderLinesOKResponse>): Promise<Models.GetSalesOrderLinesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesOrderLinesOperationSpec,
      callback) as Promise<Models.GetSalesOrderLinesResponse>;
  }

  /**
   * @summary Creates a salesOrderLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesOrderLineResponse>
   */
  postSalesOrderLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesOrderLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesOrderLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesOrderLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  postSalesOrderLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesOrderLine>, callback?: msRest.ServiceCallback<Models.SalesOrderLine>): Promise<Models.PostSalesOrderLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesOrderLineOperationSpec,
      callback) as Promise<Models.PostSalesOrderLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesOrderLine object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesOrderLineByIdResponse>
   */
  getSalesOrderLineById(companyId: string, salesOrderLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLineByIdOptionalParams): Promise<Models.GetSalesOrderLineByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param callback The callback
   */
  getSalesOrderLineById(companyId: string, salesOrderLineId: string, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  /**
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesOrderLineById(companyId: string, salesOrderLineId: string, options: Models.Dynamics365BusinessCentralGetSalesOrderLineByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  getSalesOrderLineById(companyId: string, salesOrderLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesOrderLineByIdOptionalParams | msRest.ServiceCallback<Models.SalesOrderLine>, callback?: msRest.ServiceCallback<Models.SalesOrderLine>): Promise<Models.GetSalesOrderLineByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesOrderLineId,
        options
      },
      getSalesOrderLineByIdOperationSpec,
      callback) as Promise<Models.GetSalesOrderLineByIdResponse>;
  }

  /**
   * @summary Delete an salesOrderLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesOrderLineById(companyId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param callback The callback
   */
  deleteSalesOrderLineById(companyId: string, salesOrderLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesOrderLineById(companyId: string, salesOrderLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesOrderLineById(companyId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesOrderLineId,
        options
      },
      deleteSalesOrderLineByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesOrderLine
   * @param body
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesOrderLineByIdResponse>
   */
  patchSalesOrderLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesOrderLineByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param callback The callback
   */
  patchSalesOrderLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderLineId: string, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesOrderLineId id for salesOrderLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesOrderLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesOrderLine>): void;
  patchSalesOrderLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesOrderLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesOrderLine>, callback?: msRest.ServiceCallback<Models.SalesOrderLine>): Promise<Models.PatchSalesOrderLineByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesOrderLineId,
        options
      },
      patchSalesOrderLineByIdOperationSpec,
      callback) as Promise<Models.PatchSalesOrderLineByIdResponse>;
  }

  /**
   * @summary Returns a list of retainedEarningsStatement
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRetainedEarningsStatementResponse>
   */
  getRetainedEarningsStatement(companyId: string, options?: Models.Dynamics365BusinessCentralGetRetainedEarningsStatementOptionalParams): Promise<Models.GetRetainedEarningsStatementResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getRetainedEarningsStatement(companyId: string, callback: msRest.ServiceCallback<Models.GetRetainedEarningsStatementOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getRetainedEarningsStatement(companyId: string, options: Models.Dynamics365BusinessCentralGetRetainedEarningsStatementOptionalParams, callback: msRest.ServiceCallback<Models.GetRetainedEarningsStatementOKResponse>): void;
  getRetainedEarningsStatement(companyId: string, options?: Models.Dynamics365BusinessCentralGetRetainedEarningsStatementOptionalParams | msRest.ServiceCallback<Models.GetRetainedEarningsStatementOKResponse>, callback?: msRest.ServiceCallback<Models.GetRetainedEarningsStatementOKResponse>): Promise<Models.GetRetainedEarningsStatementResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getRetainedEarningsStatementOperationSpec,
      callback) as Promise<Models.GetRetainedEarningsStatementResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an retainedEarningsStatement object for
   * Dynamics 365 Business Central.
   * @param companyId id for company
   * @param retainedEarningsStatementLineNumber lineNumber for retainedEarningsStatement
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRetainedEarningsStatementByLineNumberResponse>
   */
  getRetainedEarningsStatementByLineNumber(companyId: string, retainedEarningsStatementLineNumber: number, options?: Models.Dynamics365BusinessCentralGetRetainedEarningsStatementByLineNumberOptionalParams): Promise<Models.GetRetainedEarningsStatementByLineNumberResponse>;
  /**
   * @param companyId id for company
   * @param retainedEarningsStatementLineNumber lineNumber for retainedEarningsStatement
   * @param callback The callback
   */
  getRetainedEarningsStatementByLineNumber(companyId: string, retainedEarningsStatementLineNumber: number, callback: msRest.ServiceCallback<Models.RetainedEarningsStatement>): void;
  /**
   * @param companyId id for company
   * @param retainedEarningsStatementLineNumber lineNumber for retainedEarningsStatement
   * @param options The optional parameters
   * @param callback The callback
   */
  getRetainedEarningsStatementByLineNumber(companyId: string, retainedEarningsStatementLineNumber: number, options: Models.Dynamics365BusinessCentralGetRetainedEarningsStatementByLineNumberOptionalParams, callback: msRest.ServiceCallback<Models.RetainedEarningsStatement>): void;
  getRetainedEarningsStatementByLineNumber(companyId: string, retainedEarningsStatementLineNumber: number, options?: Models.Dynamics365BusinessCentralGetRetainedEarningsStatementByLineNumberOptionalParams | msRest.ServiceCallback<Models.RetainedEarningsStatement>, callback?: msRest.ServiceCallback<Models.RetainedEarningsStatement>): Promise<Models.GetRetainedEarningsStatementByLineNumberResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        retainedEarningsStatementLineNumber,
        options
      },
      getRetainedEarningsStatementByLineNumberOperationSpec,
      callback) as Promise<Models.GetRetainedEarningsStatementByLineNumberResponse>;
  }

  /**
   * @summary Returns a list of unitsOfMeasure
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUnitsOfMeasureResponse>
   */
  getUnitsOfMeasure(companyId: string, options?: Models.Dynamics365BusinessCentralGetUnitsOfMeasureOptionalParams): Promise<Models.GetUnitsOfMeasureResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getUnitsOfMeasure(companyId: string, callback: msRest.ServiceCallback<Models.GetUnitsOfMeasureOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getUnitsOfMeasure(companyId: string, options: Models.Dynamics365BusinessCentralGetUnitsOfMeasureOptionalParams, callback: msRest.ServiceCallback<Models.GetUnitsOfMeasureOKResponse>): void;
  getUnitsOfMeasure(companyId: string, options?: Models.Dynamics365BusinessCentralGetUnitsOfMeasureOptionalParams | msRest.ServiceCallback<Models.GetUnitsOfMeasureOKResponse>, callback?: msRest.ServiceCallback<Models.GetUnitsOfMeasureOKResponse>): Promise<Models.GetUnitsOfMeasureResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getUnitsOfMeasureOperationSpec,
      callback) as Promise<Models.GetUnitsOfMeasureResponse>;
  }

  /**
   * @summary Creates a unitOfMeasure in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostUnitOfMeasureResponse>
   */
  postUnitOfMeasure(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostUnitOfMeasureResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postUnitOfMeasure(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.UnitOfMeasure>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postUnitOfMeasure(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UnitOfMeasure>): void;
  postUnitOfMeasure(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UnitOfMeasure>, callback?: msRest.ServiceCallback<Models.UnitOfMeasure>): Promise<Models.PostUnitOfMeasureResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postUnitOfMeasureOperationSpec,
      callback) as Promise<Models.PostUnitOfMeasureResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an unitOfMeasure object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUnitOfMeasureByIdResponse>
   */
  getUnitOfMeasureById(companyId: string, unitOfMeasureId: string, options?: Models.Dynamics365BusinessCentralGetUnitOfMeasureByIdOptionalParams): Promise<Models.GetUnitOfMeasureByIdResponse>;
  /**
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param callback The callback
   */
  getUnitOfMeasureById(companyId: string, unitOfMeasureId: string, callback: msRest.ServiceCallback<Models.UnitOfMeasure>): void;
  /**
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param options The optional parameters
   * @param callback The callback
   */
  getUnitOfMeasureById(companyId: string, unitOfMeasureId: string, options: Models.Dynamics365BusinessCentralGetUnitOfMeasureByIdOptionalParams, callback: msRest.ServiceCallback<Models.UnitOfMeasure>): void;
  getUnitOfMeasureById(companyId: string, unitOfMeasureId: string, options?: Models.Dynamics365BusinessCentralGetUnitOfMeasureByIdOptionalParams | msRest.ServiceCallback<Models.UnitOfMeasure>, callback?: msRest.ServiceCallback<Models.UnitOfMeasure>): Promise<Models.GetUnitOfMeasureByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        unitOfMeasureId,
        options
      },
      getUnitOfMeasureByIdOperationSpec,
      callback) as Promise<Models.GetUnitOfMeasureByIdResponse>;
  }

  /**
   * @summary Delete an unitOfMeasure in Dynamics 365 Business Central
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteUnitOfMeasureById(companyId: string, unitOfMeasureId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param callback The callback
   */
  deleteUnitOfMeasureById(companyId: string, unitOfMeasureId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUnitOfMeasureById(companyId: string, unitOfMeasureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteUnitOfMeasureById(companyId: string, unitOfMeasureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        unitOfMeasureId,
        options
      },
      deleteUnitOfMeasureByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified unitOfMeasure
   * @param body
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchUnitOfMeasureByIdResponse>
   */
  patchUnitOfMeasureById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, unitOfMeasureId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchUnitOfMeasureByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param callback The callback
   */
  patchUnitOfMeasureById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, unitOfMeasureId: string, callback: msRest.ServiceCallback<Models.UnitOfMeasure>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param unitOfMeasureId id for unitOfMeasure
   * @param options The optional parameters
   * @param callback The callback
   */
  patchUnitOfMeasureById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, unitOfMeasureId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UnitOfMeasure>): void;
  patchUnitOfMeasureById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, unitOfMeasureId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UnitOfMeasure>, callback?: msRest.ServiceCallback<Models.UnitOfMeasure>): Promise<Models.PatchUnitOfMeasureByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        unitOfMeasureId,
        options
      },
      patchUnitOfMeasureByIdOperationSpec,
      callback) as Promise<Models.PatchUnitOfMeasureByIdResponse>;
  }

  /**
   * @summary Returns a list of agedAccountsReceivable
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAgedAccountsReceivableResponse>
   */
  getAgedAccountsReceivable(companyId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsReceivableOptionalParams): Promise<Models.GetAgedAccountsReceivableResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getAgedAccountsReceivable(companyId: string, callback: msRest.ServiceCallback<Models.GetAgedAccountsReceivableOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgedAccountsReceivable(companyId: string, options: Models.Dynamics365BusinessCentralGetAgedAccountsReceivableOptionalParams, callback: msRest.ServiceCallback<Models.GetAgedAccountsReceivableOKResponse>): void;
  getAgedAccountsReceivable(companyId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsReceivableOptionalParams | msRest.ServiceCallback<Models.GetAgedAccountsReceivableOKResponse>, callback?: msRest.ServiceCallback<Models.GetAgedAccountsReceivableOKResponse>): Promise<Models.GetAgedAccountsReceivableResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getAgedAccountsReceivableOperationSpec,
      callback) as Promise<Models.GetAgedAccountsReceivableResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an agedAccountsReceivable object for
   * Dynamics 365 Business Central.
   * @param companyId id for company
   * @param agedAccountsReceivableCustomerId customerId for agedAccountsReceivable
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAgedAccountsReceivableByCustomerIdResponse>
   */
  getAgedAccountsReceivableByCustomerId(companyId: string, agedAccountsReceivableCustomerId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsReceivableByCustomerIdOptionalParams): Promise<Models.GetAgedAccountsReceivableByCustomerIdResponse>;
  /**
   * @param companyId id for company
   * @param agedAccountsReceivableCustomerId customerId for agedAccountsReceivable
   * @param callback The callback
   */
  getAgedAccountsReceivableByCustomerId(companyId: string, agedAccountsReceivableCustomerId: string, callback: msRest.ServiceCallback<Models.AgedAccountsReceivable>): void;
  /**
   * @param companyId id for company
   * @param agedAccountsReceivableCustomerId customerId for agedAccountsReceivable
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgedAccountsReceivableByCustomerId(companyId: string, agedAccountsReceivableCustomerId: string, options: Models.Dynamics365BusinessCentralGetAgedAccountsReceivableByCustomerIdOptionalParams, callback: msRest.ServiceCallback<Models.AgedAccountsReceivable>): void;
  getAgedAccountsReceivableByCustomerId(companyId: string, agedAccountsReceivableCustomerId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsReceivableByCustomerIdOptionalParams | msRest.ServiceCallback<Models.AgedAccountsReceivable>, callback?: msRest.ServiceCallback<Models.AgedAccountsReceivable>): Promise<Models.GetAgedAccountsReceivableByCustomerIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        agedAccountsReceivableCustomerId,
        options
      },
      getAgedAccountsReceivableByCustomerIdOperationSpec,
      callback) as Promise<Models.GetAgedAccountsReceivableByCustomerIdResponse>;
  }

  /**
   * @summary Returns a list of agedAccountsPayable
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAgedAccountsPayableResponse>
   */
  getAgedAccountsPayable(companyId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsPayableOptionalParams): Promise<Models.GetAgedAccountsPayableResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getAgedAccountsPayable(companyId: string, callback: msRest.ServiceCallback<Models.GetAgedAccountsPayableOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgedAccountsPayable(companyId: string, options: Models.Dynamics365BusinessCentralGetAgedAccountsPayableOptionalParams, callback: msRest.ServiceCallback<Models.GetAgedAccountsPayableOKResponse>): void;
  getAgedAccountsPayable(companyId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsPayableOptionalParams | msRest.ServiceCallback<Models.GetAgedAccountsPayableOKResponse>, callback?: msRest.ServiceCallback<Models.GetAgedAccountsPayableOKResponse>): Promise<Models.GetAgedAccountsPayableResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getAgedAccountsPayableOperationSpec,
      callback) as Promise<Models.GetAgedAccountsPayableResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an agedAccountsPayable object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param agedAccountsPayableVendorId vendorId for agedAccountsPayable
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAgedAccountsPayableByVendorIdResponse>
   */
  getAgedAccountsPayableByVendorId(companyId: string, agedAccountsPayableVendorId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsPayableByVendorIdOptionalParams): Promise<Models.GetAgedAccountsPayableByVendorIdResponse>;
  /**
   * @param companyId id for company
   * @param agedAccountsPayableVendorId vendorId for agedAccountsPayable
   * @param callback The callback
   */
  getAgedAccountsPayableByVendorId(companyId: string, agedAccountsPayableVendorId: string, callback: msRest.ServiceCallback<Models.AgedAccountsPayable>): void;
  /**
   * @param companyId id for company
   * @param agedAccountsPayableVendorId vendorId for agedAccountsPayable
   * @param options The optional parameters
   * @param callback The callback
   */
  getAgedAccountsPayableByVendorId(companyId: string, agedAccountsPayableVendorId: string, options: Models.Dynamics365BusinessCentralGetAgedAccountsPayableByVendorIdOptionalParams, callback: msRest.ServiceCallback<Models.AgedAccountsPayable>): void;
  getAgedAccountsPayableByVendorId(companyId: string, agedAccountsPayableVendorId: string, options?: Models.Dynamics365BusinessCentralGetAgedAccountsPayableByVendorIdOptionalParams | msRest.ServiceCallback<Models.AgedAccountsPayable>, callback?: msRest.ServiceCallback<Models.AgedAccountsPayable>): Promise<Models.GetAgedAccountsPayableByVendorIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        agedAccountsPayableVendorId,
        options
      },
      getAgedAccountsPayableByVendorIdOperationSpec,
      callback) as Promise<Models.GetAgedAccountsPayableByVendorIdResponse>;
  }

  /**
   * @summary Returns a list of balanceSheet
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBalanceSheetResponse>
   */
  getBalanceSheet(companyId: string, options?: Models.Dynamics365BusinessCentralGetBalanceSheetOptionalParams): Promise<Models.GetBalanceSheetResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getBalanceSheet(companyId: string, callback: msRest.ServiceCallback<Models.GetBalanceSheetOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getBalanceSheet(companyId: string, options: Models.Dynamics365BusinessCentralGetBalanceSheetOptionalParams, callback: msRest.ServiceCallback<Models.GetBalanceSheetOKResponse>): void;
  getBalanceSheet(companyId: string, options?: Models.Dynamics365BusinessCentralGetBalanceSheetOptionalParams | msRest.ServiceCallback<Models.GetBalanceSheetOKResponse>, callback?: msRest.ServiceCallback<Models.GetBalanceSheetOKResponse>): Promise<Models.GetBalanceSheetResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getBalanceSheetOperationSpec,
      callback) as Promise<Models.GetBalanceSheetResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an balanceSheet object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param balanceSheetLineNumber lineNumber for balanceSheet
   * @param [options] The optional parameters
   * @returns Promise<Models.GetBalanceSheetByLineNumberResponse>
   */
  getBalanceSheetByLineNumber(companyId: string, balanceSheetLineNumber: number, options?: Models.Dynamics365BusinessCentralGetBalanceSheetByLineNumberOptionalParams): Promise<Models.GetBalanceSheetByLineNumberResponse>;
  /**
   * @param companyId id for company
   * @param balanceSheetLineNumber lineNumber for balanceSheet
   * @param callback The callback
   */
  getBalanceSheetByLineNumber(companyId: string, balanceSheetLineNumber: number, callback: msRest.ServiceCallback<Models.BalanceSheet>): void;
  /**
   * @param companyId id for company
   * @param balanceSheetLineNumber lineNumber for balanceSheet
   * @param options The optional parameters
   * @param callback The callback
   */
  getBalanceSheetByLineNumber(companyId: string, balanceSheetLineNumber: number, options: Models.Dynamics365BusinessCentralGetBalanceSheetByLineNumberOptionalParams, callback: msRest.ServiceCallback<Models.BalanceSheet>): void;
  getBalanceSheetByLineNumber(companyId: string, balanceSheetLineNumber: number, options?: Models.Dynamics365BusinessCentralGetBalanceSheetByLineNumberOptionalParams | msRest.ServiceCallback<Models.BalanceSheet>, callback?: msRest.ServiceCallback<Models.BalanceSheet>): Promise<Models.GetBalanceSheetByLineNumberResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        balanceSheetLineNumber,
        options
      },
      getBalanceSheetByLineNumberOperationSpec,
      callback) as Promise<Models.GetBalanceSheetByLineNumberResponse>;
  }

  /**
   * @summary Returns a list of trialBalance
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTrialBalanceResponse>
   */
  getTrialBalance(companyId: string, options?: Models.Dynamics365BusinessCentralGetTrialBalanceOptionalParams): Promise<Models.GetTrialBalanceResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getTrialBalance(companyId: string, callback: msRest.ServiceCallback<Models.GetTrialBalanceOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getTrialBalance(companyId: string, options: Models.Dynamics365BusinessCentralGetTrialBalanceOptionalParams, callback: msRest.ServiceCallback<Models.GetTrialBalanceOKResponse>): void;
  getTrialBalance(companyId: string, options?: Models.Dynamics365BusinessCentralGetTrialBalanceOptionalParams | msRest.ServiceCallback<Models.GetTrialBalanceOKResponse>, callback?: msRest.ServiceCallback<Models.GetTrialBalanceOKResponse>): Promise<Models.GetTrialBalanceResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getTrialBalanceOperationSpec,
      callback) as Promise<Models.GetTrialBalanceResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an trialBalance object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param trialBalanceNumber number for trialBalance
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTrialBalanceByNumberResponse>
   */
  getTrialBalanceByNumber(companyId: string, trialBalanceNumber: string, options?: Models.Dynamics365BusinessCentralGetTrialBalanceByNumberOptionalParams): Promise<Models.GetTrialBalanceByNumberResponse>;
  /**
   * @param companyId id for company
   * @param trialBalanceNumber number for trialBalance
   * @param callback The callback
   */
  getTrialBalanceByNumber(companyId: string, trialBalanceNumber: string, callback: msRest.ServiceCallback<Models.TrialBalance>): void;
  /**
   * @param companyId id for company
   * @param trialBalanceNumber number for trialBalance
   * @param options The optional parameters
   * @param callback The callback
   */
  getTrialBalanceByNumber(companyId: string, trialBalanceNumber: string, options: Models.Dynamics365BusinessCentralGetTrialBalanceByNumberOptionalParams, callback: msRest.ServiceCallback<Models.TrialBalance>): void;
  getTrialBalanceByNumber(companyId: string, trialBalanceNumber: string, options?: Models.Dynamics365BusinessCentralGetTrialBalanceByNumberOptionalParams | msRest.ServiceCallback<Models.TrialBalance>, callback?: msRest.ServiceCallback<Models.TrialBalance>): Promise<Models.GetTrialBalanceByNumberResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        trialBalanceNumber,
        options
      },
      getTrialBalanceByNumberOperationSpec,
      callback) as Promise<Models.GetTrialBalanceByNumberResponse>;
  }

  /**
   * @summary Returns a list of incomeStatement
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIncomeStatementResponse>
   */
  getIncomeStatement(companyId: string, options?: Models.Dynamics365BusinessCentralGetIncomeStatementOptionalParams): Promise<Models.GetIncomeStatementResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getIncomeStatement(companyId: string, callback: msRest.ServiceCallback<Models.GetIncomeStatementOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getIncomeStatement(companyId: string, options: Models.Dynamics365BusinessCentralGetIncomeStatementOptionalParams, callback: msRest.ServiceCallback<Models.GetIncomeStatementOKResponse>): void;
  getIncomeStatement(companyId: string, options?: Models.Dynamics365BusinessCentralGetIncomeStatementOptionalParams | msRest.ServiceCallback<Models.GetIncomeStatementOKResponse>, callback?: msRest.ServiceCallback<Models.GetIncomeStatementOKResponse>): Promise<Models.GetIncomeStatementResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getIncomeStatementOperationSpec,
      callback) as Promise<Models.GetIncomeStatementResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an incomeStatement object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param incomeStatementLineNumber lineNumber for incomeStatement
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIncomeStatementByLineNumberResponse>
   */
  getIncomeStatementByLineNumber(companyId: string, incomeStatementLineNumber: number, options?: Models.Dynamics365BusinessCentralGetIncomeStatementByLineNumberOptionalParams): Promise<Models.GetIncomeStatementByLineNumberResponse>;
  /**
   * @param companyId id for company
   * @param incomeStatementLineNumber lineNumber for incomeStatement
   * @param callback The callback
   */
  getIncomeStatementByLineNumber(companyId: string, incomeStatementLineNumber: number, callback: msRest.ServiceCallback<Models.IncomeStatement>): void;
  /**
   * @param companyId id for company
   * @param incomeStatementLineNumber lineNumber for incomeStatement
   * @param options The optional parameters
   * @param callback The callback
   */
  getIncomeStatementByLineNumber(companyId: string, incomeStatementLineNumber: number, options: Models.Dynamics365BusinessCentralGetIncomeStatementByLineNumberOptionalParams, callback: msRest.ServiceCallback<Models.IncomeStatement>): void;
  getIncomeStatementByLineNumber(companyId: string, incomeStatementLineNumber: number, options?: Models.Dynamics365BusinessCentralGetIncomeStatementByLineNumberOptionalParams | msRest.ServiceCallback<Models.IncomeStatement>, callback?: msRest.ServiceCallback<Models.IncomeStatement>): Promise<Models.GetIncomeStatementByLineNumberResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        incomeStatementLineNumber,
        options
      },
      getIncomeStatementByLineNumberOperationSpec,
      callback) as Promise<Models.GetIncomeStatementByLineNumberResponse>;
  }

  /**
   * @summary Returns a list of taxAreas
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTaxAreasResponse>
   */
  getTaxAreas(companyId: string, options?: Models.Dynamics365BusinessCentralGetTaxAreasOptionalParams): Promise<Models.GetTaxAreasResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getTaxAreas(companyId: string, callback: msRest.ServiceCallback<Models.GetTaxAreasOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getTaxAreas(companyId: string, options: Models.Dynamics365BusinessCentralGetTaxAreasOptionalParams, callback: msRest.ServiceCallback<Models.GetTaxAreasOKResponse>): void;
  getTaxAreas(companyId: string, options?: Models.Dynamics365BusinessCentralGetTaxAreasOptionalParams | msRest.ServiceCallback<Models.GetTaxAreasOKResponse>, callback?: msRest.ServiceCallback<Models.GetTaxAreasOKResponse>): Promise<Models.GetTaxAreasResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getTaxAreasOperationSpec,
      callback) as Promise<Models.GetTaxAreasResponse>;
  }

  /**
   * @summary Creates a taxArea in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostTaxAreaResponse>
   */
  postTaxArea(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostTaxAreaResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postTaxArea(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.TaxArea>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postTaxArea(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaxArea>): void;
  postTaxArea(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TaxArea>, callback?: msRest.ServiceCallback<Models.TaxArea>): Promise<Models.PostTaxAreaResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postTaxAreaOperationSpec,
      callback) as Promise<Models.PostTaxAreaResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an taxArea object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTaxAreaByIdResponse>
   */
  getTaxAreaById(companyId: string, taxAreaId: string, options?: Models.Dynamics365BusinessCentralGetTaxAreaByIdOptionalParams): Promise<Models.GetTaxAreaByIdResponse>;
  /**
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param callback The callback
   */
  getTaxAreaById(companyId: string, taxAreaId: string, callback: msRest.ServiceCallback<Models.TaxArea>): void;
  /**
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param options The optional parameters
   * @param callback The callback
   */
  getTaxAreaById(companyId: string, taxAreaId: string, options: Models.Dynamics365BusinessCentralGetTaxAreaByIdOptionalParams, callback: msRest.ServiceCallback<Models.TaxArea>): void;
  getTaxAreaById(companyId: string, taxAreaId: string, options?: Models.Dynamics365BusinessCentralGetTaxAreaByIdOptionalParams | msRest.ServiceCallback<Models.TaxArea>, callback?: msRest.ServiceCallback<Models.TaxArea>): Promise<Models.GetTaxAreaByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        taxAreaId,
        options
      },
      getTaxAreaByIdOperationSpec,
      callback) as Promise<Models.GetTaxAreaByIdResponse>;
  }

  /**
   * @summary Delete an taxArea in Dynamics 365 Business Central
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteTaxAreaById(companyId: string, taxAreaId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param callback The callback
   */
  deleteTaxAreaById(companyId: string, taxAreaId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteTaxAreaById(companyId: string, taxAreaId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteTaxAreaById(companyId: string, taxAreaId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        taxAreaId,
        options
      },
      deleteTaxAreaByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified taxArea
   * @param body
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchTaxAreaByIdResponse>
   */
  patchTaxAreaById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, taxAreaId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchTaxAreaByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param callback The callback
   */
  patchTaxAreaById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, taxAreaId: string, callback: msRest.ServiceCallback<Models.TaxArea>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param taxAreaId id for taxArea
   * @param options The optional parameters
   * @param callback The callback
   */
  patchTaxAreaById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, taxAreaId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaxArea>): void;
  patchTaxAreaById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, taxAreaId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TaxArea>, callback?: msRest.ServiceCallback<Models.TaxArea>): Promise<Models.PatchTaxAreaByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        taxAreaId,
        options
      },
      patchTaxAreaByIdOperationSpec,
      callback) as Promise<Models.PatchTaxAreaByIdResponse>;
  }

  /**
   * @summary Returns a list of salesQuotes
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesQuotesResponse>
   */
  getSalesQuotes(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuotesOptionalParams): Promise<Models.GetSalesQuotesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesQuotes(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesQuotesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesQuotes(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesQuotesOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesQuotesOKResponse>): void;
  getSalesQuotes(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuotesOptionalParams | msRest.ServiceCallback<Models.GetSalesQuotesOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesQuotesOKResponse>): Promise<Models.GetSalesQuotesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesQuotesOperationSpec,
      callback) as Promise<Models.GetSalesQuotesResponse>;
  }

  /**
   * @summary Creates a salesQuote in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesQuoteResponse>
   */
  postSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesQuoteResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesQuote>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesQuote>): void;
  postSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesQuote>, callback?: msRest.ServiceCallback<Models.SalesQuote>): Promise<Models.PostSalesQuoteResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesQuoteOperationSpec,
      callback) as Promise<Models.PostSalesQuoteResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuote object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesQuoteByIdResponse>
   */
  getSalesQuoteById(companyId: string, salesQuoteId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteByIdOptionalParams): Promise<Models.GetSalesQuoteByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  getSalesQuoteById(companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<Models.SalesQuote>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesQuoteById(companyId: string, salesQuoteId: string, options: Models.Dynamics365BusinessCentralGetSalesQuoteByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesQuote>): void;
  getSalesQuoteById(companyId: string, salesQuoteId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteByIdOptionalParams | msRest.ServiceCallback<Models.SalesQuote>, callback?: msRest.ServiceCallback<Models.SalesQuote>): Promise<Models.GetSalesQuoteByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        options
      },
      getSalesQuoteByIdOperationSpec,
      callback) as Promise<Models.GetSalesQuoteByIdResponse>;
  }

  /**
   * @summary Delete an salesQuote in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesQuoteById(companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  deleteSalesQuoteById(companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesQuoteById(companyId: string, salesQuoteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesQuoteById(companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        options
      },
      deleteSalesQuoteByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesQuote
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesQuoteByIdResponse>
   */
  patchSalesQuoteById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesQuoteByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  patchSalesQuoteById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<Models.SalesQuote>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesQuoteById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesQuote>): void;
  patchSalesQuoteById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesQuote>, callback?: msRest.ServiceCallback<Models.SalesQuote>): Promise<Models.PatchSalesQuoteByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesQuoteId,
        options
      },
      patchSalesQuoteByIdOperationSpec,
      callback) as Promise<Models.PatchSalesQuoteByIdResponse>;
  }

  /**
   * @summary Performs the makeInvoice action for salesQuotes entity
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  makeInvoiceActionSalesQuotes(companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  makeInvoiceActionSalesQuotes(companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  makeInvoiceActionSalesQuotes(companyId: string, salesQuoteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  makeInvoiceActionSalesQuotes(companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        options
      },
      makeInvoiceActionSalesQuotesOperationSpec,
      callback);
  }

  /**
   * @summary Performs the send action for salesQuotes entity
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  sendActionSalesQuotes(companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  sendActionSalesQuotes(companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  sendActionSalesQuotes(companyId: string, salesQuoteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  sendActionSalesQuotes(companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        options
      },
      sendActionSalesQuotesOperationSpec,
      callback);
  }

  /**
   * @summary Returns a list of salesQuoteLines
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesQuoteLinesForSalesQuoteResponse>
   */
  getSalesQuoteLinesForSalesQuote(companyId: string, salesQuoteId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLinesForSalesQuoteOptionalParams): Promise<Models.GetSalesQuoteLinesForSalesQuoteResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  getSalesQuoteLinesForSalesQuote(companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<Models.GetSalesQuoteLinesForSalesQuoteOKResponse>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesQuoteLinesForSalesQuote(companyId: string, salesQuoteId: string, options: Models.Dynamics365BusinessCentralGetSalesQuoteLinesForSalesQuoteOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesQuoteLinesForSalesQuoteOKResponse>): void;
  getSalesQuoteLinesForSalesQuote(companyId: string, salesQuoteId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLinesForSalesQuoteOptionalParams | msRest.ServiceCallback<Models.GetSalesQuoteLinesForSalesQuoteOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesQuoteLinesForSalesQuoteOKResponse>): Promise<Models.GetSalesQuoteLinesForSalesQuoteResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        options
      },
      getSalesQuoteLinesForSalesQuoteOperationSpec,
      callback) as Promise<Models.GetSalesQuoteLinesForSalesQuoteResponse>;
  }

  /**
   * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesQuoteLineForSalesQuoteResponse>
   */
  postSalesQuoteLineForSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesQuoteLineForSalesQuoteResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  postSalesQuoteLineForSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesQuoteLineForSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  postSalesQuoteLineForSalesQuote(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesQuoteLine>, callback?: msRest.ServiceCallback<Models.SalesQuoteLine>): Promise<Models.PostSalesQuoteLineForSalesQuoteResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesQuoteId,
        options
      },
      postSalesQuoteLineForSalesQuoteOperationSpec,
      callback) as Promise<Models.PostSalesQuoteLineForSalesQuoteResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuoteLine object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesQuoteLineForSalesQuoteByIdResponse>
   */
  getSalesQuoteLineForSalesQuoteById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLineForSalesQuoteByIdOptionalParams): Promise<Models.GetSalesQuoteLineForSalesQuoteByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param callback The callback
   */
  getSalesQuoteLineForSalesQuoteById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesQuoteLineForSalesQuoteById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, options: Models.Dynamics365BusinessCentralGetSalesQuoteLineForSalesQuoteByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  getSalesQuoteLineForSalesQuoteById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLineForSalesQuoteByIdOptionalParams | msRest.ServiceCallback<Models.SalesQuoteLine>, callback?: msRest.ServiceCallback<Models.SalesQuoteLine>): Promise<Models.GetSalesQuoteLineForSalesQuoteByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        salesQuoteLineId,
        options
      },
      getSalesQuoteLineForSalesQuoteByIdOperationSpec,
      callback) as Promise<Models.GetSalesQuoteLineForSalesQuoteByIdResponse>;
  }

  /**
   * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesQuoteLineForSalesQuoteByIdById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param callback The callback
   */
  deleteSalesQuoteLineForSalesQuoteByIdById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesQuoteLineForSalesQuoteByIdById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesQuoteLineForSalesQuoteByIdById(companyId: string, salesQuoteId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        salesQuoteLineId,
        options
      },
      deleteSalesQuoteLineForSalesQuoteByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesQuoteLine
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesQuoteLineForSalesQuoteByIdByIdResponse>
   */
  patchSalesQuoteLineForSalesQuoteByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesQuoteLineForSalesQuoteByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param callback The callback
   */
  patchSalesQuoteLineForSalesQuoteByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, salesQuoteLineId: string, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param salesQuoteLineId id for salesQuoteLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesQuoteLineForSalesQuoteByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, salesQuoteLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  patchSalesQuoteLineForSalesQuoteByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesQuoteLine>, callback?: msRest.ServiceCallback<Models.SalesQuoteLine>): Promise<Models.PatchSalesQuoteLineForSalesQuoteByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesQuoteId,
        salesQuoteLineId,
        options
      },
      patchSalesQuoteLineForSalesQuoteByIdByIdOperationSpec,
      callback) as Promise<Models.PatchSalesQuoteLineForSalesQuoteByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of pdfDocument
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForSalesQuoteResponse>
   */
  getPdfDocumentForSalesQuote(companyId: string, salesQuoteId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesQuoteOptionalParams): Promise<Models.GetPdfDocumentForSalesQuoteResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param callback The callback
   */
  getPdfDocumentForSalesQuote(companyId: string, salesQuoteId: string, callback: msRest.ServiceCallback<Models.GetPdfDocumentForSalesQuoteOKResponse>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForSalesQuote(companyId: string, salesQuoteId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesQuoteOptionalParams, callback: msRest.ServiceCallback<Models.GetPdfDocumentForSalesQuoteOKResponse>): void;
  getPdfDocumentForSalesQuote(companyId: string, salesQuoteId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesQuoteOptionalParams | msRest.ServiceCallback<Models.GetPdfDocumentForSalesQuoteOKResponse>, callback?: msRest.ServiceCallback<Models.GetPdfDocumentForSalesQuoteOKResponse>): Promise<Models.GetPdfDocumentForSalesQuoteResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        options
      },
      getPdfDocumentForSalesQuoteOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForSalesQuoteResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param pdfDocumentId id for pdfDocument
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForSalesQuoteByIdResponse>
   */
  getPdfDocumentForSalesQuoteById(companyId: string, salesQuoteId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesQuoteByIdOptionalParams): Promise<Models.GetPdfDocumentForSalesQuoteByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param pdfDocumentId id for pdfDocument
   * @param callback The callback
   */
  getPdfDocumentForSalesQuoteById(companyId: string, salesQuoteId: string, pdfDocumentId: string, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteId id for salesQuote
   * @param pdfDocumentId id for pdfDocument
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForSalesQuoteById(companyId: string, salesQuoteId: string, pdfDocumentId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesQuoteByIdOptionalParams, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  getPdfDocumentForSalesQuoteById(companyId: string, salesQuoteId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesQuoteByIdOptionalParams | msRest.ServiceCallback<Models.PdfDocument>, callback?: msRest.ServiceCallback<Models.PdfDocument>): Promise<Models.GetPdfDocumentForSalesQuoteByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteId,
        pdfDocumentId,
        options
      },
      getPdfDocumentForSalesQuoteByIdOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForSalesQuoteByIdResponse>;
  }

  /**
   * @summary Returns a list of salesQuoteLines
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesQuoteLinesResponse>
   */
  getSalesQuoteLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLinesOptionalParams): Promise<Models.GetSalesQuoteLinesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesQuoteLines(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesQuoteLinesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesQuoteLines(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesQuoteLinesOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesQuoteLinesOKResponse>): void;
  getSalesQuoteLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLinesOptionalParams | msRest.ServiceCallback<Models.GetSalesQuoteLinesOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesQuoteLinesOKResponse>): Promise<Models.GetSalesQuoteLinesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesQuoteLinesOperationSpec,
      callback) as Promise<Models.GetSalesQuoteLinesResponse>;
  }

  /**
   * @summary Creates a salesQuoteLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesQuoteLineResponse>
   */
  postSalesQuoteLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesQuoteLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesQuoteLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesQuoteLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  postSalesQuoteLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesQuoteLine>, callback?: msRest.ServiceCallback<Models.SalesQuoteLine>): Promise<Models.PostSalesQuoteLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesQuoteLineOperationSpec,
      callback) as Promise<Models.PostSalesQuoteLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesQuoteLine object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesQuoteLineByIdResponse>
   */
  getSalesQuoteLineById(companyId: string, salesQuoteLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLineByIdOptionalParams): Promise<Models.GetSalesQuoteLineByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param callback The callback
   */
  getSalesQuoteLineById(companyId: string, salesQuoteLineId: string, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesQuoteLineById(companyId: string, salesQuoteLineId: string, options: Models.Dynamics365BusinessCentralGetSalesQuoteLineByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  getSalesQuoteLineById(companyId: string, salesQuoteLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesQuoteLineByIdOptionalParams | msRest.ServiceCallback<Models.SalesQuoteLine>, callback?: msRest.ServiceCallback<Models.SalesQuoteLine>): Promise<Models.GetSalesQuoteLineByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteLineId,
        options
      },
      getSalesQuoteLineByIdOperationSpec,
      callback) as Promise<Models.GetSalesQuoteLineByIdResponse>;
  }

  /**
   * @summary Delete an salesQuoteLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesQuoteLineById(companyId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param callback The callback
   */
  deleteSalesQuoteLineById(companyId: string, salesQuoteLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesQuoteLineById(companyId: string, salesQuoteLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesQuoteLineById(companyId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesQuoteLineId,
        options
      },
      deleteSalesQuoteLineByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesQuoteLine
   * @param body
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesQuoteLineByIdResponse>
   */
  patchSalesQuoteLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesQuoteLineByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param callback The callback
   */
  patchSalesQuoteLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteLineId: string, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesQuoteLineId id for salesQuoteLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesQuoteLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesQuoteLine>): void;
  patchSalesQuoteLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesQuoteLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesQuoteLine>, callback?: msRest.ServiceCallback<Models.SalesQuoteLine>): Promise<Models.PatchSalesQuoteLineByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesQuoteLineId,
        options
      },
      patchSalesQuoteLineByIdOperationSpec,
      callback) as Promise<Models.PatchSalesQuoteLineByIdResponse>;
  }

  /**
   * @summary Returns a list of salesCreditMemos
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesCreditMemosResponse>
   */
  getSalesCreditMemos(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemosOptionalParams): Promise<Models.GetSalesCreditMemosResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesCreditMemos(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesCreditMemosOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesCreditMemos(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesCreditMemosOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesCreditMemosOKResponse>): void;
  getSalesCreditMemos(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemosOptionalParams | msRest.ServiceCallback<Models.GetSalesCreditMemosOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesCreditMemosOKResponse>): Promise<Models.GetSalesCreditMemosResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesCreditMemosOperationSpec,
      callback) as Promise<Models.GetSalesCreditMemosResponse>;
  }

  /**
   * @summary Creates a salesCreditMemo in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesCreditMemoResponse>
   */
  postSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesCreditMemoResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemo>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesCreditMemo>): void;
  postSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesCreditMemo>, callback?: msRest.ServiceCallback<Models.SalesCreditMemo>): Promise<Models.PostSalesCreditMemoResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesCreditMemoOperationSpec,
      callback) as Promise<Models.PostSalesCreditMemoResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemo object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesCreditMemoByIdResponse>
   */
  getSalesCreditMemoById(companyId: string, salesCreditMemoId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoByIdOptionalParams): Promise<Models.GetSalesCreditMemoByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param callback The callback
   */
  getSalesCreditMemoById(companyId: string, salesCreditMemoId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemo>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesCreditMemoById(companyId: string, salesCreditMemoId: string, options: Models.Dynamics365BusinessCentralGetSalesCreditMemoByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesCreditMemo>): void;
  getSalesCreditMemoById(companyId: string, salesCreditMemoId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoByIdOptionalParams | msRest.ServiceCallback<Models.SalesCreditMemo>, callback?: msRest.ServiceCallback<Models.SalesCreditMemo>): Promise<Models.GetSalesCreditMemoByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoId,
        options
      },
      getSalesCreditMemoByIdOperationSpec,
      callback) as Promise<Models.GetSalesCreditMemoByIdResponse>;
  }

  /**
   * @summary Delete an salesCreditMemo in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesCreditMemoById(companyId: string, salesCreditMemoId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param callback The callback
   */
  deleteSalesCreditMemoById(companyId: string, salesCreditMemoId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesCreditMemoById(companyId: string, salesCreditMemoId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesCreditMemoById(companyId: string, salesCreditMemoId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoId,
        options
      },
      deleteSalesCreditMemoByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemo
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesCreditMemoByIdResponse>
   */
  patchSalesCreditMemoById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesCreditMemoByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param callback The callback
   */
  patchSalesCreditMemoById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemo>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesCreditMemoById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesCreditMemo>): void;
  patchSalesCreditMemoById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesCreditMemo>, callback?: msRest.ServiceCallback<Models.SalesCreditMemo>): Promise<Models.PatchSalesCreditMemoByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesCreditMemoId,
        options
      },
      patchSalesCreditMemoByIdOperationSpec,
      callback) as Promise<Models.PatchSalesCreditMemoByIdResponse>;
  }

  /**
   * @summary Returns a list of salesCreditMemoLines
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesCreditMemoLinesForSalesCreditMemoResponse>
   */
  getSalesCreditMemoLinesForSalesCreditMemo(companyId: string, salesCreditMemoId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLinesForSalesCreditMemoOptionalParams): Promise<Models.GetSalesCreditMemoLinesForSalesCreditMemoResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param callback The callback
   */
  getSalesCreditMemoLinesForSalesCreditMemo(companyId: string, salesCreditMemoId: string, callback: msRest.ServiceCallback<Models.GetSalesCreditMemoLinesForSalesCreditMemoOKResponse>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesCreditMemoLinesForSalesCreditMemo(companyId: string, salesCreditMemoId: string, options: Models.Dynamics365BusinessCentralGetSalesCreditMemoLinesForSalesCreditMemoOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesCreditMemoLinesForSalesCreditMemoOKResponse>): void;
  getSalesCreditMemoLinesForSalesCreditMemo(companyId: string, salesCreditMemoId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLinesForSalesCreditMemoOptionalParams | msRest.ServiceCallback<Models.GetSalesCreditMemoLinesForSalesCreditMemoOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesCreditMemoLinesForSalesCreditMemoOKResponse>): Promise<Models.GetSalesCreditMemoLinesForSalesCreditMemoResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoId,
        options
      },
      getSalesCreditMemoLinesForSalesCreditMemoOperationSpec,
      callback) as Promise<Models.GetSalesCreditMemoLinesForSalesCreditMemoResponse>;
  }

  /**
   * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesCreditMemoLineForSalesCreditMemoResponse>
   */
  postSalesCreditMemoLineForSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesCreditMemoLineForSalesCreditMemoResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param callback The callback
   */
  postSalesCreditMemoLineForSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesCreditMemoLineForSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  postSalesCreditMemoLineForSalesCreditMemo(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesCreditMemoLine>, callback?: msRest.ServiceCallback<Models.SalesCreditMemoLine>): Promise<Models.PostSalesCreditMemoLineForSalesCreditMemoResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesCreditMemoId,
        options
      },
      postSalesCreditMemoLineForSalesCreditMemoOperationSpec,
      callback) as Promise<Models.PostSalesCreditMemoLineForSalesCreditMemoResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemoLine object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesCreditMemoLineForSalesCreditMemoByIdResponse>
   */
  getSalesCreditMemoLineForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLineForSalesCreditMemoByIdOptionalParams): Promise<Models.GetSalesCreditMemoLineForSalesCreditMemoByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param callback The callback
   */
  getSalesCreditMemoLineForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesCreditMemoLineForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options: Models.Dynamics365BusinessCentralGetSalesCreditMemoLineForSalesCreditMemoByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  getSalesCreditMemoLineForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLineForSalesCreditMemoByIdOptionalParams | msRest.ServiceCallback<Models.SalesCreditMemoLine>, callback?: msRest.ServiceCallback<Models.SalesCreditMemoLine>): Promise<Models.GetSalesCreditMemoLineForSalesCreditMemoByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoId,
        salesCreditMemoLineId,
        options
      },
      getSalesCreditMemoLineForSalesCreditMemoByIdOperationSpec,
      callback) as Promise<Models.GetSalesCreditMemoLineForSalesCreditMemoByIdResponse>;
  }

  /**
   * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param callback The callback
   */
  deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesCreditMemoLineForSalesCreditMemoByIdById(companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoId,
        salesCreditMemoLineId,
        options
      },
      deleteSalesCreditMemoLineForSalesCreditMemoByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemoLine
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesCreditMemoLineForSalesCreditMemoByIdByIdResponse>
   */
  patchSalesCreditMemoLineForSalesCreditMemoByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesCreditMemoLineForSalesCreditMemoByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param callback The callback
   */
  patchSalesCreditMemoLineForSalesCreditMemoByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesCreditMemoLineForSalesCreditMemoByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  patchSalesCreditMemoLineForSalesCreditMemoByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesCreditMemoLine>, callback?: msRest.ServiceCallback<Models.SalesCreditMemoLine>): Promise<Models.PatchSalesCreditMemoLineForSalesCreditMemoByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesCreditMemoId,
        salesCreditMemoLineId,
        options
      },
      patchSalesCreditMemoLineForSalesCreditMemoByIdByIdOperationSpec,
      callback) as Promise<Models.PatchSalesCreditMemoLineForSalesCreditMemoByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of pdfDocument
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForSalesCreditMemoResponse>
   */
  getPdfDocumentForSalesCreditMemo(companyId: string, salesCreditMemoId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesCreditMemoOptionalParams): Promise<Models.GetPdfDocumentForSalesCreditMemoResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param callback The callback
   */
  getPdfDocumentForSalesCreditMemo(companyId: string, salesCreditMemoId: string, callback: msRest.ServiceCallback<Models.GetPdfDocumentForSalesCreditMemoOKResponse>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForSalesCreditMemo(companyId: string, salesCreditMemoId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesCreditMemoOptionalParams, callback: msRest.ServiceCallback<Models.GetPdfDocumentForSalesCreditMemoOKResponse>): void;
  getPdfDocumentForSalesCreditMemo(companyId: string, salesCreditMemoId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesCreditMemoOptionalParams | msRest.ServiceCallback<Models.GetPdfDocumentForSalesCreditMemoOKResponse>, callback?: msRest.ServiceCallback<Models.GetPdfDocumentForSalesCreditMemoOKResponse>): Promise<Models.GetPdfDocumentForSalesCreditMemoResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoId,
        options
      },
      getPdfDocumentForSalesCreditMemoOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForSalesCreditMemoResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param pdfDocumentId id for pdfDocument
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForSalesCreditMemoByIdResponse>
   */
  getPdfDocumentForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesCreditMemoByIdOptionalParams): Promise<Models.GetPdfDocumentForSalesCreditMemoByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param pdfDocumentId id for pdfDocument
   * @param callback The callback
   */
  getPdfDocumentForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, pdfDocumentId: string, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoId id for salesCreditMemo
   * @param pdfDocumentId id for pdfDocument
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, pdfDocumentId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesCreditMemoByIdOptionalParams, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  getPdfDocumentForSalesCreditMemoById(companyId: string, salesCreditMemoId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForSalesCreditMemoByIdOptionalParams | msRest.ServiceCallback<Models.PdfDocument>, callback?: msRest.ServiceCallback<Models.PdfDocument>): Promise<Models.GetPdfDocumentForSalesCreditMemoByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoId,
        pdfDocumentId,
        options
      },
      getPdfDocumentForSalesCreditMemoByIdOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForSalesCreditMemoByIdResponse>;
  }

  /**
   * @summary Returns a list of salesCreditMemoLines
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesCreditMemoLinesResponse>
   */
  getSalesCreditMemoLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLinesOptionalParams): Promise<Models.GetSalesCreditMemoLinesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getSalesCreditMemoLines(companyId: string, callback: msRest.ServiceCallback<Models.GetSalesCreditMemoLinesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesCreditMemoLines(companyId: string, options: Models.Dynamics365BusinessCentralGetSalesCreditMemoLinesOptionalParams, callback: msRest.ServiceCallback<Models.GetSalesCreditMemoLinesOKResponse>): void;
  getSalesCreditMemoLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLinesOptionalParams | msRest.ServiceCallback<Models.GetSalesCreditMemoLinesOKResponse>, callback?: msRest.ServiceCallback<Models.GetSalesCreditMemoLinesOKResponse>): Promise<Models.GetSalesCreditMemoLinesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getSalesCreditMemoLinesOperationSpec,
      callback) as Promise<Models.GetSalesCreditMemoLinesResponse>;
  }

  /**
   * @summary Creates a salesCreditMemoLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostSalesCreditMemoLineResponse>
   */
  postSalesCreditMemoLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostSalesCreditMemoLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postSalesCreditMemoLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postSalesCreditMemoLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  postSalesCreditMemoLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesCreditMemoLine>, callback?: msRest.ServiceCallback<Models.SalesCreditMemoLine>): Promise<Models.PostSalesCreditMemoLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postSalesCreditMemoLineOperationSpec,
      callback) as Promise<Models.PostSalesCreditMemoLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an salesCreditMemoLine object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSalesCreditMemoLineByIdResponse>
   */
  getSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLineByIdOptionalParams): Promise<Models.GetSalesCreditMemoLineByIdResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param callback The callback
   */
  getSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, options: Models.Dynamics365BusinessCentralGetSalesCreditMemoLineByIdOptionalParams, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  getSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, options?: Models.Dynamics365BusinessCentralGetSalesCreditMemoLineByIdOptionalParams | msRest.ServiceCallback<Models.SalesCreditMemoLine>, callback?: msRest.ServiceCallback<Models.SalesCreditMemoLine>): Promise<Models.GetSalesCreditMemoLineByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoLineId,
        options
      },
      getSalesCreditMemoLineByIdOperationSpec,
      callback) as Promise<Models.GetSalesCreditMemoLineByIdResponse>;
  }

  /**
   * @summary Delete an salesCreditMemoLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param callback The callback
   */
  deleteSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSalesCreditMemoLineById(companyId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        salesCreditMemoLineId,
        options
      },
      deleteSalesCreditMemoLineByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified salesCreditMemoLine
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchSalesCreditMemoLineByIdResponse>
   */
  patchSalesCreditMemoLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchSalesCreditMemoLineByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param callback The callback
   */
  patchSalesCreditMemoLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoLineId: string, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param salesCreditMemoLineId id for salesCreditMemoLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchSalesCreditMemoLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SalesCreditMemoLine>): void;
  patchSalesCreditMemoLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, salesCreditMemoLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SalesCreditMemoLine>, callback?: msRest.ServiceCallback<Models.SalesCreditMemoLine>): Promise<Models.PatchSalesCreditMemoLineByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        salesCreditMemoLineId,
        options
      },
      patchSalesCreditMemoLineByIdOperationSpec,
      callback) as Promise<Models.PatchSalesCreditMemoLineByIdResponse>;
  }

  /**
   * @summary Returns a list of generalLedgerEntryAttachments
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGeneralLedgerEntryAttachmentsResponse>
   */
  getGeneralLedgerEntryAttachments(companyId: string, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryAttachmentsOptionalParams): Promise<Models.GetGeneralLedgerEntryAttachmentsResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getGeneralLedgerEntryAttachments(companyId: string, callback: msRest.ServiceCallback<Models.GetGeneralLedgerEntryAttachmentsOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getGeneralLedgerEntryAttachments(companyId: string, options: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryAttachmentsOptionalParams, callback: msRest.ServiceCallback<Models.GetGeneralLedgerEntryAttachmentsOKResponse>): void;
  getGeneralLedgerEntryAttachments(companyId: string, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryAttachmentsOptionalParams | msRest.ServiceCallback<Models.GetGeneralLedgerEntryAttachmentsOKResponse>, callback?: msRest.ServiceCallback<Models.GetGeneralLedgerEntryAttachmentsOKResponse>): Promise<Models.GetGeneralLedgerEntryAttachmentsResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getGeneralLedgerEntryAttachmentsOperationSpec,
      callback) as Promise<Models.GetGeneralLedgerEntryAttachmentsResponse>;
  }

  /**
   * @summary Creates a generalLedgerEntryAttachments in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostGeneralLedgerEntryAttachmentsResponse>
   */
  postGeneralLedgerEntryAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostGeneralLedgerEntryAttachmentsResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postGeneralLedgerEntryAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postGeneralLedgerEntryAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): void;
  postGeneralLedgerEntryAttachments(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>, callback?: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): Promise<Models.PostGeneralLedgerEntryAttachmentsResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postGeneralLedgerEntryAttachmentsOperationSpec,
      callback) as Promise<Models.PostGeneralLedgerEntryAttachmentsResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an generalLedgerEntryAttachments object
   * for Dynamics 365 Business Central.
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse>
   */
  getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOptionalParams): Promise<Models.GetGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse>;
  /**
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param callback The callback
   */
  getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, callback: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): void;
  /**
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param options The optional parameters
   * @param callback The callback
   */
  getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOptionalParams, callback: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): void;
  getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options?: Models.Dynamics365BusinessCentralGetGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOptionalParams | msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>, callback?: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): Promise<Models.GetGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        generalLedgerEntryAttachmentsGeneralLedgerEntryNumber,
        generalLedgerEntryAttachmentsId,
        options
      },
      getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOperationSpec,
      callback) as Promise<Models.GetGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse>;
  }

  /**
   * @summary Delete an generalLedgerEntryAttachments in Dynamics 365 Business Central
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param callback The callback
   */
  deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        generalLedgerEntryAttachmentsGeneralLedgerEntryNumber,
        generalLedgerEntryAttachmentsId,
        options
      },
      deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified generalLedgerEntryAttachments
   * @param body
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PatchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse>
   */
  patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param callback The callback
   */
  patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, callback: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param generalLedgerEntryAttachmentsGeneralLedgerEntryNumber generalLedgerEntryNumber for
   * generalLedgerEntryAttachments
   * @param generalLedgerEntryAttachmentsId id for generalLedgerEntryAttachments
   * @param options The optional parameters
   * @param callback The callback
   */
  patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): void;
  patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumber(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, generalLedgerEntryAttachmentsGeneralLedgerEntryNumber: number, generalLedgerEntryAttachmentsId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>, callback?: msRest.ServiceCallback<Models.GeneralLedgerEntryAttachments>): Promise<Models.PatchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        generalLedgerEntryAttachmentsGeneralLedgerEntryNumber,
        generalLedgerEntryAttachmentsId,
        options
      },
      patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOperationSpec,
      callback) as Promise<Models.PatchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberResponse>;
  }

  /**
   * @summary Returns a list of purchaseInvoices
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPurchaseInvoicesResponse>
   */
  getPurchaseInvoices(companyId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoicesOptionalParams): Promise<Models.GetPurchaseInvoicesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getPurchaseInvoices(companyId: string, callback: msRest.ServiceCallback<Models.GetPurchaseInvoicesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurchaseInvoices(companyId: string, options: Models.Dynamics365BusinessCentralGetPurchaseInvoicesOptionalParams, callback: msRest.ServiceCallback<Models.GetPurchaseInvoicesOKResponse>): void;
  getPurchaseInvoices(companyId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoicesOptionalParams | msRest.ServiceCallback<Models.GetPurchaseInvoicesOKResponse>, callback?: msRest.ServiceCallback<Models.GetPurchaseInvoicesOKResponse>): Promise<Models.GetPurchaseInvoicesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getPurchaseInvoicesOperationSpec,
      callback) as Promise<Models.GetPurchaseInvoicesResponse>;
  }

  /**
   * @summary Creates a purchaseInvoice in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostPurchaseInvoiceResponse>
   */
  postPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostPurchaseInvoiceResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoice>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurchaseInvoice>): void;
  postPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurchaseInvoice>, callback?: msRest.ServiceCallback<Models.PurchaseInvoice>): Promise<Models.PostPurchaseInvoiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postPurchaseInvoiceOperationSpec,
      callback) as Promise<Models.PostPurchaseInvoiceResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoice object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPurchaseInvoiceByIdResponse>
   */
  getPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceByIdOptionalParams): Promise<Models.GetPurchaseInvoiceByIdResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param callback The callback
   */
  getPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoice>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, options: Models.Dynamics365BusinessCentralGetPurchaseInvoiceByIdOptionalParams, callback: msRest.ServiceCallback<Models.PurchaseInvoice>): void;
  getPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceByIdOptionalParams | msRest.ServiceCallback<Models.PurchaseInvoice>, callback?: msRest.ServiceCallback<Models.PurchaseInvoice>): Promise<Models.GetPurchaseInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        options
      },
      getPurchaseInvoiceByIdOperationSpec,
      callback) as Promise<Models.GetPurchaseInvoiceByIdResponse>;
  }

  /**
   * @summary Delete an purchaseInvoice in Dynamics 365 Business Central
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param callback The callback
   */
  deletePurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        options
      },
      deletePurchaseInvoiceByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoice
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPurchaseInvoiceByIdResponse>
   */
  patchPurchaseInvoiceById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPurchaseInvoiceByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param callback The callback
   */
  patchPurchaseInvoiceById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoice>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPurchaseInvoiceById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurchaseInvoice>): void;
  patchPurchaseInvoiceById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurchaseInvoice>, callback?: msRest.ServiceCallback<Models.PurchaseInvoice>): Promise<Models.PatchPurchaseInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        purchaseInvoiceId,
        options
      },
      patchPurchaseInvoiceByIdOperationSpec,
      callback) as Promise<Models.PatchPurchaseInvoiceByIdResponse>;
  }

  /**
   * @summary Performs the post action for purchaseInvoices entity
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  postActionPurchaseInvoices(companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param callback The callback
   */
  postActionPurchaseInvoices(companyId: string, purchaseInvoiceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  postActionPurchaseInvoices(companyId: string, purchaseInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  postActionPurchaseInvoices(companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        options
      },
      postActionPurchaseInvoicesOperationSpec,
      callback);
  }

  /**
   * @summary Returns a list of purchaseInvoiceLines
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceResponse>
   */
  getPurchaseInvoiceLinesForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLinesForPurchaseInvoiceOptionalParams): Promise<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param callback The callback
   */
  getPurchaseInvoiceLinesForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, callback: msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurchaseInvoiceLinesForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, options: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLinesForPurchaseInvoiceOptionalParams, callback: msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse>): void;
  getPurchaseInvoiceLinesForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLinesForPurchaseInvoiceOptionalParams | msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse>, callback?: msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse>): Promise<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        options
      },
      getPurchaseInvoiceLinesForPurchaseInvoiceOperationSpec,
      callback) as Promise<Models.GetPurchaseInvoiceLinesForPurchaseInvoiceResponse>;
  }

  /**
   * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.PostPurchaseInvoiceLineForPurchaseInvoiceResponse>
   */
  postPurchaseInvoiceLineForPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostPurchaseInvoiceLineForPurchaseInvoiceResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param callback The callback
   */
  postPurchaseInvoiceLineForPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  postPurchaseInvoiceLineForPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  postPurchaseInvoiceLineForPurchaseInvoice(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurchaseInvoiceLine>, callback?: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): Promise<Models.PostPurchaseInvoiceLineForPurchaseInvoiceResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        purchaseInvoiceId,
        options
      },
      postPurchaseInvoiceLineForPurchaseInvoiceOperationSpec,
      callback) as Promise<Models.PostPurchaseInvoiceLineForPurchaseInvoiceResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoiceLine object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPurchaseInvoiceLineForPurchaseInvoiceByIdResponse>
   */
  getPurchaseInvoiceLineForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLineForPurchaseInvoiceByIdOptionalParams): Promise<Models.GetPurchaseInvoiceLineForPurchaseInvoiceByIdResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param callback The callback
   */
  getPurchaseInvoiceLineForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurchaseInvoiceLineForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLineForPurchaseInvoiceByIdOptionalParams, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  getPurchaseInvoiceLineForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLineForPurchaseInvoiceByIdOptionalParams | msRest.ServiceCallback<Models.PurchaseInvoiceLine>, callback?: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): Promise<Models.GetPurchaseInvoiceLineForPurchaseInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        purchaseInvoiceLineId,
        options
      },
      getPurchaseInvoiceLineForPurchaseInvoiceByIdOperationSpec,
      callback) as Promise<Models.GetPurchaseInvoiceLineForPurchaseInvoiceByIdResponse>;
  }

  /**
   * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param callback The callback
   */
  deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePurchaseInvoiceLineForPurchaseInvoiceByIdById(companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        purchaseInvoiceLineId,
        options
      },
      deletePurchaseInvoiceLineForPurchaseInvoiceByIdByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoiceLine
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPurchaseInvoiceLineForPurchaseInvoiceByIdByIdResponse>
   */
  patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPurchaseInvoiceLineForPurchaseInvoiceByIdByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param callback The callback
   */
  patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  patchPurchaseInvoiceLineForPurchaseInvoiceByIdById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurchaseInvoiceLine>, callback?: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): Promise<Models.PatchPurchaseInvoiceLineForPurchaseInvoiceByIdByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        purchaseInvoiceId,
        purchaseInvoiceLineId,
        options
      },
      patchPurchaseInvoiceLineForPurchaseInvoiceByIdByIdOperationSpec,
      callback) as Promise<Models.PatchPurchaseInvoiceLineForPurchaseInvoiceByIdByIdResponse>;
  }

  /**
   * @summary Returns a list of pdfDocument
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForPurchaseInvoiceResponse>
   */
  getPdfDocumentForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForPurchaseInvoiceOptionalParams): Promise<Models.GetPdfDocumentForPurchaseInvoiceResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param callback The callback
   */
  getPdfDocumentForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, callback: msRest.ServiceCallback<Models.GetPdfDocumentForPurchaseInvoiceOKResponse>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForPurchaseInvoiceOptionalParams, callback: msRest.ServiceCallback<Models.GetPdfDocumentForPurchaseInvoiceOKResponse>): void;
  getPdfDocumentForPurchaseInvoice(companyId: string, purchaseInvoiceId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForPurchaseInvoiceOptionalParams | msRest.ServiceCallback<Models.GetPdfDocumentForPurchaseInvoiceOKResponse>, callback?: msRest.ServiceCallback<Models.GetPdfDocumentForPurchaseInvoiceOKResponse>): Promise<Models.GetPdfDocumentForPurchaseInvoiceResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        options
      },
      getPdfDocumentForPurchaseInvoiceOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForPurchaseInvoiceResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an pdfDocument object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param pdfDocumentId id for pdfDocument
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPdfDocumentForPurchaseInvoiceByIdResponse>
   */
  getPdfDocumentForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForPurchaseInvoiceByIdOptionalParams): Promise<Models.GetPdfDocumentForPurchaseInvoiceByIdResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param pdfDocumentId id for pdfDocument
   * @param callback The callback
   */
  getPdfDocumentForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, pdfDocumentId: string, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceId id for purchaseInvoice
   * @param pdfDocumentId id for pdfDocument
   * @param options The optional parameters
   * @param callback The callback
   */
  getPdfDocumentForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, pdfDocumentId: string, options: Models.Dynamics365BusinessCentralGetPdfDocumentForPurchaseInvoiceByIdOptionalParams, callback: msRest.ServiceCallback<Models.PdfDocument>): void;
  getPdfDocumentForPurchaseInvoiceById(companyId: string, purchaseInvoiceId: string, pdfDocumentId: string, options?: Models.Dynamics365BusinessCentralGetPdfDocumentForPurchaseInvoiceByIdOptionalParams | msRest.ServiceCallback<Models.PdfDocument>, callback?: msRest.ServiceCallback<Models.PdfDocument>): Promise<Models.GetPdfDocumentForPurchaseInvoiceByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceId,
        pdfDocumentId,
        options
      },
      getPdfDocumentForPurchaseInvoiceByIdOperationSpec,
      callback) as Promise<Models.GetPdfDocumentForPurchaseInvoiceByIdResponse>;
  }

  /**
   * @summary Returns a list of purchaseInvoiceLines
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPurchaseInvoiceLinesResponse>
   */
  getPurchaseInvoiceLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLinesOptionalParams): Promise<Models.GetPurchaseInvoiceLinesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getPurchaseInvoiceLines(companyId: string, callback: msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurchaseInvoiceLines(companyId: string, options: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLinesOptionalParams, callback: msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesOKResponse>): void;
  getPurchaseInvoiceLines(companyId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLinesOptionalParams | msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesOKResponse>, callback?: msRest.ServiceCallback<Models.GetPurchaseInvoiceLinesOKResponse>): Promise<Models.GetPurchaseInvoiceLinesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getPurchaseInvoiceLinesOperationSpec,
      callback) as Promise<Models.GetPurchaseInvoiceLinesResponse>;
  }

  /**
   * @summary Creates a purchaseInvoiceLine in Dynamics 365 Business Central
   * @param body
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.PostPurchaseInvoiceLineResponse>
   */
  postPurchaseInvoiceLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase): Promise<Models.PostPurchaseInvoiceLineResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param callback The callback
   */
  postPurchaseInvoiceLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  postPurchaseInvoiceLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  postPurchaseInvoiceLine(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurchaseInvoiceLine>, callback?: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): Promise<Models.PostPurchaseInvoiceLineResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        options
      },
      postPurchaseInvoiceLineOperationSpec,
      callback) as Promise<Models.PostPurchaseInvoiceLineResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an purchaseInvoiceLine object for Dynamics
   * 365 Business Central.
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPurchaseInvoiceLineByIdResponse>
   */
  getPurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLineByIdOptionalParams): Promise<Models.GetPurchaseInvoiceLineByIdResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param callback The callback
   */
  getPurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  getPurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, options: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLineByIdOptionalParams, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  getPurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, options?: Models.Dynamics365BusinessCentralGetPurchaseInvoiceLineByIdOptionalParams | msRest.ServiceCallback<Models.PurchaseInvoiceLine>, callback?: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): Promise<Models.GetPurchaseInvoiceLineByIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceLineId,
        options
      },
      getPurchaseInvoiceLineByIdOperationSpec,
      callback) as Promise<Models.GetPurchaseInvoiceLineByIdResponse>;
  }

  /**
   * @summary Delete an purchaseInvoiceLine in Dynamics 365 Business Central
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deletePurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param callback The callback
   */
  deletePurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  deletePurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deletePurchaseInvoiceLineById(companyId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        purchaseInvoiceLineId,
        options
      },
      deletePurchaseInvoiceLineByIdOperationSpec,
      callback);
  }

  /**
   * @summary Lets the user patch the specified purchaseInvoiceLine
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchPurchaseInvoiceLineByIdResponse>
   */
  patchPurchaseInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase): Promise<Models.PatchPurchaseInvoiceLineByIdResponse>;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param callback The callback
   */
  patchPurchaseInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceLineId: string, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  /**
   * @param body
   * @param companyId id for company
   * @param purchaseInvoiceLineId id for purchaseInvoiceLine
   * @param options The optional parameters
   * @param callback The callback
   */
  patchPurchaseInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceLineId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): void;
  patchPurchaseInvoiceLineById(body: Models.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel, companyId: string, purchaseInvoiceLineId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PurchaseInvoiceLine>, callback?: msRest.ServiceCallback<Models.PurchaseInvoiceLine>): Promise<Models.PatchPurchaseInvoiceLineByIdResponse> {
    return this.sendOperationRequest(
      {
        body,
        companyId,
        purchaseInvoiceLineId,
        options
      },
      patchPurchaseInvoiceLineByIdOperationSpec,
      callback) as Promise<Models.PatchPurchaseInvoiceLineByIdResponse>;
  }

  /**
   * @summary Returns a list of customerSales
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerSalesResponse>
   */
  getCustomerSales(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerSalesOptionalParams): Promise<Models.GetCustomerSalesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getCustomerSales(companyId: string, callback: msRest.ServiceCallback<Models.GetCustomerSalesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerSales(companyId: string, options: Models.Dynamics365BusinessCentralGetCustomerSalesOptionalParams, callback: msRest.ServiceCallback<Models.GetCustomerSalesOKResponse>): void;
  getCustomerSales(companyId: string, options?: Models.Dynamics365BusinessCentralGetCustomerSalesOptionalParams | msRest.ServiceCallback<Models.GetCustomerSalesOKResponse>, callback?: msRest.ServiceCallback<Models.GetCustomerSalesOKResponse>): Promise<Models.GetCustomerSalesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getCustomerSalesOperationSpec,
      callback) as Promise<Models.GetCustomerSalesResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an customerSale object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param customerSaleCustomerId customerId for customerSale
   * @param customerSaleCustomerNumber customerNumber for customerSale
   * @param customerSaleName name for customerSale
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomerSaleByNameByCustomerNumberByCustomerIdResponse>
   */
  getCustomerSaleByNameByCustomerNumberByCustomerId(companyId: string, customerSaleCustomerId: string, customerSaleCustomerNumber: string, customerSaleName: string, options?: Models.Dynamics365BusinessCentralGetCustomerSaleByNameByCustomerNumberByCustomerIdOptionalParams): Promise<Models.GetCustomerSaleByNameByCustomerNumberByCustomerIdResponse>;
  /**
   * @param companyId id for company
   * @param customerSaleCustomerId customerId for customerSale
   * @param customerSaleCustomerNumber customerNumber for customerSale
   * @param customerSaleName name for customerSale
   * @param callback The callback
   */
  getCustomerSaleByNameByCustomerNumberByCustomerId(companyId: string, customerSaleCustomerId: string, customerSaleCustomerNumber: string, customerSaleName: string, callback: msRest.ServiceCallback<Models.CustomerSale>): void;
  /**
   * @param companyId id for company
   * @param customerSaleCustomerId customerId for customerSale
   * @param customerSaleCustomerNumber customerNumber for customerSale
   * @param customerSaleName name for customerSale
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomerSaleByNameByCustomerNumberByCustomerId(companyId: string, customerSaleCustomerId: string, customerSaleCustomerNumber: string, customerSaleName: string, options: Models.Dynamics365BusinessCentralGetCustomerSaleByNameByCustomerNumberByCustomerIdOptionalParams, callback: msRest.ServiceCallback<Models.CustomerSale>): void;
  getCustomerSaleByNameByCustomerNumberByCustomerId(companyId: string, customerSaleCustomerId: string, customerSaleCustomerNumber: string, customerSaleName: string, options?: Models.Dynamics365BusinessCentralGetCustomerSaleByNameByCustomerNumberByCustomerIdOptionalParams | msRest.ServiceCallback<Models.CustomerSale>, callback?: msRest.ServiceCallback<Models.CustomerSale>): Promise<Models.GetCustomerSaleByNameByCustomerNumberByCustomerIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        customerSaleCustomerId,
        customerSaleCustomerNumber,
        customerSaleName,
        options
      },
      getCustomerSaleByNameByCustomerNumberByCustomerIdOperationSpec,
      callback) as Promise<Models.GetCustomerSaleByNameByCustomerNumberByCustomerIdResponse>;
  }

  /**
   * @summary Returns a list of vendorPurchases
   * @param companyId id for company
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVendorPurchasesResponse>
   */
  getVendorPurchases(companyId: string, options?: Models.Dynamics365BusinessCentralGetVendorPurchasesOptionalParams): Promise<Models.GetVendorPurchasesResponse>;
  /**
   * @param companyId id for company
   * @param callback The callback
   */
  getVendorPurchases(companyId: string, callback: msRest.ServiceCallback<Models.GetVendorPurchasesOKResponse>): void;
  /**
   * @param companyId id for company
   * @param options The optional parameters
   * @param callback The callback
   */
  getVendorPurchases(companyId: string, options: Models.Dynamics365BusinessCentralGetVendorPurchasesOptionalParams, callback: msRest.ServiceCallback<Models.GetVendorPurchasesOKResponse>): void;
  getVendorPurchases(companyId: string, options?: Models.Dynamics365BusinessCentralGetVendorPurchasesOptionalParams | msRest.ServiceCallback<Models.GetVendorPurchasesOKResponse>, callback?: msRest.ServiceCallback<Models.GetVendorPurchasesOKResponse>): Promise<Models.GetVendorPurchasesResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        options
      },
      getVendorPurchasesOperationSpec,
      callback) as Promise<Models.GetVendorPurchasesResponse>;
  }

  /**
   * @summary Retrieve the properties and relationships of an vendorPurchase object for Dynamics 365
   * Business Central.
   * @param companyId id for company
   * @param vendorPurchaseVendorId vendorId for vendorPurchase
   * @param vendorPurchaseVendorNumber vendorNumber for vendorPurchase
   * @param vendorPurchaseName name for vendorPurchase
   * @param [options] The optional parameters
   * @returns Promise<Models.GetVendorPurchaseByNameByVendorNumberByVendorIdResponse>
   */
  getVendorPurchaseByNameByVendorNumberByVendorId(companyId: string, vendorPurchaseVendorId: string, vendorPurchaseVendorNumber: string, vendorPurchaseName: string, options?: Models.Dynamics365BusinessCentralGetVendorPurchaseByNameByVendorNumberByVendorIdOptionalParams): Promise<Models.GetVendorPurchaseByNameByVendorNumberByVendorIdResponse>;
  /**
   * @param companyId id for company
   * @param vendorPurchaseVendorId vendorId for vendorPurchase
   * @param vendorPurchaseVendorNumber vendorNumber for vendorPurchase
   * @param vendorPurchaseName name for vendorPurchase
   * @param callback The callback
   */
  getVendorPurchaseByNameByVendorNumberByVendorId(companyId: string, vendorPurchaseVendorId: string, vendorPurchaseVendorNumber: string, vendorPurchaseName: string, callback: msRest.ServiceCallback<Models.VendorPurchase>): void;
  /**
   * @param companyId id for company
   * @param vendorPurchaseVendorId vendorId for vendorPurchase
   * @param vendorPurchaseVendorNumber vendorNumber for vendorPurchase
   * @param vendorPurchaseName name for vendorPurchase
   * @param options The optional parameters
   * @param callback The callback
   */
  getVendorPurchaseByNameByVendorNumberByVendorId(companyId: string, vendorPurchaseVendorId: string, vendorPurchaseVendorNumber: string, vendorPurchaseName: string, options: Models.Dynamics365BusinessCentralGetVendorPurchaseByNameByVendorNumberByVendorIdOptionalParams, callback: msRest.ServiceCallback<Models.VendorPurchase>): void;
  getVendorPurchaseByNameByVendorNumberByVendorId(companyId: string, vendorPurchaseVendorId: string, vendorPurchaseVendorNumber: string, vendorPurchaseName: string, options?: Models.Dynamics365BusinessCentralGetVendorPurchaseByNameByVendorNumberByVendorIdOptionalParams | msRest.ServiceCallback<Models.VendorPurchase>, callback?: msRest.ServiceCallback<Models.VendorPurchase>): Promise<Models.GetVendorPurchaseByNameByVendorNumberByVendorIdResponse> {
    return this.sendOperationRequest(
      {
        companyId,
        vendorPurchaseVendorId,
        vendorPurchaseVendorNumber,
        vendorPurchaseName,
        options
      },
      getVendorPurchaseByNameByVendorNumberByVendorIdOperationSpec,
      callback) as Promise<Models.GetVendorPurchaseByNameByVendorNumberByVendorIdResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCompaniesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies",
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCompaniesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCompanyByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Company
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getItemsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/items",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetItemsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/items",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Body,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Item
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getItemByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Item
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteItemByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchItemByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Body,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Item
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/picture",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPictureForItemOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForItemByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId,
    Parameters.pictureId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePictureForItemByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPictureForItemByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDefaultDimensionsForItemOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postDefaultDimensionsForItemOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForItemByDimensionIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDefaultDimensionsForItemByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchDefaultDimensionsForItemByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/items({item_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/picture",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPictureOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.pictureId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePictureByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPictureByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDefaultDimensionsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postDefaultDimensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsByDimensionIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDefaultDimensionsByDimensionIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchDefaultDimensionsByDimensionIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCustomersOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/customers",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Customer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Customer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCustomerByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchCustomerByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Customer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerFinancialDetailsForCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/customerFinancialDetails",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCustomerFinancialDetailsForCustomerOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerFinancialDetailForCustomerByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/customerFinancialDetails({customerFinancialDetail_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId,
    Parameters.customerFinancialDetailId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomerFinancialDetail
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/picture",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPictureForCustomerOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForCustomerByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId,
    Parameters.pictureId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePictureForCustomerByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPictureForCustomerByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDefaultDimensionsForCustomerOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postDefaultDimensionsForCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForCustomerByDimensionIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDefaultDimensionsForCustomerByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchDefaultDimensionsForCustomerByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/customers({customer_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerFinancialDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerFinancialDetails",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCustomerFinancialDetailsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerFinancialDetailByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerFinancialDetails({customerFinancialDetail_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerFinancialDetailId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomerFinancialDetail
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVendorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendors",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetVendorsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postVendorOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/vendors",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Vendor
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVendorByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Vendor
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteVendorByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchVendorByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Vendor
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForVendorOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/picture",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPictureForVendorOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForVendorByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId,
    Parameters.pictureId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePictureForVendorByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPictureForVendorByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForVendorOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDefaultDimensionsForVendorOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postDefaultDimensionsForVendorOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForVendorByDimensionIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDefaultDimensionsForVendorByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchDefaultDimensionsForVendorByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/vendors({vendor_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCompanyInformationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/companyInformation",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCompanyInformationOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCompanyInformationByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/companyInformation({companyInformation_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.companyInformationId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CompanyInformation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchCompanyInformationByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/companyInformation({companyInformation_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.companyInformationId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CompanyInformation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesInvoicesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesInvoice
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesInvoice
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesInvoice
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelAndSendActionSalesInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancelAndSend",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const cancelActionSalesInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.cancel",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postAndSendActionSalesInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.postAndSend",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postActionSalesInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.post",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const sendActionSalesInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/Microsoft.NAV.send",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesInvoiceLinesForSalesInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesInvoiceLinesForSalesInvoiceOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesInvoiceLineForSalesInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesInvoiceLineForSalesInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId,
    Parameters.salesInvoiceLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesInvoiceLineForSalesInvoiceByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId,
    Parameters.salesInvoiceLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesInvoiceLineForSalesInvoiceByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/salesInvoiceLines('{salesInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId,
    Parameters.salesInvoiceLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForSalesInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPdfDocumentForSalesInvoiceOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForSalesInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoices({salesInvoice_id})/pdfDocument({pdfDocument_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceId,
    Parameters.pdfDocumentId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PdfDocument
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesInvoiceLinesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoiceLines",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesInvoiceLinesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesInvoiceLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoiceLines",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesInvoiceLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesInvoiceLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesInvoiceLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesInvoiceLines('{salesInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesInvoiceLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/pdfDocument",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPdfDocumentOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/pdfDocument({pdfDocument_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.pdfDocumentId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PdfDocument
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerPaymentJournalsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCustomerPaymentJournalsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postCustomerPaymentJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.CustomerPaymentJournal
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerPaymentJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPaymentJournal
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCustomerPaymentJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchCustomerPaymentJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPaymentJournal
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerPaymentsForCustomerPaymentJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCustomerPaymentsForCustomerPaymentJournalOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postCustomerPaymentForCustomerPaymentJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.CustomerPayment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerPaymentForCustomerPaymentJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId,
    Parameters.customerPaymentId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPayment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCustomerPaymentForCustomerPaymentJournalByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId,
    Parameters.customerPaymentId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchCustomerPaymentForCustomerPaymentJournalByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/customerPaymentJournals({customerPaymentJournal_id})/customerPayments({customerPayment_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentJournalId,
    Parameters.customerPaymentId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPayment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerPaymentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerPayments",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCustomerPaymentsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postCustomerPaymentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/customerPayments",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.CustomerPayment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerPaymentByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerPayments({customerPayment_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPayment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCustomerPaymentByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/customerPayments({customerPayment_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchCustomerPaymentByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/customerPayments({customerPayment_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerPaymentId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPayment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAccountsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/accounts",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAccountsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAccountByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/accounts({account_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.accountId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Account
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTaxGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/taxGroups",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetTaxGroupsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postTaxGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/taxGroups",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.TaxGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTaxGroupByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/taxGroups({taxGroup_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.taxGroupId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TaxGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteTaxGroupByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/taxGroups({taxGroup_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.taxGroupId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchTaxGroupByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/taxGroups({taxGroup_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.taxGroupId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TaxGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getJournalsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journals",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetJournalsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/journals",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Journal
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Journal
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Journal
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postActionJournalsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/Microsoft.NAV.post",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getJournalLinesForJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetJournalLinesForJournalOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postJournalLineForJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.JournalLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getJournalLineForJournalByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JournalLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteJournalLineForJournalByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchJournalLineForJournalByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JournalLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAttachmentsForJournalLineForJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAttachmentsForJournalLineForJournalOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postAttachmentsForJournalLineForJournalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAttachmentsForJournalLineForJournalByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchAttachmentsForJournalLineForJournalByIdByParentIdByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/journals({journal_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalId,
    Parameters.journalLineId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getJournalLinesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetJournalLinesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postJournalLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.JournalLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getJournalLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JournalLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteJournalLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchJournalLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JournalLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAttachmentsForJournalLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})/attachments",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAttachmentsForJournalLineOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postAttachmentsForJournalLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})/attachments",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAttachmentsForJournalLineByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteAttachmentsForJournalLineByIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchAttachmentsForJournalLineByIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/journalLines({journalLine_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.journalLineId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAttachmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/attachments",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAttachmentsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postAttachmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/attachments",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAttachmentsByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteAttachmentsByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchAttachmentsByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/attachments({attachments_parentId},{attachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.attachmentsParentId,
    Parameters.attachmentsId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Attachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getEmployeesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetEmployeesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postEmployeeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/employees",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Employee
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getEmployeeByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Employee
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteEmployeeByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchEmployeeByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Employee
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForEmployeeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/picture",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPictureForEmployeeOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPictureForEmployeeByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.pictureId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePictureForEmployeeByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPictureForEmployeeByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/picture({picture_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.pictureId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Picture
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForEmployeeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDefaultDimensionsForEmployeeOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postDefaultDimensionsForEmployeeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/defaultDimensions",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDefaultDimensionsForEmployeeByDimensionIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchDefaultDimensionsForEmployeeByDimensionIdByParentIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/defaultDimensions({defaultDimensions_parentId},{defaultDimensions_dimensionId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.defaultDimensionsParentId,
    Parameters.defaultDimensionsDimensionId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DefaultDimensions
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTimeRegistrationEntriesForEmployeeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/timeRegistrationEntries",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetTimeRegistrationEntriesForEmployeeOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postTimeRegistrationEntryForEmployeeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/timeRegistrationEntries",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.TimeRegistrationEntry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTimeRegistrationEntryForEmployeeByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.timeRegistrationEntryId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeRegistrationEntry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteTimeRegistrationEntryForEmployeeByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.timeRegistrationEntryId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchTimeRegistrationEntryForEmployeeByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/employees({employee_id})/timeRegistrationEntries({timeRegistrationEntry_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.employeeId,
    Parameters.timeRegistrationEntryId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TimeRegistrationEntry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTimeRegistrationEntriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/timeRegistrationEntries",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetTimeRegistrationEntriesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postTimeRegistrationEntryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/timeRegistrationEntries",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.TimeRegistrationEntry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTimeRegistrationEntryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.timeRegistrationEntryId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TimeRegistrationEntry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteTimeRegistrationEntryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.timeRegistrationEntryId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchTimeRegistrationEntryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/timeRegistrationEntries({timeRegistrationEntry_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.timeRegistrationEntryId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TimeRegistrationEntry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getGeneralLedgerEntriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/generalLedgerEntries",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetGeneralLedgerEntriesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getGeneralLedgerEntryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/generalLedgerEntries({generalLedgerEntry_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.generalLedgerEntryId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GeneralLedgerEntry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCurrenciesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/currencies",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCurrenciesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postCurrencyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/currencies",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Currency
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCurrencyByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/currencies({currency_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.currencyId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Currency
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCurrencyByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/currencies({currency_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.currencyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchCurrencyByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/currencies({currency_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.currencyId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Currency
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPaymentMethodsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/paymentMethods",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPaymentMethodsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postPaymentMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/paymentMethods",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PaymentMethod
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPaymentMethodByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/paymentMethods({paymentMethod_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.paymentMethodId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethod
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePaymentMethodByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/paymentMethods({paymentMethod_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.paymentMethodId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPaymentMethodByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/paymentMethods({paymentMethod_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.paymentMethodId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethod
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensions",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDimensionsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensions({dimension_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.dimensionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Dimension
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionValuesForDimensionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensions({dimension_id})/dimensionValues",
  urlParameters: [
    Parameters.companyId,
    Parameters.dimensionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDimensionValuesForDimensionOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionValueForDimensionByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensions({dimension_id})/dimensionValues({dimensionValue_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.dimensionId,
    Parameters.dimensionValueId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DimensionValue
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensionValues",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDimensionValuesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionValueByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensionValues({dimensionValue_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.dimensionValueId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DimensionValue
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionLinesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensionLines",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetDimensionLinesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postDimensionLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/dimensionLines",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DimensionLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDimensionLineByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.dimensionLineParentId,
    Parameters.dimensionLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DimensionLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteDimensionLineByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.dimensionLineParentId,
    Parameters.dimensionLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchDimensionLineByIdByParentIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/dimensionLines({dimensionLine_parentId},{dimensionLine_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.dimensionLineParentId,
    Parameters.dimensionLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DimensionLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPaymentTermsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/paymentTerms",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPaymentTermsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postPaymentTermOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/paymentTerms",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PaymentTerm
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPaymentTermByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/paymentTerms({paymentTerm_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.paymentTermId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaymentTerm
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePaymentTermByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/paymentTerms({paymentTerm_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.paymentTermId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPaymentTermByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/paymentTerms({paymentTerm_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.paymentTermId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PaymentTerm
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getShipmentMethodsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/shipmentMethods",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetShipmentMethodsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postShipmentMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/shipmentMethods",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.ShipmentMethod
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getShipmentMethodByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/shipmentMethods({shipmentMethod_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.shipmentMethodId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShipmentMethod
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteShipmentMethodByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/shipmentMethods({shipmentMethod_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.shipmentMethodId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchShipmentMethodByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/shipmentMethods({shipmentMethod_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.shipmentMethodId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ShipmentMethod
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getItemCategoriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/itemCategories",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetItemCategoriesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postItemCategoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/itemCategories",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.ItemCategory
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getItemCategoryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/itemCategories({itemCategory_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemCategoryId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ItemCategory
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteItemCategoryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/itemCategories({itemCategory_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemCategoryId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchItemCategoryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/itemCategories({itemCategory_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.itemCategoryId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ItemCategory
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCashFlowStatementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/cashFlowStatement",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCashFlowStatementOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCashFlowStatementByLineNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/cashFlowStatement({cashFlowStatement_lineNumber})",
  urlParameters: [
    Parameters.companyId,
    Parameters.cashFlowStatementLineNumber
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CashFlowStatement
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCountriesRegionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/countriesRegions",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCountriesRegionsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postCountryRegionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/countriesRegions",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.CountryRegion
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCountryRegionByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/countriesRegions({countryRegion_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.countryRegionId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CountryRegion
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteCountryRegionByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/countriesRegions({countryRegion_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.countryRegionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchCountryRegionByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/countriesRegions({countryRegion_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.countryRegionId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CountryRegion
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesOrdersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesOrdersOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesOrder
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesOrderByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesOrder
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesOrderByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesOrderByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesOrder
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesOrderLinesForSalesOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesOrderLinesForSalesOrderOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesOrderLineForSalesOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesOrderLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesOrderLineForSalesOrderByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId,
    Parameters.salesOrderLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesOrderLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesOrderLineForSalesOrderByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId,
    Parameters.salesOrderLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesOrderLineForSalesOrderByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrders({salesOrder_id})/salesOrderLines('{salesOrderLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderId,
    Parameters.salesOrderLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesOrderLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesOrderLinesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrderLines",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesOrderLinesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesOrderLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrderLines",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesOrderLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesOrderLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrderLines('{salesOrderLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesOrderLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesOrderLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrderLines('{salesOrderLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesOrderLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesOrderLines('{salesOrderLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesOrderLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesOrderLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRetainedEarningsStatementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/retainedEarningsStatement",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetRetainedEarningsStatementOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getRetainedEarningsStatementByLineNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/retainedEarningsStatement({retainedEarningsStatement_lineNumber})",
  urlParameters: [
    Parameters.companyId,
    Parameters.retainedEarningsStatementLineNumber
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RetainedEarningsStatement
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getUnitsOfMeasureOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/unitsOfMeasure",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetUnitsOfMeasureOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postUnitOfMeasureOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/unitsOfMeasure",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.UnitOfMeasure
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getUnitOfMeasureByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.unitOfMeasureId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UnitOfMeasure
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteUnitOfMeasureByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.unitOfMeasureId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchUnitOfMeasureByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/unitsOfMeasure({unitOfMeasure_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.unitOfMeasureId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UnitOfMeasure
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAgedAccountsReceivableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/agedAccountsReceivable",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAgedAccountsReceivableOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAgedAccountsReceivableByCustomerIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/agedAccountsReceivable({agedAccountsReceivable_customerId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.agedAccountsReceivableCustomerId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AgedAccountsReceivable
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAgedAccountsPayableOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/agedAccountsPayable",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAgedAccountsPayableOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAgedAccountsPayableByVendorIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/agedAccountsPayable({agedAccountsPayable_vendorId})",
  urlParameters: [
    Parameters.companyId,
    Parameters.agedAccountsPayableVendorId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AgedAccountsPayable
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getBalanceSheetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/balanceSheet",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetBalanceSheetOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getBalanceSheetByLineNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/balanceSheet({balanceSheet_lineNumber})",
  urlParameters: [
    Parameters.companyId,
    Parameters.balanceSheetLineNumber
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BalanceSheet
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTrialBalanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/trialBalance",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetTrialBalanceOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTrialBalanceByNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/trialBalance('{trialBalance_number}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.trialBalanceNumber
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TrialBalance
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getIncomeStatementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/incomeStatement",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetIncomeStatementOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getIncomeStatementByLineNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/incomeStatement({incomeStatement_lineNumber})",
  urlParameters: [
    Parameters.companyId,
    Parameters.incomeStatementLineNumber
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IncomeStatement
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTaxAreasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/taxAreas",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetTaxAreasOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postTaxAreaOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/taxAreas",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.TaxArea
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getTaxAreaByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/taxAreas({taxArea_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.taxAreaId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TaxArea
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteTaxAreaByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/taxAreas({taxArea_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.taxAreaId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchTaxAreaByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/taxAreas({taxArea_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.taxAreaId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TaxArea
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesQuotesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesQuotesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesQuoteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesQuote
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesQuoteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesQuote
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesQuoteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesQuoteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesQuote
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const makeInvoiceActionSalesQuotesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.makeInvoice",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const sendActionSalesQuotesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/Microsoft.NAV.send",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesQuoteLinesForSalesQuoteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesQuoteLinesForSalesQuoteOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesQuoteLineForSalesQuoteOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesQuoteLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesQuoteLineForSalesQuoteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId,
    Parameters.salesQuoteLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesQuoteLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesQuoteLineForSalesQuoteByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId,
    Parameters.salesQuoteLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesQuoteLineForSalesQuoteByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/salesQuoteLines('{salesQuoteLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId,
    Parameters.salesQuoteLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesQuoteLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForSalesQuoteOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPdfDocumentForSalesQuoteOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForSalesQuoteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuotes({salesQuote_id})/pdfDocument({pdfDocument_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteId,
    Parameters.pdfDocumentId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PdfDocument
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesQuoteLinesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuoteLines",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesQuoteLinesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesQuoteLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuoteLines",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesQuoteLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesQuoteLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesQuoteLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesQuoteLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesQuoteLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesQuoteLines('{salesQuoteLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesQuoteLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesQuoteLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesCreditMemosOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesCreditMemosOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesCreditMemoOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesCreditMemo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesCreditMemoByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesCreditMemo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesCreditMemoByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesCreditMemoByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesCreditMemo
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesCreditMemoLinesForSalesCreditMemoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesCreditMemoLinesForSalesCreditMemoOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesCreditMemoLineForSalesCreditMemoOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesCreditMemoLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesCreditMemoLineForSalesCreditMemoByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId,
    Parameters.salesCreditMemoLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesCreditMemoLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesCreditMemoLineForSalesCreditMemoByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId,
    Parameters.salesCreditMemoLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesCreditMemoLineForSalesCreditMemoByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId,
    Parameters.salesCreditMemoLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesCreditMemoLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForSalesCreditMemoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPdfDocumentForSalesCreditMemoOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForSalesCreditMemoByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemos({salesCreditMemo_id})/pdfDocument({pdfDocument_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoId,
    Parameters.pdfDocumentId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PdfDocument
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesCreditMemoLinesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemoLines",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetSalesCreditMemoLinesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postSalesCreditMemoLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemoLines",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.SalesCreditMemoLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSalesCreditMemoLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SalesCreditMemoLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteSalesCreditMemoLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchSalesCreditMemoLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/salesCreditMemoLines('{salesCreditMemoLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.salesCreditMemoLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SalesCreditMemoLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getGeneralLedgerEntryAttachmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/generalLedgerEntryAttachments",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetGeneralLedgerEntryAttachmentsOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postGeneralLedgerEntryAttachmentsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/generalLedgerEntryAttachments",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.GeneralLedgerEntryAttachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber,
    Parameters.generalLedgerEntryAttachmentsId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GeneralLedgerEntryAttachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber,
    Parameters.generalLedgerEntryAttachmentsId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchGeneralLedgerEntryAttachmentsByIdByGeneralLedgerEntryNumberOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/generalLedgerEntryAttachments({generalLedgerEntryAttachments_generalLedgerEntryNumber},{generalLedgerEntryAttachments_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.generalLedgerEntryAttachmentsGeneralLedgerEntryNumber,
    Parameters.generalLedgerEntryAttachmentsId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GeneralLedgerEntryAttachments
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPurchaseInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPurchaseInvoicesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postPurchaseInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PurchaseInvoice
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPurchaseInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PurchaseInvoice
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePurchaseInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPurchaseInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PurchaseInvoice
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postActionPurchaseInvoicesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/Microsoft.NAV.post",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPurchaseInvoiceLinesForPurchaseInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPurchaseInvoiceLinesForPurchaseInvoiceOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postPurchaseInvoiceLineForPurchaseInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PurchaseInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPurchaseInvoiceLineForPurchaseInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId,
    Parameters.purchaseInvoiceLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PurchaseInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePurchaseInvoiceLineForPurchaseInvoiceByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId,
    Parameters.purchaseInvoiceLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPurchaseInvoiceLineForPurchaseInvoiceByIdByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId,
    Parameters.purchaseInvoiceLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PurchaseInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForPurchaseInvoiceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPdfDocumentForPurchaseInvoiceOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPdfDocumentForPurchaseInvoiceByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoices({purchaseInvoice_id})/pdfDocument({pdfDocument_id})",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceId,
    Parameters.pdfDocumentId
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PdfDocument
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPurchaseInvoiceLinesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoiceLines",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetPurchaseInvoiceLinesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const postPurchaseInvoiceLineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoiceLines",
  urlParameters: [
    Parameters.companyId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PurchaseInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getPurchaseInvoiceLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceLineId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PurchaseInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deletePurchaseInvoiceLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceLineId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const patchPurchaseInvoiceLineByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v1.0/api/v1.0/companies({company_id})/purchaseInvoiceLines('{purchaseInvoiceLine_id}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.purchaseInvoiceLineId
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.BodyModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModelModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PurchaseInvoiceLine
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerSalesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerSales",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetCustomerSalesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getCustomerSaleByNameByCustomerNumberByCustomerIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/customerSales({customerSale_customerId},'{customerSale_customerNumber}','{customerSale_name}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.customerSaleCustomerId,
    Parameters.customerSaleCustomerNumber,
    Parameters.customerSaleName
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomerSale
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVendorPurchasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendorPurchases",
  urlParameters: [
    Parameters.companyId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.skip,
    Parameters.limit,
    Parameters.filter,
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetVendorPurchasesOKResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getVendorPurchaseByNameByVendorNumberByVendorIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1.0/api/v1.0/companies({company_id})/vendorPurchases({vendorPurchase_vendorId},'{vendorPurchase_vendorNumber}','{vendorPurchase_name}')",
  urlParameters: [
    Parameters.companyId,
    Parameters.vendorPurchaseVendorId,
    Parameters.vendorPurchaseVendorNumber,
    Parameters.vendorPurchaseName
  ],
  queryParameters: [
    Parameters.select
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VendorPurchase
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

export {
  Dynamics365BusinessCentral,
  Dynamics365BusinessCentralContext,
  Models as Dynamics365BusinessCentralModels,
  Mappers as Dynamics365BusinessCentralMappers
};
