/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as Models from "./models";
import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";

const packageName = "@azure/arm-devtestlabs";
const packageVersion = "3.2.0";

export class Dynamics365BusinessCentralContext extends msRestAzure.AzureServiceClient {
  credentials: msRest.ServiceClientCredentials;
  filter?: string;
  top?: number;
  skip?: number;
  limit?: number;
  ifMatch: string;

  /**
   * Initializes a new instance of the Dynamics365BusinessCentral class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param ifMatch Required. When this request header is included and the eTag provided does not
   * match the current tag on the entity, this will not be updated.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, ifMatch: string, options?: Models.Dynamics365BusinessCentralOptions) {
    if (credentials == undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (ifMatch == undefined) {
      throw new Error('\'ifMatch\' cannot be null.');
    }

    if (!options) {
      options = {};
    }
    if(!options.userAgent) {
      const defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
    }

    super(credentials, options);

    this.acceptLanguage = 'en-US';
    this.longRunningOperationRetryTimeout = 30;
    this.baseUri = options.baseUri || this.baseUri || "https://api.businesscentral.dynamics.com/v1.0/api/v1.0";
    this.requestContentType = "application/json; charset=utf-8";
    this.credentials = credentials;
    this.ifMatch = ifMatch;

    if(options.filter !== null && options.filter !== undefined) {
      this.filter = options.filter;
    }
    if(options.top !== null && options.top !== undefined) {
      this.top = options.top;
    }
    if(options.skip !== null && options.skip !== undefined) {
      this.skip = options.skip;
    }
    if(options.limit !== null && options.limit !== undefined) {
      this.limit = options.limit;
    }
    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
      this.acceptLanguage = options.acceptLanguage;
    }
    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
    }
  }
}
